OBJECT Table 70000 ForNAV Setup
{
  OBJECT-PROPERTIES
  {
    Date=15-01-18;
    Time=09:20:38;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=ENU=Primary Key }
    { 9   ;   ;Localization        ;Option        ;OnValidate=BEGIN
                                                                IF Localization = Localization::"North America" THEN
                                                                  "VAT Amount Specification" := "VAT Amount Specification"::"N/A. (Sales Tax)";
                                                              END;

                                                   CaptionML=ENU=Localization;
                                                   OptionString=World Wide,North America,Other }
    { 10  ;   ;VAT Amount Specification;Option    ;CaptionML=ENU=VAT Amount Specification;
                                                   OptionString=Multiple Lines,Always,Never,N/A. (Sales Tax) }
    { 14  ;   ;Use ForNAV Languages;Boolean       ;InitValue=Yes;
                                                   CaptionML=ENU=Use ForNAV Languages }
    { 15  ;   ;Use Preprinted Paper;Boolean       ;CaptionML=ENU=Use Preprinted Paper }
    { 20  ;   ;Logo                ;BLOB          ;CaptionML=ENU=Logo }
    { 21  ;   ;Logo File Name      ;Text250       ;InitValue=Click to import...;
                                                   CaptionML=ENU=Logo File Name;
                                                   Editable=No }
    { 50  ;   ;Document Watermark File Name;Text250;
                                                   InitValue=Click to import...;
                                                   CaptionML=ENU=Document Watermark File Name;
                                                   Editable=No }
    { 51  ;   ;List Report Watermark File N.;Text250;
                                                   InitValue=Click to import...;
                                                   CaptionML=ENU=List Report Watermark File Name;
                                                   Editable=No }
    { 60  ;   ;Document Watermark  ;BLOB          ;CaptionML=ENU=Document Watermark }
    { 61  ;   ;List Report Watermark;BLOB         ;CaptionML=ENU=List Report Watermark }
    { 70  ;   ;Payment Note        ;Text250       ;CaptionML=ENU=Payment Note }
    { 80  ;   ;Legal Conditions    ;Text250       ;CaptionML=ENU=Legal Conditions }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE InitSetup@1000000000();
    BEGIN
      IF GET THEN
        EXIT;

      INIT;
      INSERT;
    END;

    PROCEDURE ReplaceReportSelection@1(HideDialog@1000 : Boolean);
    VAR
      DoYouWantToQst@1001 : TextConst 'ENU=Do you want to replace the current reports with the ForNAV reports?';
      ReplaceReportSel@1002 : Codeunit 70029;
    BEGIN
      IF NOT HideDialog THEN
        IF NOT CONFIRM(DoYouWantToQst, TRUE) THEN
          EXIT;

      ReplaceReportSel.RUN;
    END;

    PROCEDURE DesignTemplatePortrait@1000000003();
    VAR
      Template@1000 : Report 70527;
    BEGIN
      Template.RUNMODAL;
    END;

    PROCEDURE DesignTemplateLandscape@9();
    VAR
      Template@1000 : Report 70526;
    BEGIN
      Template.RUNMODAL;
    END;

    PROCEDURE DesignSalesTemplate@3();
    VAR
      SalesTemplateVAT@1000 : Report 70529;
      SalesTemplSalesTax@1001 : Report 70519;
    BEGIN
      IF Localization = Localization::"North America" THEN
        SalesTemplSalesTax.RUNMODAL
      ELSE
        SalesTemplateVAT.RUNMODAL;
    END;

    PROCEDURE DesignPurchaseTemplate@1000000001();
    VAR
      PurchaseTemplVAT@1000 : Report 70528;
      PurchaseTemplTax@1001 : Report 70518;
    BEGIN
      IF Localization = Localization::"North America" THEN
        PurchaseTemplTax.RUNMODAL
      ELSE
        PurchaseTemplVAT.RUNMODAL;
    END;

    PROCEDURE ImportWatermarkFromClientFile@21(Which@1000 : Integer) : Boolean;
    VAR
      ForNAVReadWatermarks@1002 : Codeunit 70006;
    BEGIN
      EXIT(ForNAVReadWatermarks.ReadFromFile(Rec, Which));
    END;

    PROCEDURE GetLegalConditions@1000000002(LanguageCode@1000000001 : Code[10]) : Text;
    VAR
      LegalCondTranslation@1000000000 : Record 70001;
    BEGIN
      IF LegalCondTranslation.GET(LanguageCode) THEN
        EXIT(LegalCondTranslation."Legal Conditions");

      EXIT("Legal Conditions");
    END;

    PROCEDURE CheckLocalizationBasedOnTables@5();
    VAR
      DetectLocalization@1001 : Codeunit 70005;
    BEGIN
      DetectLocalization.CheckLocalizationBasedOnTables(Rec);
    END;

    PROCEDURE ValidateCurrentLocalization@4() : Boolean;
    VAR
      DetectLocalization@1001 : Codeunit 70005;
    BEGIN
      EXIT(DetectLocalization.ValidateCurrentLocalization(Rec));
    END;

    PROCEDURE DownloadWatermarks@6();
    BEGIN
      HYPERLINK('http://www.fornav.com/report-watermarks/');
    END;

    PROCEDURE CreateWebService@7();
    VAR
      WebService@1000 : Record 2000000076;
    BEGIN
      WebService."Object Type" := WebService."Object Type"::Page;
      WebService."Object ID" := PAGE::Fields;
      WebService."Service Name" := 'FIELDS';
      WebService.VALIDATE("Service Name", 'Fields');
      IF NOT WebService.INSERT THEN
        EXIT;

      WebService.Published := TRUE;
      WebService.MODIFY;

      WebService."Object Type" := WebService."Object Type"::Page;
      WebService."Object ID" := PAGE::"ForNAV Fields Webservice";
      WebService."Service Name" := 'FIELDSEX';
      WebService.VALIDATE("Service Name", 'FieldsEx');
      IF NOT WebService.INSERT THEN
        EXIT;

      WebService.Published := TRUE;
      WebService.MODIFY;
    END;

    PROCEDURE GetCompanyLogo@8();
    VAR
      CompanyInformation@1000 : Record 79;
    BEGIN
      CompanyInformation.GET;
      CompanyInformation.CALCFIELDS(Picture);
      Logo := CompanyInformation.Picture;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70001 ForNAV Legal Cond. Translation
{
  OBJECT-PROPERTIES
  {
    Date=14-07-17;
    Time=10:55:28;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 2   ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=ENU=Language Code }
    { 80  ;   ;Legal Conditions    ;Text250        }
  }
  KEYS
  {
    {    ;Language Code                           ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70219 ForNAV Aged Accounts Args.
{
  OBJECT-PROPERTIES
  {
    Date=22-01-18;
    Time=14:53:08;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Print Amounts in LCY;Boolean       ;CaptionML=[DAN=Udskriv belõb i RV;
                                                              DEU=BetrÑge in MW drucken;
                                                              ENU=Print Amounts in LCY;
                                                              NLD=Bedragen in LV afdrukken];
                                                   Description=Done }
    { 2   ;   ;Ending Date         ;Date          ;CaptionML=[DAN=Slutdato;
                                                              DEU=Enddatum;
                                                              ENU=Ending Date;
                                                              NLD=Einddatum];
                                                   Description=Done }
    { 3   ;   ;Aging By            ;Option        ;CaptionML=[DAN=Aldersfordelt efter;
                                                              DEU=RÅckblick nach;
                                                              ENU=Aging By;
                                                              NLD=Vervallen per];
                                                   OptionCaptionML=[DAN=Forfaldsdato,Bogfõringsdato,Bilagsdato;
                                                                    DEU=FÑlligkeitsdatum,Buchungsdatum,Belegdatum;
                                                                    ENU=Due Date,Posting Date,Document Date;
                                                                    NLD=Vervaldatum,Boekingsdatum,Documentdatum];
                                                   OptionString=Due Date,Posting Date,Document Date;
                                                   Description=Done }
    { 4   ;   ;Period Length       ;DateFormula   ;CaptionML=[DAN=Periodelëngde;
                                                              DEU=PeriodenlÑnge;
                                                              ENU=Period Length;
                                                              NLD=Periodelengte];
                                                   Description=Done }
    { 5   ;   ;Print Details       ;Boolean       ;CaptionML=[DAN=Udskriv detaljer;
                                                              DEU=Print Details;
                                                              ENU=Print Details;
                                                              NLD=Details afdrukken];
                                                   Description=Done }
    { 6   ;   ;Heading Type        ;Option        ;CaptionML=[DAN=Overskriftstype;
                                                              DEU=öberschriftsart;
                                                              ENU=Heading Type;
                                                              NLD=Type kop];
                                                   OptionString=Date Interval,Number of Days;
                                                   Description=Done }
    { 7   ;   ;New Page Per Customer;Boolean      ;CaptionML=[DAN=Skift side pr. debitor;
                                                              DEU=Neue Seite pro Debitor;
                                                              ENU=New Page Per Customer;
                                                              NLD=Nieuwe pagina per klant];
                                                   Description=Done }
    { 9   ;   ;Period Start Date   ;Date          ;CaptionML=[DAN=Periodes startdato;
                                                              DEU=Periodenstartdatum;
                                                              ENU=Period Start Date;
                                                              NLD=Begindatum van periode];
                                                   Description=Done }
    { 12  ;   ;Currency Code       ;Code10        ;CaptionML=[DAN=Valutakode;
                                                              DEU=WÑhrungscode;
                                                              ENU=Currency Code;
                                                              NLD=Valutacode];
                                                   Description=Done }
    { 13  ;   ;Column Count        ;Integer       ;CaptionML=[DAN=Antal kolonner;
                                                              DEU=Anzahl Spalten;
                                                              ENU=Column Count;
                                                              NLD=Kolomtelling];
                                                   MinValue=1;
                                                   MaxValue=31;
                                                   Description=Done }
  }
  KEYS
  {
    {    ;Print Amounts in LCY                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PeriodStartDate@1000000001 : ARRAY [31] OF Date;
      PeriodEndDate@1000000000 : ARRAY [31] OF Date;
      HeaderText@1000000002 : ARRAY [31] OF Text;

    PROCEDURE CalcDates@5();
    VAR
      i@1000 : Integer;
      PeriodLength2@1001 : DateFormula;
      Text010@1000000001 : TextConst 'ENU=The Date Formula %1 cannot be used. Try to restate it. E.g. 1M+CM instead of CM+1M.';
      Text032@1000000000 : TextConst '@@@=Negating the period length: %1 is the period length;ENU=-%1';
    BEGIN
      EVALUATE(PeriodLength2,STRSUBSTNO(Text032, "Period Length"));

      IF "Aging By" = "Aging By"::"Due Date" THEN BEGIN
        PeriodEndDate[1] := DMY2DATE(31,12,9999);
        PeriodStartDate[1] := "Ending Date" + 1;
      END ELSE BEGIN
        PeriodEndDate[1] := "Ending Date";
        PeriodStartDate[1] := CALCDATE(PeriodLength2, "Ending Date" + 1);
      END;

      FOR i := 2 TO "Column Count" DO BEGIN
        PeriodEndDate[i] := PeriodStartDate[i - 1] - 1;
        PeriodStartDate[i] := CALCDATE(PeriodLength2,PeriodEndDate[i] + 1);
      END;

      PeriodStartDate[i] := 0D;
      FOR i := 1 TO "Column Count" DO
        IF PeriodEndDate[i] < PeriodStartDate[i] THEN
          ERROR(Text010, "Period Length");

      CreateHeadings;
    END;

    PROCEDURE GetPeriodIndex@8(Date@1040000 : Date) : Integer;
    VAR
      i@1000 : Integer;
    BEGIN
      FOR i := 1 TO "Column Count" DO
        IF Date IN [PeriodStartDate[i]..PeriodEndDate[i]] THEN
          EXIT(i);
    END;

    PROCEDURE GetCaption@1000000000(i@1000000000 : Integer) : Text;
    BEGIN
      EXIT(HeaderText[i]);
    END;

    LOCAL PROCEDURE CreateHeadings@10();
    VAR
      i@1000 : Integer;
      NotDueTxt@1000000015 : TextConst 'DAN=Ikke forfalden;DEU=Nicht fÑllig;ENU=Not Due;NLD=Niet vervallen';
      BeforeTxt@1000000014 : TextConst 'DAN=Fõr;DEU=Vor;ENU=Before;NLD=Voor';
      DaysTxt@1000000013 : TextConst 'ENU=days';
      MoreThanTxt@1000000012 : TextConst 'ENU=More than';
    BEGIN
      IF "Aging By" = "Aging By"::"Due Date" THEN BEGIN
        HeaderText[1] := NotDueTxt;
        i := 2;
      END ELSE
        i := 1;

      WHILE i < "Column Count" DO BEGIN
        IF "Heading Type" = "Heading Type"::"Date Interval" THEN
          HeaderText[i] := STRSUBSTNO('%1\..%2',PeriodStartDate[i],PeriodEndDate[i])
        ELSE
          HeaderText[i] :=
            STRSUBSTNO('%1 - %2 %3', "Ending Date" - PeriodEndDate[i] + 1, "Ending Date" - PeriodStartDate[i] + 1, DaysTxt);
        i := i + 1;
      END;

      IF "Heading Type" = "Heading Type"::"Date Interval" THEN
        HeaderText["Column Count"] := STRSUBSTNO('%1 \%2', BeforeTxt, PeriodStartDate[i - 1])
      ELSE
        HeaderText["Column Count"] := STRSUBSTNO('%1 \%2 %3', MoreThanTxt, "Ending Date" - PeriodStartDate[i - 1] + 1, DaysTxt);
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70220 ForNAV Aging Buffer
{
  OBJECT-PROPERTIES
  {
    Date=21-01-18;
    Time=09:57:31;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=[DAN=Lõbenr.;
                                                              DEU=Lfd. Nr.;
                                                              ENU=Entry No.;
                                                              NLD=Volgnummer] }
    { 20  ;   ;Account Type        ;Option        ;CaptionML=[DAN=Kontotype;
                                                              DEU=Kontoart;
                                                              ENU=Account Type;
                                                              NLD=Rekeningsoort];
                                                   OptionString=Customer,Vendor }
    { 30  ;   ;Account No.         ;Code20        ;TableRelation=IF (Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Account Type=CONST(Vendor)) Vendor;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[DAN=Nummer;
                                                              DEU=Nr.;
                                                              ENU=No.;
                                                              NLD=Nr.] }
    { 31  ;   ;Account Name        ;Text50        ;CaptionML=[DAN=Navn;
                                                              DEU=Name;
                                                              ENU=Name;
                                                              NLD=Naam] }
    { 35  ;   ;Credit Limit (LCY)  ;Decimal       ;CaptionML=[DAN=Kreditmaksimum (RV);
                                                              DEU=Kreditlimit (MW);
                                                              ENU=Credit Limit (LCY);
                                                              NLD=Kredietlimiet (LV)] }
    { 40  ;   ;Currency Code       ;Code10        ;CaptionML=[DAN=Valutakode;
                                                              DEU=WÑhrungscode;
                                                              ENU=Currency Code;
                                                              NLD=Valutacode] }
    { 50  ;   ;Document Type       ;Option        ;CaptionML=[DAN=Bilagstype;
                                                              DEU=Belegart;
                                                              ENU=Document Type;
                                                              NLD=Documenttype];
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 60  ;   ;Document No.        ;Code20        ;CaptionML=[DAN=Bilagsnr.;
                                                              DEU=Belegnr.;
                                                              ENU=Document No.;
                                                              NLD=Documentnr.] }
    { 61  ;   ;External Document No.;Code35       ;CaptionML=[DAN=Eksternt bilagsnr.;
                                                              DEU=Externe Belegnummer;
                                                              ENU=External Document No.;
                                                              NLD=Extern documentnr.] }
    { 65  ;   ;Document Date       ;Date          ;CaptionML=[DAN=Bilagsdato;
                                                              DEU=Belegdatum;
                                                              ENU=Document Date;
                                                              NLD=Documentdatum] }
    { 70  ;   ;Posting Date        ;Date          ;CaptionML=[DAN=Bogfõringsdato;
                                                              DEU=Buchungsdatum;
                                                              ENU=Posting Date;
                                                              NLD=Boekingsdatum] }
    { 80  ;   ;Due Date            ;Date          ;CaptionML=[DAN=Forfaldsdato;
                                                              DEU=FÑlligkeitsdatum;
                                                              ENU=Due Date;
                                                              NLD=Vervaldatum] }
    { 90  ;   ;Amount              ;Decimal       ;CaptionML=[DAN=Belõb;
                                                              DEU=Betrag;
                                                              ENU=Amount;
                                                              NLD=Bedrag] }
    { 95  ;   ;Amount (LCY)        ;Decimal       ;CaptionML=[DAN=Belõb (RV);
                                                              DEU=Betrag (MW);
                                                              ENU=Amount (LCY);
                                                              NLD=Bedrag (LV)] }
    { 100 ;   ;Balance             ;Decimal       ;CaptionML=[DAN=Saldo;
                                                              DEU=Saldo;
                                                              ENU=Balance;
                                                              NLD=Saldo] }
    { 105 ;   ;Balance (LCY)       ;Decimal       ;CaptionML=[DAN=Saldo (RV);
                                                              DEU=Saldo (MW);
                                                              ENU=Balance (LCY);
                                                              NLD=Saldo (LV)] }
    { 110 ;   ;Amount 1            ;Decimal       ;CaptionClass=GetCaptionClass(1) }
    { 115 ;   ;Amount 1 (LCY)      ;Decimal       ;CaptionClass=GetCaptionClass(1) }
    { 120 ;   ;Amount 2            ;Decimal       ;CaptionClass=GetCaptionClass(2) }
    { 125 ;   ;Amount 2 (LCY)      ;Decimal       ;CaptionClass=GetCaptionClass(2) }
    { 130 ;   ;Amount 3            ;Decimal       ;CaptionClass=GetCaptionClass(3) }
    { 135 ;   ;Amount 3 (LCY)      ;Decimal       ;CaptionClass=GetCaptionClass(3) }
    { 140 ;   ;Amount 4            ;Decimal       ;CaptionClass=GetCaptionClass(4) }
    { 145 ;   ;Amount 4 (LCY)      ;Decimal       ;CaptionClass=GetCaptionClass(4) }
    { 150 ;   ;Amount 5            ;Decimal       ;CaptionClass=GetCaptionClass(5) }
    { 155 ;   ;Amount 5 (LCY)      ;Decimal       ;CaptionClass=GetCaptionClass(5) }
    { 160 ;   ;Amount 6            ;Decimal       ;CaptionClass=GetCaptionClass(6) }
    { 165 ;   ;Amount 6 (LCY)      ;Decimal       ;CaptionClass=GetCaptionClass(6) }
    { 167 ;   ;Amount 7            ;Decimal       ;CaptionClass=GetCaptionClass(7) }
    { 170 ;   ;Amount 7 (LCY)      ;Decimal       ;CaptionClass=GetCaptionClass(7) }
    { 175 ;   ;Amount 8            ;Decimal       ;CaptionClass=GetCaptionClass(8) }
    { 180 ;   ;Amount 8 (LCY)      ;Decimal       ;CaptionClass=GetCaptionClass(8) }
    { 182 ;   ;Amount 9            ;Decimal       ;CaptionClass=GetCaptionClass(9) }
    { 185 ;   ;Amount 9 (LCY)      ;Decimal       ;CaptionClass=GetCaptionClass(9) }
    { 190 ;   ;Amount 10           ;Decimal       ;CaptionClass=GetCaptionClass(10) }
    { 195 ;   ;Amount 10 (LCY)     ;Decimal       ;CaptionClass=GetCaptionClass(10) }
    { 200 ;   ;Amount 11           ;Decimal       ;CaptionClass=GetCaptionClass(11) }
    { 205 ;   ;Amount 11 (LCY)     ;Decimal       ;CaptionClass=GetCaptionClass(11) }
    { 210 ;   ;Amount 12           ;Decimal       ;CaptionClass=GetCaptionClass(12) }
    { 215 ;   ;Amount 12 (LCY)     ;Decimal       ;CaptionClass=GetCaptionClass(12) }
    { 220 ;   ;Amount 13           ;Decimal       ;CaptionClass=GetCaptionClass(13) }
    { 225 ;   ;Amount 13 (LCY)     ;Decimal       ;CaptionClass=GetCaptionClass(13) }
    { 230 ;   ;Amount 14           ;Decimal       ;CaptionClass=GetCaptionClass(14) }
    { 235 ;   ;Amount 14 (LCY)     ;Decimal       ;CaptionClass=GetCaptionClass(14) }
    { 240 ;   ;Amount 15           ;Decimal       ;CaptionClass=GetCaptionClass(15) }
    { 245 ;   ;Amount 15 (LCY)     ;Decimal       ;CaptionClass=GetCaptionClass(15) }
    { 250 ;   ;Amount 16           ;Decimal       ;CaptionClass=GetCaptionClass(16) }
    { 255 ;   ;Amount 16 (LCY)     ;Decimal       ;CaptionClass=GetCaptionClass(16) }
    { 260 ;   ;Amount 17           ;Decimal       ;CaptionClass=GetCaptionClass(17) }
    { 265 ;   ;Amount 17 (LCY)     ;Decimal       ;CaptionClass=GetCaptionClass(17) }
    { 270 ;   ;Amount 18           ;Decimal       ;CaptionClass=GetCaptionClass(18) }
    { 275 ;   ;Amount 18 (LCY)     ;Decimal       ;CaptionClass=GetCaptionClass(18) }
    { 280 ;   ;Amount 19           ;Decimal       ;CaptionClass=GetCaptionClass(19) }
    { 285 ;   ;Amount 19 (LCY)     ;Decimal       ;CaptionClass=GetCaptionClass(19) }
    { 290 ;   ;Amount 20           ;Decimal       ;CaptionClass=GetCaptionClass(20) }
    { 295 ;   ;Amount 20 (LCY)     ;Decimal       ;CaptionClass=GetCaptionClass(20) }
    { 300 ;   ;Amount 21           ;Decimal       ;CaptionClass=GetCaptionClass(21) }
    { 305 ;   ;Amount 21 (LCY)     ;Decimal       ;CaptionClass=GetCaptionClass(21) }
    { 310 ;   ;Amount 22           ;Decimal       ;CaptionClass=GetCaptionClass(22) }
    { 315 ;   ;Amount 22 (LCY)     ;Decimal       ;CaptionClass=GetCaptionClass(22) }
    { 320 ;   ;Amount 23           ;Decimal       ;CaptionClass=GetCaptionClass(23) }
    { 325 ;   ;Amount 23 (LCY)     ;Decimal       ;CaptionClass=GetCaptionClass(23) }
    { 330 ;   ;Amount 24           ;Decimal       ;CaptionClass=GetCaptionClass(24) }
    { 335 ;   ;Amount 24 (LCY)     ;Decimal       ;CaptionClass=GetCaptionClass(24) }
    { 340 ;   ;Amount 25           ;Decimal       ;CaptionClass=GetCaptionClass(25) }
    { 345 ;   ;Amount 25 (LCY)     ;Decimal       ;CaptionClass=GetCaptionClass(25) }
    { 350 ;   ;Amount 26           ;Decimal       ;CaptionClass=GetCaptionClass(26) }
    { 355 ;   ;Amount 26 (LCY)     ;Decimal       ;CaptionClass=GetCaptionClass(26) }
    { 360 ;   ;Amount 27           ;Decimal       ;CaptionClass=GetCaptionClass(27) }
    { 365 ;   ;Amount 27 (LCY)     ;Decimal       ;CaptionClass=GetCaptionClass(27) }
    { 370 ;   ;Amount 28           ;Decimal       ;CaptionClass=GetCaptionClass(28) }
    { 375 ;   ;Amount 28 (LCY)     ;Decimal       ;CaptionClass=GetCaptionClass(28) }
    { 380 ;   ;Amount 29           ;Decimal       ;CaptionClass=GetCaptionClass(29) }
    { 385 ;   ;Amount 29 (LCY)     ;Decimal       ;CaptionClass=GetCaptionClass(29) }
    { 390 ;   ;Amount 30           ;Decimal       ;CaptionClass=GetCaptionClass(30) }
    { 395 ;   ;Amount 30 (LCY)     ;Decimal       ;CaptionClass=GetCaptionClass(30) }
    { 400 ;   ;Amount 31           ;Decimal       ;CaptionClass=GetCaptionClass(31) }
    { 405 ;   ;Amount 31 (LCY)     ;Decimal       ;CaptionClass=GetCaptionClass(31) }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      HeaderText@1000000000 : ARRAY [31] OF Text;

    PROCEDURE GetCaptionClass@1000000000(FieldNo@1000000000 : Integer) : Text;
    BEGIN
      EXIT('3,' + HeaderText[FieldNo]);
    END;

    PROCEDURE SetCaptions@1000000001(VAR Args@1000000000 : Record 70219);
    VAR
      i@1000000001 : Integer;
    BEGIN
      FOR i := 1 TO ARRAYLEN(HeaderText) DO
        HeaderText[i] := Args.GetCaption(i);
    END;

    PROCEDURE GetAccountName@1000000002();
    VAR
      Customer@1000000000 : Record 18;
      Vendor@1000000001 : Record 23;
    BEGIN
      CASE "Account Type" OF
        "Account Type"::Customer:
          BEGIN
            Customer.GET("Account No.");
            "Account Name" := Customer.Name;
          END;
        "Account Type"::Vendor:
          BEGIN
            Vendor.GET("Account No.");
            "Account Name" := Vendor.Name;
          END;
      END;
    END;

    BEGIN
    END.
  }
}

OBJECT Table 70250 ForNAV Statement Arguments
{
  OBJECT-PROPERTIES
  {
    Date=22-01-18;
    Time=17:25:19;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Start Date          ;Date          ;CaptionML=[DAN=Startdato;
                                                              DEU=Startdatum;
                                                              ENU=Start Date;
                                                              NLD=Begindatum] }
    { 2   ;   ;Ending Date         ;Date          ;CaptionML=[DAN=Slutdato;
                                                              DEU=Enddatum;
                                                              ENU=Ending Date;
                                                              NLD=Einddatum] }
    { 3   ;   ;Document Date       ;Date          ;CaptionML=[DAN=Bilagsdato;
                                                              DEU=Belegdatum;
                                                              ENU=Document Date;
                                                              NLD=Documentdatum] }
    { 4   ;   ;Print All Having Balance;Boolean   ;CaptionML=[DAN=Medtag ogsÜ debitorer, der kun har saldo;
                                                              DEU=Alle Debitoren mit Saldo einbeziehen;
                                                              ENU=Include All Customers with a Balance;
                                                              NLD=Alle klanten met saldo] }
    { 5   ;   ;Print All Having Entries;Boolean   ;CaptionML=[DAN=Medtag alle debitorer, der har poster;
                                                              DEU=Alle Debitoren mit Buchungen einbeziehen;
                                                              ENU=Include All Customers with Ledger Entries;
                                                              NLD=Alle klanten met posten] }
    { 6   ;   ;Print Entries Due   ;Boolean       ;CaptionML=[DAN=Vis forfaldne poster;
                                                              DEU=FÑllige Posten drucken;
                                                              ENU=Show Overdue Entries;
                                                              NLD=Vervallen posten weergeven] }
    { 7   ;   ;Print Unapplied Entries;Boolean     }
    { 8   ;   ;Print Reversed Entries;Boolean      }
    { 9   ;   ;Include Aging Band  ;Boolean       ;CaptionML=[DAN=Medtag aldersford.intv.;
                                                              DEU=Mit SaldenrÅckblick;
                                                              ENU=Include Aging Band;
                                                              NLD=Vervaldatuminterval opnemen] }
    { 10  ;   ;Date Choice         ;Option        ;CaptionML=[DAN=Aldersford.intv. efter;
                                                              DEU=SaldenrÅckblick nach;
                                                              ENU=Aging Band by;
                                                              NLD=Vervaldatuminterval per];
                                                   OptionCaptionML=[DAN=Forfaldsdato,Bogfõringsdato;
                                                                    DEU=FÑlligkeitsdatum,Buchungsdatum;
                                                                    ENU=Due Date,Posting Date;
                                                                    NLD=Vervaldatum,Boekingsdatum];
                                                   OptionString=Due Date,Posting Date }
    { 11  ;   ;Period Length       ;DateFormula   ;CaptionML=[DAN=Periodelëngde;
                                                              DEU=PeriodenlÑnge;
                                                              ENU=Period Length;
                                                              NLD=Periodelengte] }
  }
  KEYS
  {
    {    ;Start Date                              ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 70900 ForNAV Captions
{
  OBJECT-PROPERTIES
  {
    Date=14-01-18;
    Time=14:49:20;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
    DataPerCompany=No;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=NLD=Primary Key }
    { 2   ;   ;Unit Price          ;Boolean       ;CaptionML=[ENU=Unit Price;
                                                              NLD=Unit Price;
                                                              ESM=Precio unitario;
                                                              FRC=Prix unitaire;
                                                              ENC=Unit Price] }
    { 3   ;   ;No.                 ;Boolean       ;CaptionML=[ENU=No.;
                                                              NLD=Nr.] }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 70998 ForNAV Sales Tax Buffer
{
  OBJECT-PROPERTIES
  {
    Date=17-07-17;
    Time=15:23:01;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10         }
    { 2   ;   ;Exempt Amount       ;Decimal        }
    { 3   ;   ;Taxable Amount      ;Decimal        }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 70999 ForNAV Document Line Buffer
{
  OBJECT-PROPERTIES
  {
    Date=01-05-17;
    Time=12:00:00;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;VAT %               ;Decimal       ;CaptionML=[ENU=VAT %;
                                                              NLD=Btw %];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 2   ;   ;VAT Base            ;Decimal       ;CaptionML=[ENU=VAT Base;
                                                              NLD=Basisbedrag btw];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 3   ;   ;VAT Amount          ;Decimal       ;CaptionML=[ENU=VAT Amount;
                                                              NLD=Btw-bedrag];
                                                   AutoFormatType=1 }
    { 4   ;   ;Amount Including VAT;Decimal       ;CaptionML=[ENU=Amount Including VAT;
                                                              NLD=Bedrag incl. btw];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5   ;   ;VAT Identifier      ;Code10        ;CaptionML=[ENU=VAT Identifier;
                                                              NLD=Btw-identificatie];
                                                   Editable=No }
    { 6   ;   ;Line Amount         ;Decimal       ;CaptionML=[ENU=Line Amount;
                                                              NLD=Regelbedrag];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 7   ;   ;Inv. Disc. Base Amount;Decimal     ;CaptionML=[ENU=Inv. Disc. Base Amount;
                                                              NLD=Basisbedrag factuurkorting];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 8   ;   ;Invoice Discount Amount;Decimal    ;CaptionML=[ENU=Invoice Discount Amount;
                                                              NLD=Bedrag factuurkorting];
                                                   AutoFormatType=1 }
    { 9   ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              NLD=Btw-berekening];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    NLD=Normaal,Verlegging,Volledig,Sales tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 10  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   CaptionML=[ENU=Tax Group Code;
                                                              NLD=Tax Group Code];
                                                   Editable=No }
    { 11  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              NLD=Aantal];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 12  ;   ;Modified            ;Boolean       ;CaptionML=[ENU=Modified;
                                                              NLD=Gewijzigd] }
    { 13  ;   ;Use Tax             ;Boolean       ;CaptionML=[ENU=Use Tax;
                                                              NLD=Use Tax] }
    { 14  ;   ;Calculated VAT Amount;Decimal      ;CaptionML=[ENU=Calculated VAT Amount;
                                                              NLD=Berekend btw-bedrag];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 15  ;   ;VAT Difference      ;Decimal       ;CaptionML=[ENU=VAT Difference;
                                                              NLD=Btw-verschil];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 16  ;   ;Positive            ;Boolean       ;CaptionML=[ENU=Positive;
                                                              NLD=Positief] }
    { 17  ;   ;Includes Prepayment ;Boolean       ;CaptionML=[ENU=Includes Prepayment;
                                                              NLD=Inclusief vooruitbetaling] }
    { 18  ;   ;VAT Clause Code     ;Code10        ;TableRelation="VAT Clause";
                                                   CaptionML=[ENU=VAT Clause Code;
                                                              NLD=Code btw-clausule] }
    { 19  ;   ;Tax Category        ;Code10        ;CaptionML=[ENU=Tax Category;
                                                              NLD=Belastingcategorie] }
    { 70000;  ;Line No.            ;Integer        }
    { 70001;  ;Amount              ;Decimal        }
    { 70002;  ;Allow Invoice Disc. ;Boolean        }
    { 70003;  ;Inv. Discount Amount;Decimal        }
  }
  KEYS
  {
    {    ;Line No.                                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE CreateForRecRef@1000000000(VAR RecRef@1000000000 : RecordRef);
    VAR
      Fld@1000000002 : Record 2000000041;
    BEGIN
      FindAndSetField(RecRef, 'Line No.', 70000);

      Fld.SETRANGE(TableNo, DATABASE::"ForNAV Document Line Buffer");
      Fld.SETFILTER("No.", '<>70000');
      Fld.FINDSET;
      REPEAT
        FindAndSetField(RecRef, Fld.FieldName, Fld."No.");
      UNTIL Fld.NEXT = 0;
    END;

    LOCAL PROCEDURE FindAndSetField@1000000004(VAR RecRef@1000000003 : RecordRef;FieldName@1000000002 : Text;FieldNo@1000000004 : Integer);
    VAR
      FldRef@1000000001 : FieldRef;
      Fld@1000000000 : Record 2000000041;
      ThisRecRef@1000000006 : RecordRef;
      ThisFld@1000000005 : FieldRef;
    BEGIN
      Fld.SETRANGE(TableNo, RecRef.NUMBER);
      Fld.SETRANGE(FieldName, FieldName);
      IF NOT Fld.FINDFIRST THEN
        EXIT;

      FldRef := RecRef.FIELD(Fld."No.");

      ThisRecRef.GETTABLE(Rec);
      ThisFld := ThisRecRef.FIELD(FieldNo);
      ThisFld.VALUE := FldRef.VALUE;

      ThisRecRef.SETTABLE(Rec);
      IF FieldNo = 70000 THEN
        INSERT
      ELSE
        MODIFY;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Report 70000 ForNAV VAT Order Confirmation
{
  OBJECT-PROPERTIES
  {
    Date=19-01-18;
    Time=18:47:23;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=[CSY=Objedn†vka;
               DAN=Ordre;
               DEU=Auftrag;
               ENU=Order;
               FIN=Tilaus;
               FRA=Commande;
               ISL=Pîntun;
               ITA=Ordine;
               NLD=Order;
               NOR=Ordre;
               SVE=Order;
               DES=Auftrag;
               ENG=Order;
               ESM=Pedido;
               FRB=Commande;
               ITS=Ordine;
               NLB=Order;
               DEA=Auftrag;
               ENA=Order;
               ESN=Pedido;
               FRC=Commande;
               ENC=Order;
               FRS=Commande;
               ENZ=Order];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table36;
               DataItemTableView=SORTING(No.)
                                 WHERE(Document Type=CONST(Order));
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table37;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.),
                            Document Type=FIELD(Document Type) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=[CSY=Pocet kopi°;
                             DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             DES=Anzahl Kopien;
                             ENG=No. of Copies;
                             ESM=Nß copias;
                             FRB=Nombre de copies;
                             ITS=Nr. di copie;
                             NLB=Aantal exemplaren;
                             DEA=Anzahl Kopien;
                             ENA=No. of Copies;
                             ESN=Nß copias;
                             FRC=Nombre de copies;
                             ENC=No. of Copies;
                             FRS=Nombre de copies;
                             ENZ=No. of Copies];
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Use ForNAV Languages" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70001 ForNAV VAT Sales Invoice
{
  OBJECT-PROPERTIES
  {
    Date=19-01-18;
    Time=18:47:23;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=[CSY=Faktura;
               DAN=Faktura;
               DEU=Rechnung;
               ENU=Invoice;
               FIN=Lasku;
               FRA=Facture;
               ISL=Reikningur;
               ITA=Fattura;
               NLD=Factuur;
               NOR=Faktura;
               SVE=Faktura;
               DES=Rechnung;
               ENG=Invoice;
               ESM=Factura;
               FRB=Facture;
               ITS=Fattura;
               NLB=Factuur;
               DEA=Rechnung;
               ENA=Invoice;
               ESN=Factura;
               FRC=Facture;
               ENC=Invoice;
               FRS=Facture;
               ENZ=Invoice];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  Name=NoOfCopies;
                  CaptionML=[CSY=Pocet kopi°;
                             DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             DES=Anzahl Kopien;
                             ENG=No. of Copies;
                             ESM=Nß copias;
                             FRB=Nombre de copies;
                             ITS=Nr. di copie;
                             NLB=Aantal exemplaren;
                             DEA=Anzahl Kopien;
                             ENA=No. of Copies;
                             ESN=Nß copias;
                             FRC=Nombre de copies;
                             ENC=No. of Copies;
                             FRS=Nombre de copies;
                             ENZ=No. of Copies];
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Use ForNAV Languages" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE GetNoOfCopies@1000000006() : Integer;
    VAR
      GetNoofCopies@1000000000 : Codeunit 70007;
    BEGIN
      EXIT(NoOfCopies + GetNoofCopies.GetNoOfCopies(Header));
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70002 ForNAV VAT Credit Memo
{
  OBJECT-PROPERTIES
  {
    Date=19-01-18;
    Time=18:47:23;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=[CSY=Dobropis;
               DAN=Kreditnota;
               DEU=Gutschrift;
               ENU=Credit Memo;
               FIN=Hyvityslasku;
               FRA=Avoir;
               ISL=Kreditreikningur;
               ITA=Nota credito;
               NLD=Creditnota;
               NOR=Kreditnota;
               SVE=Kreditnota;
               DES=Gutschrift;
               ENG=Credit Memo;
               ESM=Nota de crÇdito;
               FRB=Avoir;
               ITS=Nota credito;
               NLB=Creditnota;
               DEA=Gutschrift;
               ENA=CR/Adj Note;
               ESN=Abono;
               FRC=Note de crÇdit;
               ENC=Credit Memo;
               FRS=Avoir;
               ENZ=Credit Memo];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table114;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table115;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=[CSY=Pocet kopi°;
                             DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             DES=Anzahl Kopien;
                             ENG=No. of Copies;
                             ESM=Nß copias;
                             FRB=Nombre de copies;
                             ITS=Nr. di copie;
                             NLB=Aantal exemplaren;
                             DEA=Anzahl Kopien;
                             ENA=No. of Copies;
                             ESN=Nß copias;
                             FRC=Nombre de copies;
                             ENC=No. of Copies;
                             FRS=Nombre de copies;
                             ENZ=No. of Copies];
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Use ForNAV Languages" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70003 ForNAV Sales Shipment
{
  OBJECT-PROPERTIES
  {
    Date=19-01-18;
    Time=18:47:23;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=[CSY=Prodejn° dod†vka;
               DAN=Salgsleverance;
               DEU=Verkaufslieferung;
               ENU=Sales Shipment;
               FIN=Myyntitoimitus;
               FRA=ExpÇdition vente;
               ISL=Sîluafhending;
               ITA=Spedizione vendita;
               NLD=Verkoopverzending;
               NOR=F˚lgeseddel;
               SVE=Utleverans;
               DES=Verkaufslieferung;
               ENG=Sales Shipment;
               ESM=Remisi¢n de venta;
               FRB=ExpÇdition vente;
               ITS=Spedizione vendita;
               NLB=Verkoopverzending;
               DEA=Verkaufslieferung;
               ENA=Sales Shipment;
               ESN=Albar†n de venta;
               FRC=Livraison de vente;
               ENC=Sales Shipment;
               FRS=ExpÇdition vente;
               ENZ=Sales Shipment];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table110;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table111;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=[CSY=Pocet kopi°;
                             DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             DES=Anzahl Kopien;
                             ENG=No. of Copies;
                             ESM=Nß copias;
                             FRB=Nombre de copies;
                             ITS=Nr. di copie;
                             NLB=Aantal exemplaren;
                             DEA=Anzahl Kopien;
                             ENA=No. of Copies;
                             ESN=Nß copias;
                             FRC=Nombre de copies;
                             ENC=No. of Copies;
                             FRS=Nombre de copies;
                             ENZ=No. of Copies];
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Use ForNAV Languages" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70004 ForNAV VAT Sales Quote
{
  OBJECT-PROPERTIES
  {
    Date=19-01-18;
    Time=18:47:23;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=ENU=Quote;
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table36;
               DataItemTableView=SORTING(No.)
                                 WHERE(Document Type=CONST(Quote));
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table37;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.),
                            Document Type=FIELD(Document Type) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=[CSY=Pocet kopi°;
                             DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             DES=Anzahl Kopien;
                             ENG=No. of Copies;
                             ESM=Nß copias;
                             FRB=Nombre de copies;
                             ITS=Nr. di copie;
                             NLB=Aantal exemplaren;
                             DEA=Anzahl Kopien;
                             ENA=No. of Copies;
                             ESN=Nß copias;
                             FRC=Nombre de copies;
                             ENC=No. of Copies;
                             FRS=Nombre de copies;
                             ENZ=No. of Copies];
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Use ForNAV Languages" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70010 ForNAV Warehouse Shipment
{
  OBJECT-PROPERTIES
  {
    Date=19-01-18;
    Time=18:47:23;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=NLD=Warehouse Shipment;
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   LoadWatermark;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000000;;DataItem;Header            ;
               DataItemTable=Table7320;
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                END;

               ReqFilterFields=No.,Location Code }

    { 1000000001;1;DataItem;Line             ;
               DataItemTable=Table7321;
               DataItemTableView=SORTING(No.,Bin Code);
               CalcFields=Pick Qty.;
               DataItemLink=No.=FIELD(No.) }

    { 1000000002;2;DataItem;BOMComponent     ;
               DataItemTable=Table90;
               DataItemTableView=SORTING(Parent Item No.,Line No.);
               DataItemLink=Parent Item No.=FIELD(Item No.) }

    { 1000000003;2;DataItem;CommentLine      ;
               DataItemTable=Table44;
               DataItemTableView=SORTING(Document Type,No.,Document Line No.,Line No.)
                                 WHERE(Document Type=CONST(Order));
               DataItemLink=No.=FIELD(Source No.),
                            Document Line No.=FIELD(Source Line No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moßnosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             PLK=Opcje;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE LoadWatermark@1000000004();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("List Report Watermark");
        IF NOT "List Report Watermark".HASVALUE THEN
          EXIT;
        "List Report Watermark".CREATEOUTSTREAM(OutStream);
      END;
      ReportForNav.Watermark.Image.Load(OutStream);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Line': WITH Line DO CASE Operation OF
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70011 ForNAV Warehouse Receipt
{
  OBJECT-PROPERTIES
  {
    Date=19-01-18;
    Time=18:47:23;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=NLD=Warehouse Shipment;
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   LoadWatermark;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000000;;DataItem;Header            ;
               DataItemTable=Table7316;
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                END;

               ReqFilterFields=No.,Location Code }

    { 1000000001;1;DataItem;Line             ;
               DataItemTable=Table7317;
               DataItemTableView=SORTING(No.,Bin Code);
               DataItemLink=No.=FIELD(No.) }

    { 1000000002;2;DataItem;BOMComponent     ;
               DataItemTable=Table90;
               DataItemTableView=SORTING(Parent Item No.,Line No.);
               DataItemLink=Parent Item No.=FIELD(Item No.) }

    { 1000000003;2;DataItem;CommentLine      ;
               DataItemTable=Table43;
               DataItemTableView=SORTING(Document Type,No.,Document Line No.,Line No.)
                                 WHERE(Document Type=CONST(Order));
               DataItemLink=No.=FIELD(Source No.),
                            Document Line No.=FIELD(Source Line No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moßnosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             PLK=Opcje;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE LoadWatermark@1000000004();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("List Report Watermark");
        IF NOT "List Report Watermark".HASVALUE THEN
          EXIT;
        "List Report Watermark".CREATEOUTSTREAM(OutStream);
      END;
      ReportForNav.Watermark.Image.Load(OutStream);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Line': WITH Line DO CASE Operation OF
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70050 ForNAV Tax Order Confirmation
{
  OBJECT-PROPERTIES
  {
    Date=19-01-18;
    Time=18:47:23;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=[CSY=Objedn†vka;
               DAN=Ordre;
               DEU=Auftrag;
               ENU=Order;
               FIN=Tilaus;
               FRA=Commande;
               ISL=Pîntun;
               ITA=Ordine;
               NLD=Order;
               NOR=Ordre;
               SVE=Order;
               DES=Auftrag;
               ENG=Order;
               ESM=Pedido;
               FRB=Commande;
               ITS=Ordine;
               NLB=Order;
               DEA=Auftrag;
               ENA=Order;
               ESN=Pedido;
               FRC=Commande;
               ENC=Order;
               FRS=Commande;
               ENZ=Order];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table36;
               DataItemTableView=SORTING(No.)
                                 WHERE(Document Type=CONST(Order));
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetSalesTaxDetails;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table37;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.),
                            Document Type=FIELD(Document Type) }

    { 1   ;1   ;DataItem;SalesTaxBuffer      ;
               DataItemTable=Table70998;
               DataItemTableView=SORTING(Primary Key);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=[CSY=Pocet kopi°;
                             DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             DES=Anzahl Kopien;
                             ENG=No. of Copies;
                             ESM=Nß copias;
                             FRB=Nombre de copies;
                             ITS=Nr. di copie;
                             NLB=Aantal exemplaren;
                             DEA=Anzahl Kopien;
                             ENA=No. of Copies;
                             ESN=Nß copias;
                             FRC=Nombre de copies;
                             ENC=No. of Copies;
                             FRS=Nombre de copies;
                             ENZ=No. of Copies];
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Use ForNAV Languages" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetSalesTaxDetails@1();
    VAR
      ForNAVGetSalesTaxDetails@1000 : Codeunit 70004;
    BEGIN
      SalesTaxBuffer.DELETEALL;
      ForNAVGetSalesTaxDetails.GetSalesTax(Header, SalesTaxBuffer);
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70051 ForNAV Tax Sales Invoice
{
  OBJECT-PROPERTIES
  {
    Date=19-01-18;
    Time=18:47:23;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=[CSY=Faktura;
               DAN=Faktura;
               DEU=Rechnung;
               ENU=Invoice;
               FIN=Lasku;
               FRA=Facture;
               ISL=Reikningur;
               ITA=Fattura;
               NLD=Factuur;
               NOR=Faktura;
               SVE=Faktura;
               DES=Rechnung;
               ENG=Invoice;
               ESM=Factura;
               FRB=Facture;
               ITS=Fattura;
               NLB=Factuur;
               DEA=Rechnung;
               ENA=Invoice;
               ESN=Factura;
               FRC=Facture;
               ENC=Invoice;
               FRS=Facture;
               ENZ=Invoice];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetSalesTaxDetails;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1   ;1   ;DataItem;SalesTaxBuffer      ;
               DataItemTable=Table70998;
               DataItemTableView=SORTING(Primary Key);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=[CSY=Pocet kopi°;
                             DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             DES=Anzahl Kopien;
                             ENG=No. of Copies;
                             ESM=Nß copias;
                             FRB=Nombre de copies;
                             ITS=Nr. di copie;
                             NLB=Aantal exemplaren;
                             DEA=Anzahl Kopien;
                             ENA=No. of Copies;
                             ESN=Nß copias;
                             FRC=Nombre de copies;
                             ENC=No. of Copies;
                             FRS=Nombre de copies;
                             ENZ=No. of Copies];
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Use ForNAV Languages" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetSalesTaxDetails@1();
    VAR
      ForNAVGetSalesTaxDetails@1000 : Codeunit 70004;
    BEGIN
      SalesTaxBuffer.DELETEALL;
      ForNAVGetSalesTaxDetails.GetSalesTax(Header, SalesTaxBuffer);
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70052 ForNAV Tax Credit Memo
{
  OBJECT-PROPERTIES
  {
    Date=19-01-18;
    Time=18:47:23;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=[CSY=Dobropis;
               DAN=Kreditnota;
               DEU=Gutschrift;
               ENU=Credit Memo;
               FIN=Hyvityslasku;
               FRA=Avoir;
               ISL=Kreditreikningur;
               ITA=Nota credito;
               NLD=Creditnota;
               NOR=Kreditnota;
               SVE=Kreditnota;
               DES=Gutschrift;
               ENG=Credit Memo;
               ESM=Nota de crÇdito;
               FRB=Avoir;
               ITS=Nota credito;
               NLB=Creditnota;
               DEA=Gutschrift;
               ENA=CR/Adj Note;
               ESN=Abono;
               FRC=Note de crÇdit;
               ENC=Credit Memo;
               FRS=Avoir;
               ENZ=Credit Memo];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table114;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetSalesTaxDetails;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table115;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1   ;1   ;DataItem;SalesTaxBuffer      ;
               DataItemTable=Table70998;
               DataItemTableView=SORTING(Primary Key);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=[CSY=Pocet kopi°;
                             DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             DES=Anzahl Kopien;
                             ENG=No. of Copies;
                             ESM=Nß copias;
                             FRB=Nombre de copies;
                             ITS=Nr. di copie;
                             NLB=Aantal exemplaren;
                             DEA=Anzahl Kopien;
                             ENA=No. of Copies;
                             ESN=Nß copias;
                             FRC=Nombre de copies;
                             ENC=No. of Copies;
                             FRS=Nombre de copies;
                             ENZ=No. of Copies];
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Use ForNAV Languages" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetSalesTaxDetails@1();
    VAR
      ForNAVGetSalesTaxDetails@1000 : Codeunit 70004;
    BEGIN
      SalesTaxBuffer.DELETEALL;
      ForNAVGetSalesTaxDetails.GetSalesTax(Header, SalesTaxBuffer);
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70054 ForNAV Tax Sales Quote
{
  OBJECT-PROPERTIES
  {
    Date=19-01-18;
    Time=18:47:23;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=ENU=Quote;
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table36;
               DataItemTableView=SORTING(No.)
                                 WHERE(Document Type=CONST(Quote));
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetSalesTaxDetails;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table37;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.),
                            Document Type=FIELD(Document Type) }

    { 1   ;1   ;DataItem;SalesTaxBuffer      ;
               DataItemTable=Table70998;
               DataItemTableView=SORTING(Primary Key);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=[CSY=Pocet kopi°;
                             DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             DES=Anzahl Kopien;
                             ENG=No. of Copies;
                             ESM=Nß copias;
                             FRB=Nombre de copies;
                             ITS=Nr. di copie;
                             NLB=Aantal exemplaren;
                             DEA=Anzahl Kopien;
                             ENA=No. of Copies;
                             ESN=Nß copias;
                             FRC=Nombre de copies;
                             ENC=No. of Copies;
                             FRS=Nombre de copies;
                             ENZ=No. of Copies];
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Use ForNAV Languages" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetSalesTaxDetails@1();
    VAR
      ForNAVGetSalesTaxDetails@1000 : Codeunit 70004;
    BEGIN
      SalesTaxBuffer.DELETEALL;
      ForNAVGetSalesTaxDetails.GetSalesTax(Header, SalesTaxBuffer);
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70100 ForNAV VAT Purchase Order
{
  OBJECT-PROPERTIES
  {
    Date=19-01-18;
    Time=18:47:23;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=[CSY=N†kupn° objedn†vka;
               DAN=K˚bsordre;
               DEU=Einkaufsbestellung;
               ENU=Purchase Order;
               FIN=Ostotilaus;
               FRA=Commande achat;
               ISL=Innkaupapîntun;
               ITA=Ordine acquisto;
               NLD=Inkooporder;
               NOR=Bestilling;
               SVE=Inkîpsorder;
               DES=Einkaufsbestellung;
               ENG=Purchase Order;
               ESM=Pedido compra;
               FRB=Commande achat;
               ITS=Ordine acquisto;
               NLB=Inkooporder;
               DEA=Einkaufsbestellung;
               ENA=Purchase Order;
               ESN=Pedido compra;
               FRC=Bon de commande;
               ENC=Purchase Order;
               FRS=Commande achat;
               ENZ=Purchase Order];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table38;
               DataItemTableView=SORTING(Document Type,No.)
                                 WHERE(Document Type=CONST(Order));
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table39;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.),
                            Document Type=FIELD(Document Type) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=[CSY=Pocet kopi°;
                             DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             DES=Anzahl Kopien;
                             ENG=No. of Copies;
                             ESM=Nß copias;
                             FRB=Nombre de copies;
                             ITS=Nr. di copie;
                             NLB=Aantal exemplaren;
                             DEA=Anzahl Kopien;
                             ENA=No. of Copies;
                             ESN=Nß copias;
                             FRC=Nombre de copies;
                             ENC=No. of Copies;
                             FRS=Nombre de copies;
                             ENZ=No. of Copies];
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Use ForNAV Languages" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70101 ForNAV VAT Purchase Invoice
{
  OBJECT-PROPERTIES
  {
    Date=19-01-18;
    Time=18:47:23;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=[CSY=N†kupn° faktura;
               DAN=K˚bsfaktura;
               DEU=Einkaufsrechnung;
               ENU=Purchase Invoice;
               FIN=Ostolasku;
               FRA=Facture achat;
               ISL=Innkaupareikningur;
               ITA=Fattura acquisto;
               NLD=Inkoopfactuur;
               NOR=Kj˚psfaktura;
               SVE=Inkîpsfaktura;
               DES=Einkaufsrechnung;
               ENG=Purchase Invoice;
               ESM=Factura compra;
               FRB=Facture achat;
               ITS=Fattura acquisto;
               NLB=Inkoopfactuur;
               DEA=Einkaufsrechnung;
               ENA=Purchase Invoice;
               ESN=Factura compra;
               FRC=Facture achat;
               ENC=Purchase Invoice;
               FRS=Facture achat;
               ENZ=Purchase Invoice];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table122;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table123;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=[CSY=Pocet kopi°;
                             DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             DES=Anzahl Kopien;
                             ENG=No. of Copies;
                             ESM=Nß copias;
                             FRB=Nombre de copies;
                             ITS=Nr. di copie;
                             NLB=Aantal exemplaren;
                             DEA=Anzahl Kopien;
                             ENA=No. of Copies;
                             ESN=Nß copias;
                             FRC=Nombre de copies;
                             ENC=No. of Copies;
                             FRS=Nombre de copies;
                             ENZ=No. of Copies];
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Use ForNAV Languages" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>3ZsAAO1de3PbOJL//6ruO3B1VZekVqvgRZCcRDvlRzLj2sTxxk5mam+2UhAJ2dzQopeiEnt2r+o+zX2w+yQH8CU+QBGUKNuzM5maxCYJoNG/BtDdaDRefnt7HRhfeLT0w8V0BCdgZPCFG3r+4nI6WsXzP9ijb//47//28sc4Yu/5TRjFyzfsLlzF5zzyWeD/zCNj/ePHoiIyQRNT1lZ5NDJO2TWfjrKaXofRKfsyMo7CRRyFwcXdjXh3zL+8ur2J+HI5KTU6+XBS+hWNjZbPvshmxnmrxtTIKRkbR6sgXkVcPFvwlSgSjI2z1Szw3T/xu4vwM5dfe5bLbG4jYM0JJ0DQf+wvbwJ2l9ItCT74aHw8uBBFI/eKLblxsvgS+i4fGZVOFd3GEyD+gwTRkfFu9jfuxqfhdGQBCODIeO3zwPuBzwQHv4g6PkTBdPTnb356t+DHkf+F/3QWhbLE8qe04Z/E/whAexLfxiPjjF3y77l/eRVPR8ixQPrkB9+Lr8QDKIl/y6JLf7EUVADBACj/QtlfonHB9enoQGI3NpybeGyIDkXnPJ7Kbt/4ohKT5N36sPDFxxd8EV8t380P3vpB4F/zmEeiV4uziKdfvWVL8ejcjfybuOBWwakLfi1YGfORECjDeHnIFt4y+VH8chLza5hJx/ecebLiilikbD1mMZOfyrJCmPhX2eUzHr3nbhh501EcrQQSRyxwE9aKnh9ch6tFLFByg5WUagneOH04Mi7CmAX5lxSMqcDkuyhc3VReYMGOrN2PLKrSmL+4YLNAPE7+gQjVXnz0+dfp6Pzd+4uT0++enoaTZ5Kvf3/tB4JdeTPi8fgsXMaSyGPJJsGAG5+LN1AAciJ6h2SpJY9lp09X1zMe5T1OMMibzPk/yphb43WJ3+/5POmegtNpBzM+J10+Dt3VtRCAouuFiBwy9/NRGISCnEMhkAkCi/OryF98no7mLFiKJ2fiNyEft+8WrgRMdqH67t3ilZiH7tIXaa8ycRIjIBlKbfI0rlN2EATh15QLr6IojJZ5hef+5YLJSWA6cpjrugBgyGdzAEzXcajrEUZm3AFoPicIutQCVIzarH01E9IB+Ho6srEY50AM6hKXBZ8zzi4rT6v8J0r+X/Db+DC8HVXGxKfjFU9F41xMt6JVbCetIkLGpjNxxB9R25vQZZLi10HIhBhADJNXtj02qJX+WEYvnQfO+WXIjQ8nY8O+ieXDiOeQBgJeMVYEQQeBYKDs/nT01ve8gL+XvRdcCKOfk3diak+fyK+no//7n/8tKJbSKSaXRNrLfZrkX9RYJJh0Ht8FXAhHGPnxXcosc2R8WPKU5Ex6kt8LatcPawRnL57XkXieQKHCB6VNUh18jlZRlM6Bn85jMWhY5B2xG4nC8pMYxncFYmJRGVPQAElMyiYFnbAUbE3rbPJ0TcekTsckKaPFZavJZTXfkIpvOK3E7iHXSQ/ehOHn1c3y0xm7k5Bd8Oh6ecyXyTgWHSgLvWBhMtoQggp5R4KbFk4k3TLp/cl6K+Gtsl/u96StuBZkzn4GBlYBTNIm5bK0O8KZeK7RRQm0gMIMZECbEAOwhtjpAHhsLCW7podh4LWB3YCvoKo/dHlRLdgg1MRNDQ9RwWNmVaO+8BQzVmOZKWPSgobm0qKNRvfCUaG53zIC8U5sN1Vsp1nVfdbzGtsz5aLO+w1MT5d2Bw82CKo06PK+XEgPAN2FXA0AVQFgZVVrLdhKAN5F4tlp2MX7Pcw9RcuaHM+/12O2Yj3vwWxLxWw7q7r3Kl8wWxhi7/mlvxSmeKJf67B96ElGQYMmAM2SelDortNqKGwVFE5aNdp6Of7IF14YKRbiNhSGnXWU/BUr6qc4TCnrAUutmBYmaLc12FHadiCre/tFuDQgWowGNMFYGHdwbHRbDr2YfxoavzeefGM8Ef9kH/TAQF1aD4rd1mUIlFhkhjbqvTInvqBEXRVCdeB50t1YAQUlihFGdtMMkQ63xCan1O4aJxo2yEV484bP48ShGmf2h3hWsUfSD5q4pt2Y1LqxGU1lGT0M92WjK410mFnpSM9MD69v2OLuZDEPo+sErQrQPSGGGGRm6OBYZ6blBrDrxucGXJu9rmDcD11dXaIvukpXAsx8CUhLzSg5YeqL2Qa3C+iaPHVWsYa3IB2LLYNTOnDaDcySD6eXLYn25AOASicAzLwAWK12nPmudLRuHnvZRy3GTQWXDEdLvMiHmmlv76nJGxbVJltdfwnD65Nrdqm0eRTjJ69ACxgM+/NcadnDzLTHWlpFaTicJT3LeIjUYwGaQGs4DOowa2H4egQkn+hxWVd36AuF0tqHmbmP+ygVdaU2n5xMJSCJH1Nb1x4KlkwJ0Na/t9G48b5UBKVfAGaOAdzbMaDS/0gZtg1esRS9e99v6WPRbmnD4n2pAEpHA8w8Dbi3p0GFnr1Gj6QDq93LnHk9oY3HhkVyrO8Pym6fUC8vEN6XeqB0SsDMK0H6eCXUDtAee5wmfIAZU99r2t9PSnR9E31Bq3otXj5XbFQ3t0bL26JErYO8DsO4GjeQPtkcL3AmuM9PFodhHIfX+W59W1jAplCCZuCBbhBBTmY5RgDgmYfnroewZxPbdRnw6Nz0XDh35wCZ0LIdMTG4tRiBvKYiNgCZYIuwAHVcRs/5jhbDCCaqM1HaQHobz41xcSR+Tjq6Hhj5o7erIPbf+IsCtHSo/JdKlb4KF/w0NIzfTY0nT4xvjTZzde3ky0r83nhipG6mTdV+YyxWQTA2/vM/bo9fiL8OXii+fvXpLfMDfRKy7zdSkH2Ttb+x+e/Day7luAcTiiIbaSi+0uJCQyHQJ6dZNKdLTVjzey0KTw4PTvWJSr7eyJ/kC62Wz384eX1xFHp9MFqX2UjE+rOUkr9O1pTMkxixp/PVIplhjKdfWPDM+EfExRS1MMQvL/772eRvob94+sT4p/HkmWr1+W3U/Tbqfht1ex11esocUSpzQwWqEXM4Fziq6g1q1yl0NioOdO06PYlZ4Lv91YhUa/iOx2/4JQtE5zw/wfjpsxeqiU79oR42dGdskK5KjeoqNc6wkQqTRtxz/tsZiwRVMjI4D0etxC1Lf3AjcDltQh22jEebwpZz48WQgcqyGiMNZM6LiEefBSu5oMlVREi/SZTyciXT1yev3hxn4dCyF7imJdejlhsqstolcBh6d2UDRNK6lA87bJC9mBWlxkuWBeCAuXPkupDZgGHX5ZjN5tgyPdt0IDGR5ZgMclCzLEqVFcYFBQoBb7EvGgx0KjxKQK+x9Mf32dOO6SDdi7ZMSqvmhIICQcP78KuKtjp9wm4q0ydKqalLXqyx/SE7FQEmJrUcIASbZD+oyUlZxgMlv5R0QTUdso4yxckevm5Ir/y2RLlDbWQRiwKEHIxsUzXfyTaSnfkNW1DnV+HXd6v4ZiWeH98t2LXvLrMZRVQ2kVXIPhjTqYFeJJIuVoKvhZzXd7A2cKglYhvtMLFWKlcugA2IssXQrJvPbRBVA3U1saoUykFDE9OmyEQYQiodA7QVskrxGsf7M1ihVXTzsb7d2uBjtvNq1pWKNj7+ecUWsSBKn4nrEk2xJ5hQGzqWGGiHAVt8/guPwtyV0MLUdXWbnHgb5Dv9oj//d9EcmsDUN1sbwGT7rqalCYw8uhXO33K2THY8ddGpFatDZAJMxQ/QkvGuLYjUqrhnWOxBYanvxzZgybZmTUcTFvnXsb905Um0MzfWB6ZRsDl6MLVt0yRyy0R39DRq3YRWx5ryPVvmVU2n+ZG8ofGVOsiA+NY3eRv4Zvu9VHfpl8J/FC57ALsu0UTUsoADTcfqgei6uvsdeHTYBb++pdsAJtvdpboLfn74UxeW/PscFDiBDqamCWxEEADQofqYFAdP7xeRXfwOTUTq27Tl95u06E0K3MvnLSZBWyGleZ29SjYfhHG3ul5kDDC3OvinjhdonoxNjJPhj8X2MjHz5ktGJpnPPOh6xLYdxkyL2thGAHqMUUQ8PHMxsDizGVYZmY3zrfI8+dZ2JrUUrNK2NpOj7B2bVoeh3ApfCk4nW4i7mZ3UVpCra3werOLwtTwsn04Ee7dFqa7CUY8u/9Qitp0RkHVeq01YOrEBQQ6wHJNi7BAZfdPYFWyZJuvx5I0JM225ERCdEzS4EWuplY2CE/dn11q6+kftaNna4twa9w7r15kQ20SmbVOCHQSkN3E7vCvVPzTwamVmQOB1DXFLV7+pAp9bxbuj3jTX8yGOHSjmaIS3RrzVdE9xbQbDt+FdWmDT5ndXniy18jSgBOha/JauK6YqAdIOeJdb4buLQYtfIJcFCk3xv9AznG2FYbPX4DFIhNrhM6BE6DobLF0fUFUiarb+1jKx4WBlq5MilxPThggSTGQY2XZy0uWx6JKUx+DEsNROKmV434DypevssLbTLXPPwz4Eq+kkKSQKEEosyyRbK5qtHpNHMOnYag1035Ki632xt1NLU39IWU52XKAUqGYZwGQsyNPSkdRK/g554IQv3Ls8auTZk5K/B08osMV8Jf7YCCJ7a/nalpIdpXEA4du7FnyvPqWWTqbnh0pem/aeqjrU21OlkUKp5XBRxBbLphuq9PghIh0qzZfcUCYi9gxjz4OAutRFDqRzoSACTD0OsO3NPMfE5tyuuaEq1a3dULuEO8hN9Eblj9cNJSeaBrmP1Q1lb6eKnoafWsRW3yJReZ0gwISaFjS3NkMegdfJVmuHD+B1srdTBMtep51h3uh1opZt2baF5XmZX77Xydm7u1HX6+Rsp9cVXqedUf8leJ12V7CcvStYuk4mZzs3Y8Vpszvquk6mx+FjGgD/vTsZdV1KznZOxrpLaVsJGMKlZP6aPUqO2jn5WDxKznZqYuFR2oNc/Vo9Ss7D+B51PUqOrsp5GvZL4LN3RxG2hfg4JAkM+pU5ihIb+V/eU5Tc3bAPV1HV6IJAL82P+MJfrLj3KfOg5kFmebofJ81BYtnKrD+klMNMOxXWxvNc3ekSihC8jVFyPfBQp/7RF7F2o6hsDEGgleynAUg9GRlU5/uByAR9QJDT2dgoQ5Glhs+a758fPi/Yg/OKTD7tDG4aIR3O0c3px1vy+UgVoZmGovT4wbyjihwTHplBz50xjDyTWd5sZlNn5hGECAQW8RjjHpghGYbS9I42Ek04YihTgqztXaSi0eEOkRI9if9FybtCadplhq8rOTtwG68z5rQkeCONrHq/nCke7hru3zbFd8xAGzPsw7p3rC0HTrKp+XCTT6X5ytYMJQTMXYdBMLO8OZVuVMxs7BLoATpzOSVz26lPPpXq1llugJmkyMJwh+kHFneEnV+xG65WgJJX1c0ZU3k+vZpBUpZKq5Fymx6EznLeFb+fxxGP3atcWz9YXMrz0Y5i0ymVVFlnTjrO2igftN5hbtC7SKCZ85Tqan44fW3RsYFIkjILyRCzbfx17aM9M136j/deikWn5qZ3KUCTmXbnpFriop1wUW6Wa50tqbCmuKDs48HFH6pM6+LqhqI9+K1x58+a3ypvckU307sXoMlvq5Pf6S12O8rr+WqWpEroqzIU5XowVpF2r52xKjdt9VIXrXx6TcY6eoyFpJjEBzgSsImVCR/7uzj64bVdI/rgtlwdoO8DUPlNK7fJ6F0goKchgj6T2bCSUKwR5cmq18zWBxW1O0AfFZWPsnLFjN5VAnqowDIqeabL1gHac40RfL9gt+0LycbBUxTswfpey3bTl9ehjVeHy8vnjXstG6tTtiqlvRVilPZo2EQ7cEzHeFy69LPItlNrUJV2ByVJlNrT7sjLZk880bw/93k0lr/K+01XQSIbhiR+LJBK7y015Cw2/iB1f3YrbxP1Y/8Lz9LryKzqyR84SkyDMGLRXabpVvnalXgHIrWXoJ55RxD7UHl3iqZL5g4DM4ZnNrQopabl2WjOCLRnYA5ciGzLpQgyOG/c+VlUNUjOHYiK04WxRLtlv1Un/9ZgeXYgcio0iWItZN13ph3YuF6gfRuoSxesZslej6lyN4gld29MxwKQOMjEyrQ7lVE9qdW1azoXiBU6xXCRXLBxd0A7Q7uvziwztJaLYjtOJpXszkKFAjBcTBRs5PxvZ6HVL69HPdfAVmwsV7Q7KzUX9CordaONYCMnfzsru5Pol6VxEE6W6tmdkZoGdpWRumE7sJEev52R3XnRy4w8ZEu+OxvTWnZnoqYxXWVie3DKY01YkeTp7p+xAhK1Q7p5VkBA8nAJK0qNl7QzxIiNHc/lYG7OLQfaLqGICf3MsxCBjGFsO4gy1tTOGqcErF30M4IqulDLBKWVH3U4BU1mg68qaC103buCRnQXw1KAdb+AnXaXwpBqXCOx8qBKHVHfeKPjkijq7afnEd2VtYTLUK6eQbTBBiDD6IZEfXtNfyS01cVGmloNJLr8O7pIDKZUNiNlB9OMiPpimv6IaGudpq5RWUIEDzc29gDIkJqqub1Tu4qHtvJq6tqkJTzIcHgMoOI20BhI4TW3d2VXsXjcOnD3UVhoql3uzVgLwfyHi7QoNV5SbeeYU6HSm57NIaLAdSEyqYtN1+WcI0rnMwYti9XTfZcqG8b1aJoVLbIlFv9+XY8mrWu2LWTdu2ark2E3zh903wtXjNnkJt81+Q6hJqZU3iRlAkSSnC47TxuP5uQo1E6IW5rbu71mZWaODX21B8ksiNgkBEFqonv2pbWkrN2j6qmdrbbE/G4/Wwfz2zScMu/VydH3531rSUq7Rx1TOx9tifXdnrlu1iuUmb5CP5z60pJ5dkhV8vGoL1XRaNucLvckU4ILDI4CtlrutjGt2oLOq1VtP5t08/az3FCu7x+jnfePW1LrKvaPU9ofcBe5TEA5bh/MHM+ybcxsz0IAQYg9guY2gJw6plDyqGsCz1J4K8sVDqPWUa2Y/a6rImFfvW/r6PHOC58KLpWzMiRhXDKKS/m2bVrrX49+sAvd9YqBYfYKZAZgnb2CthlpbRrWv3iZtrOsT1nQSCOzeGbxFp08D8UQ4q9ub6J8UB1dcfdzce9tdvy5fBT6aSqX9TkGKIPD1sXKXZbsKtNZ7ny5Sy/fc1esPMVn5TEk06uehmnKu7borXWbFQ1XZghNiqZkp6XT3gvyVze1YrluJmNX82KwWqy4xCw55hNUGherVtGLl89/jCOWxm8t37C7cBWf88gXQ+9nHv3x/wE=</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70102 ForNAV VAT Purchase Cr. Memo
{
  OBJECT-PROPERTIES
  {
    Date=19-01-18;
    Time=18:47:23;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=[CSY=N†kupn° dobropis;
               DAN=K˚bskreditnota;
               DEU=Einkaufsgutschrift;
               ENU=Purchase Credit Memo;
               FIN=Ostohyvityslasku;
               FRA=Avoir achat;
               ISL=Innkaupakreditreikningur;
               ITA=Nota credito acquisto;
               NLD=Inkoopcreditnota;
               NOR=Kj˚pskreditnota;
               SVE=Inkîpskreditnota;
               DES=Einkaufsgutschrift;
               ENG=Purchase Credit Memo;
               ESM=Nota crÇdito compra;
               FRB=Avoir achat;
               ITS=Nota credito acquisto;
               NLB=Inkoopcreditnota;
               DEA=Einkaufsgutschrift;
               ENA=Purchase CR/Adj Note;
               ESN=Abono compra;
               FRC=Note de crÇdit d'achat;
               ENC=Purchase Credit Memo;
               FRS=Avoir achat;
               ENZ=Purchase Credit Memo];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table124;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table125;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=[CSY=Pocet kopi°;
                             DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             DES=Anzahl Kopien;
                             ENG=No. of Copies;
                             ESM=Nß copias;
                             FRB=Nombre de copies;
                             ITS=Nr. di copie;
                             NLB=Aantal exemplaren;
                             DEA=Anzahl Kopien;
                             ENA=No. of Copies;
                             ESN=Nß copias;
                             FRC=Nombre de copies;
                             ENC=No. of Copies;
                             FRS=Nombre de copies;
                             ENZ=No. of Copies];
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Use ForNAV Languages" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70104 ForNAV VAT Purchase Quote
{
  OBJECT-PROPERTIES
  {
    Date=19-01-18;
    Time=18:47:23;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=[CSY=N†kupn° popt†vka;
               DAN=K˚bsrekvisition;
               DEU=Einkaufsanfrage;
               ENU=Purchase Quote;
               FIN=Ostotarjous;
               FRA=Demande de prix;
               ISL=Innkaupabei˜ni;
               ITA=Offerta acquisto;
               NLD=Inkoopofferte;
               NOR=Foresp˚rsel;
               SVE=Inkîpsoffert;
               DES=Einkaufsofferte;
               ENG=Purchase Quote;
               ESM=Cotizaci¢n compra;
               FRB=Demande de prix;
               ITS=Offerta acquisto;
               NLB=Inkoopofferte;
               DEA=Einkaufsanfrage;
               ENA=Purchase Quote;
               ESN=Oferta compra;
               FRC=Devis d'achat;
               ENC=Purchase Quote;
               FRS=Demande de prix;
               ENZ=Purchase Quote];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table38;
               DataItemTableView=SORTING(No.)
                                 WHERE(Document Type=CONST(Quote));
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table39;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.),
                            Document Type=FIELD(Document Type) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=[CSY=Pocet kopi°;
                             DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             DES=Anzahl Kopien;
                             ENG=No. of Copies;
                             ESM=Nß copias;
                             FRB=Nombre de copies;
                             ITS=Nr. di copie;
                             NLB=Aantal exemplaren;
                             DEA=Anzahl Kopien;
                             ENA=No. of Copies;
                             ESN=Nß copias;
                             FRC=Nombre de copies;
                             ENC=No. of Copies;
                             FRS=Nombre de copies;
                             ENZ=No. of Copies];
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Use ForNAV Languages" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70150 ForNAV Tax Purchase Order
{
  OBJECT-PROPERTIES
  {
    Date=19-01-18;
    Time=18:47:23;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=[CSY=N†kupn° objedn†vka;
               DAN=K˚bsordre;
               DEU=Einkaufsbestellung;
               ENU=Purchase Order;
               FIN=Ostotilaus;
               FRA=Commande achat;
               ISL=Innkaupapîntun;
               ITA=Ordine acquisto;
               NLD=Inkooporder;
               NOR=Bestilling;
               SVE=Inkîpsorder;
               DES=Einkaufsbestellung;
               ENG=Purchase Order;
               ESM=Pedido compra;
               FRB=Commande achat;
               ITS=Ordine acquisto;
               NLB=Inkooporder;
               DEA=Einkaufsbestellung;
               ENA=Purchase Order;
               ESN=Pedido compra;
               FRC=Bon de commande;
               ENC=Purchase Order;
               FRS=Commande achat;
               ENZ=Purchase Order];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table38;
               DataItemTableView=SORTING(Document Type,No.)
                                 WHERE(Document Type=CONST(Order));
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetSalesTaxDetails;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table39;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.),
                            Document Type=FIELD(Document Type) }

    { 1   ;1   ;DataItem;SalesTaxBuffer      ;
               DataItemTable=Table70998;
               DataItemTableView=SORTING(Primary Key);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=[CSY=Pocet kopi°;
                             DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             DES=Anzahl Kopien;
                             ENG=No. of Copies;
                             ESM=Nß copias;
                             FRB=Nombre de copies;
                             ITS=Nr. di copie;
                             NLB=Aantal exemplaren;
                             DEA=Anzahl Kopien;
                             ENA=No. of Copies;
                             ESN=Nß copias;
                             FRC=Nombre de copies;
                             ENC=No. of Copies;
                             FRS=Nombre de copies;
                             ENZ=No. of Copies];
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Use ForNAV Languages" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetSalesTaxDetails@1();
    VAR
      ForNAVGetSalesTaxDetails@1000 : Codeunit 70004;
    BEGIN
      SalesTaxBuffer.DELETEALL;
      ForNAVGetSalesTaxDetails.GetSalesTax(Header, SalesTaxBuffer);
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70151 ForNAV Tax Purchase Invoice
{
  OBJECT-PROPERTIES
  {
    Date=19-01-18;
    Time=18:47:23;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=[CSY=N†kupn° faktura;
               DAN=K˚bsfaktura;
               DEU=Einkaufsrechnung;
               ENU=Purchase Invoice;
               FIN=Ostolasku;
               FRA=Facture achat;
               ISL=Innkaupareikningur;
               ITA=Fattura acquisto;
               NLD=Inkoopfactuur;
               NOR=Kj˚psfaktura;
               SVE=Inkîpsfaktura;
               DES=Einkaufsrechnung;
               ENG=Purchase Invoice;
               ESM=Factura compra;
               FRB=Facture achat;
               ITS=Fattura acquisto;
               NLB=Inkoopfactuur;
               DEA=Einkaufsrechnung;
               ENA=Purchase Invoice;
               ESN=Factura compra;
               FRC=Facture achat;
               ENC=Purchase Invoice;
               FRS=Facture achat;
               ENZ=Purchase Invoice];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table122;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetSalesTaxDetails;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table123;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1   ;1   ;DataItem;SalesTaxBuffer      ;
               DataItemTable=Table70998;
               DataItemTableView=SORTING(Primary Key);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=[CSY=Pocet kopi°;
                             DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             DES=Anzahl Kopien;
                             ENG=No. of Copies;
                             ESM=Nß copias;
                             FRB=Nombre de copies;
                             ITS=Nr. di copie;
                             NLB=Aantal exemplaren;
                             DEA=Anzahl Kopien;
                             ENA=No. of Copies;
                             ESN=Nß copias;
                             FRC=Nombre de copies;
                             ENC=No. of Copies;
                             FRS=Nombre de copies;
                             ENZ=No. of Copies];
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Use ForNAV Languages" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetSalesTaxDetails@1();
    VAR
      ForNAVGetSalesTaxDetails@1000 : Codeunit 70004;
    BEGIN
      SalesTaxBuffer.DELETEALL;
      ForNAVGetSalesTaxDetails.GetSalesTax(Header, SalesTaxBuffer);
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70152 ForNAV Tax Purchase Cr. Memo
{
  OBJECT-PROPERTIES
  {
    Date=19-01-18;
    Time=18:47:23;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=[CSY=N†kupn° dobropis;
               DAN=K˚bskreditnota;
               DEU=Einkaufsgutschrift;
               ENU=Purchase Credit Memo;
               FIN=Ostohyvityslasku;
               FRA=Avoir achat;
               ISL=Innkaupakreditreikningur;
               ITA=Nota credito acquisto;
               NLD=Inkoopcreditnota;
               NOR=Kj˚pskreditnota;
               SVE=Inkîpskreditnota;
               DES=Einkaufsgutschrift;
               ENG=Purchase Credit Memo;
               ESM=Nota crÇdito compra;
               FRB=Avoir achat;
               ITS=Nota credito acquisto;
               NLB=Inkoopcreditnota;
               DEA=Einkaufsgutschrift;
               ENA=Purchase CR/Adj Note;
               ESN=Abono compra;
               FRC=Note de crÇdit d'achat;
               ENC=Purchase Credit Memo;
               FRS=Avoir achat;
               ENZ=Purchase Credit Memo];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table124;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetSalesTaxDetails;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table125;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1   ;1   ;DataItem;SalesTaxBuffer      ;
               DataItemTable=Table70998;
               DataItemTableView=SORTING(Primary Key);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=[CSY=Pocet kopi°;
                             DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             DES=Anzahl Kopien;
                             ENG=No. of Copies;
                             ESM=Nß copias;
                             FRB=Nombre de copies;
                             ITS=Nr. di copie;
                             NLB=Aantal exemplaren;
                             DEA=Anzahl Kopien;
                             ENA=No. of Copies;
                             ESN=Nß copias;
                             FRC=Nombre de copies;
                             ENC=No. of Copies;
                             FRS=Nombre de copies;
                             ENZ=No. of Copies];
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Use ForNAV Languages" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetSalesTaxDetails@1();
    VAR
      ForNAVGetSalesTaxDetails@1000 : Codeunit 70004;
    BEGIN
      SalesTaxBuffer.DELETEALL;
      ForNAVGetSalesTaxDetails.GetSalesTax(Header, SalesTaxBuffer);
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70154 ForNAV Tax Purchase Quote
{
  OBJECT-PROPERTIES
  {
    Date=19-01-18;
    Time=18:47:23;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=[CSY=N†kupn° popt†vka;
               DAN=K˚bsrekvisition;
               DEU=Einkaufsanfrage;
               ENU=Purchase Quote;
               FIN=Ostotarjous;
               FRA=Demande de prix;
               ISL=Innkaupabei˜ni;
               ITA=Offerta acquisto;
               NLD=Inkoopofferte;
               NOR=Foresp˚rsel;
               SVE=Inkîpsoffert;
               DES=Einkaufsofferte;
               ENG=Purchase Quote;
               ESM=Cotizaci¢n compra;
               FRB=Demande de prix;
               ITS=Offerta acquisto;
               NLB=Inkoopofferte;
               DEA=Einkaufsanfrage;
               ENA=Purchase Quote;
               ESN=Oferta compra;
               FRC=Devis d'achat;
               ENC=Purchase Quote;
               FRS=Demande de prix;
               ENZ=Purchase Quote];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table38;
               DataItemTableView=SORTING(No.)
                                 WHERE(Document Type=CONST(Quote));
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetSalesTaxDetails;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table39;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.),
                            Document Type=FIELD(Document Type) }

    { 1   ;1   ;DataItem;SalesTaxBuffer      ;
               DataItemTable=Table70998;
               DataItemTableView=SORTING(Primary Key);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=[CSY=Pocet kopi°;
                             DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             DES=Anzahl Kopien;
                             ENG=No. of Copies;
                             ESM=Nß copias;
                             FRB=Nombre de copies;
                             ITS=Nr. di copie;
                             NLB=Aantal exemplaren;
                             DEA=Anzahl Kopien;
                             ENA=No. of Copies;
                             ESN=Nß copias;
                             FRC=Nombre de copies;
                             ENC=No. of Copies;
                             FRS=Nombre de copies;
                             ENZ=No. of Copies];
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Use ForNAV Languages" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetSalesTaxDetails@1();
    VAR
      ForNAVGetSalesTaxDetails@1000 : Codeunit 70004;
    BEGIN
      SalesTaxBuffer.DELETEALL;
      ForNAVGetSalesTaxDetails.GetSalesTax(Header, SalesTaxBuffer);
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70201 ForNAV Customer Top 10 List
{
  OBJECT-PROPERTIES
  {
    Date=22-01-18;
    Time=19:43:03;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=[CSY=Nejlep °ch 10 z†kazn°ku;
               DAN=Debitor - top 10-liste;
               DEU=Top 10 Liste (Debitoren);
               ENU=Customer Top 10 List;
               FIN=Asiakkaat - 10 pÑÑasiakasta;
               FRA=Clients - Palmaräs;
               ISL=Vi˜skiptama˜ur - 10 efstu;
               ITA=Lista primi 10 clienti;
               NLD=Klanten - Top 10;
               NOR=Kunde - ti pÜ topp-liste;
               RUS=‡âäÜ°ï - ãÜ˜ÉÖò ÑÜ§òïàÖ;
               SVE=Kunder, 10 i topp;
               DES=Top 10 Liste (Debitoren);
               ENG=Customer Top 10 List;
               FRB=Clients - Palmaräs;
               ITS=Lista primi 10 clienti;
               NLB=Klanten - Top 10;
               DEA=Top 10 Liste (Debitoren);
               ENA=Customer Top 10 List;
               ESN=Los 10 mejores clientes;
               FRS=Clients - Palmaräs;
               ENZ=Customer Top 10 List];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   LoadWatermark;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;                    ;
               DataItemTable=Table18;
               DataItemTableView=SORTING(Net Change (LCY))
                                 ORDER(Descending);
               OnAfterGetRecord=BEGIN
                                  i += 1;
                                  IF i = NoOfRecordsToPrint THEN
                                    CurrReport.BREAK;
                                END;

               ReqFilterFields=No.,Name,Customer Posting Group,Country/Region Code,Date Filter;
               CalcFields=Balance (LCY),Net Change (LCY) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   IF NoOfRecordsToPrint = 0 THEN
                     NoOfRecordsToPrint := 10;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moßnosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1   ;2   ;Field     ;
                  CaptionML=[DAN=Antal;
                             DEU=Menge;
                             ENU=Quantity;
                             NLD=Aantal];
                  ToolTipML=ENU=Specifies the number of customers that will be included in the report.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfRecordsToPrint }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      NoOfRecordsToPrint@1000 : Integer;
      i@1001 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE LoadWatermark@1000000004();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("List Report Watermark");
        IF NOT "List Report Watermark".HASVALUE THEN
          EXIT;
        "List Report Watermark".CREATEOUTSTREAM(OutStream);
      END;
      ReportForNav.Watermark.Image.Load(OutStream);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70202 ForNAV Vendor Top 10 List
{
  OBJECT-PROPERTIES
  {
    Date=22-01-18;
    Time=19:43:29;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1424;
  }
  PROPERTIES
  {
    CaptionML=[CSY=Dodavatel - nejlep °ch 10;
               DAN=Kreditor - top 10-liste;
               DEU=HÑndler Top-10-Liste;
               ENU=Vendor Top 10 List;
               FIN=10 pÑÑtoimittajaa;
               FRA=Palmaräs fournisseurs;
               ISL=10 efstu l†nardrottnar;
               ITA=Lista primi 10 fornitori;
               NLD=Lijst top 10 leveranciers;
               NOR=Leverand˚r - topp 10-liste;
               RUS=Áå§ïÖÉóäàä - ãÜ˜ÉÖò ÑÜ§òïàÖ;
               SVE=10 i topp leverantîrer;
               DES=HÑndler Top-10-Liste;
               ENG=Vendor Top 10 List;
               FRB=Palmaräs fournisseurs;
               ITS=Lista primi 10 fornitori;
               NLB=Lijst top 10 leveranciers;
               DEA=HÑndler Top-10-Liste;
               ENA=Vendor Top 10 List;
               ESN=Listado 10 mejores proveedores;
               FRS=Palmaräs fournisseurs;
               ENZ=Vendor Top 10 List];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   LoadWatermark;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;                    ;
               DataItemTable=Table23;
               DataItemTableView=SORTING(Net Change (LCY))
                                 ORDER(Descending);
               OnAfterGetRecord=BEGIN
                                  i += 1;
                                  IF i = NoOfRecordsToPrint THEN
                                    CurrReport.BREAK;
                                END;

               ReqFilterFields=No.,Name,Vendor Posting Group,Country/Region Code,Date Filter;
               CalcFields=Balance (LCY),Net Change (LCY) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   IF NoOfRecordsToPrint = 0 THEN
                     NoOfRecordsToPrint := 10;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moßnosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1   ;2   ;Field     ;
                  CaptionML=[DAN=Antal;
                             DEU=Menge;
                             ENU=Quantity;
                             NLD=Aantal];
                  ToolTipML=ENU=Specifies the number of vendors that will be included in the report.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfRecordsToPrint }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      NoOfRecordsToPrint@1000 : Integer;
      i@1001 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE LoadWatermark@1000000004();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("List Report Watermark");
        IF NOT "List Report Watermark".HASVALUE THEN
          EXIT;
        "List Report Watermark".CREATEOUTSTREAM(OutStream);
      END;
      ReportForNav.Watermark.Image.Load(OutStream);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70206 ForNAV Trial Balance
{
  OBJECT-PROPERTIES
  {
    Date=19-01-18;
    Time=18:47:23;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=[CSY=Predvaha;
               DAN=Balance;
               DEU=Rohbilanz;
               ENU=Trial Balance;
               FIN=Alustava saldo;
               FRA=Balance;
               ISL=Pr¢fjîfnu˜ur;
               ITA=Bilancio di verifica;
               NLD=Proefbalans;
               NOR=RÜbalanse;
               RUS=Á˜å†°ñÇ †ÖâÖ°§;
               SVE=RÜbalans;
               DES=Bilanz;
               ENG=Trial Balance;
               FRB=Balance;
               ITS=Bilancio di verifica;
               NLB=Proefbalans;
               DEA=Rohbilanz;
               ENA=Trial Balance;
               ESN=Balance comprobaci¢n;
               FRS=Balance;
               ENZ=Trial Balance];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   LoadWatermark;
                 END;

    OnPreReport=BEGIN
                  CASE NumColumns OF
                    0:
                      ERROR(Text000);
                    1,2:
                      IF RoundTo = RoundTo::Pennies THEN
                        LineType := LineType::"9-Point"
                      ELSE
                        LineType := LineType::"9-Point Rounded";
                    3:
                      IF RoundTo = RoundTo::Pennies THEN
                        LineType := LineType::"8-Point"
                      ELSE
                        LineType := LineType::"9-Point Rounded";
                    4:
                      IF RoundTo = RoundTo::Pennies THEN
                        LineType := LineType::"8-Point"
                      ELSE
                        LineType := LineType::"8-Point Rounded";
                    5,6:
                      IF RoundTo = RoundTo::Pennies THEN
                        LineType := LineType::"7-Point"
                      ELSE
                        LineType := LineType::"7-Point Rounded";
                    7,8:
                      IF (RoundTo = RoundTo::Pennies) THEN
                        ERROR(Text001)
                      ELSE
                        LineType := LineType::"7-Point Rounded";
                    ELSE
                      ERROR(Text002);
                  END;
                  CASE LineType OF
                    LineType::"9-Point",LineType::"9-Point Rounded":
                      BEGIN
                        MaxDescWidth := 67;
                        PointSize := 9;
                      END;
                    LineType::"8-Point",LineType::"8-Point Rounded":
                      BEGIN
                        MaxDescWidth := 52;
                        PointSize := 8;
                      END;
                    LineType::"7-Point",LineType::"7-Point Rounded":
                      BEGIN
                        MaxDescWidth := 33;
                        PointSize := 7;
                      END;
                    ELSE
                      ERROR(Text003);
                  END;
                  FromDate := "G/L Account".GETRANGEMIN("Date Filter");
                  ToDate := "G/L Account".GETRANGEMAX("Date Filter");
                  PriorFromDate := CALCDATE('<-1Y>',FromDate + 1) - 1;
                  PriorToDate := CALCDATE('<-1Y>',ToDate + 1) - 1;
                  "G/L Account".SETRANGE("Date Filter");
                  CLEAR(PeriodText);
                  CLEAR(ColumnHead);
                  IF ColumnFlags[7] THEN BEGIN
                    PeriodText := 'As of ' + FORMAT(ToDate,0,4);
                    IF ColumnFlags[9] THEN BEGIN
                      IF Show = Show::Budget THEN
                        PeriodText := 'Actual vs Budget a' + DELSTR(PeriodText,1,1)
                      ELSE
                        PeriodText := PeriodText + ' and ' + FORMAT(DATE2DMY(PriorToDate,3));
                    END;
                  END ELSE
                    IF ColumnFlags[9] THEN BEGIN
                      IF Show = Show::Budget THEN
                        PeriodText := 'Budget as of ' + FORMAT(ToDate,0,4)
                      ELSE
                        PeriodText := 'As of ' + FORMAT(PriorToDate,0,4);
                    END ELSE
                      IF ColumnFlags[1] THEN BEGIN
                        PeriodText := 'Changes ';
                        IF ColumnFlags[3] AND (Show = Show::Budget) THEN
                          PeriodText := PeriodText + 'and Budgeted Changes ';
                        PeriodText := PeriodText + 'from '
                          + FORMAT(FromDate,0,4)
                          + ' to '
                          + FORMAT(ToDate,0,4);
                        IF ColumnFlags[3] AND (Show = Show::"Last Year") THEN
                          PeriodText := PeriodText + ' and from '
                            + FORMAT(PriorFromDate,0,4)
                            + ' to '
                            + FORMAT(PriorToDate,0,4);
                      END ELSE
                        IF ColumnFlags[3] THEN BEGIN
                          IF Show = Show::Budget THEN
                            PeriodText := 'Budgeted '
                          ELSE
                            PeriodText := '';
                          PeriodText := PeriodText + 'Changes from ';
                          IF Show = Show::Budget THEN
                            PeriodText := PeriodText + FORMAT(FromDate,0,4)
                              + ' to '
                              + FORMAT(ToDate,0,4)
                          ELSE
                            PeriodText := PeriodText + FORMAT(PriorFromDate,0,4)
                              + ' to '
                              + FORMAT(PriorToDate,0,4);
                        END;
                  IF UseAddRptCurr THEN BEGIN
                    GLSetup.GET;
                    Currency.GET(GLSetup."Additional Reporting Currency");
                    SubTitle := STRSUBSTNO(Text004,Currency.Description);
                  END;
                  { Column Headings }
                  IF Show = Show::Budget THEN
                    ColumnHead[3] := Text005
                  ELSE
                    ColumnHead[3] := Text006;
                  ColumnHead[9] := ColumnHead[3];
                  ColumnHead[5] := Text007;
                  ColumnHead[6] := Text008;
                  ColumnHead[11] := Text009;
                  ColumnHead[12] := Text010;
                  ColumnHead[1] := Text011;
                  ColumnHead[7] := Text012;
                  ColumnHead[3] := ColumnHead[3] + Text011;
                  ColumnHead[9] := ColumnHead[9] + Text012;
                  IF RoundTo = RoundTo::Thousands THEN
                    FOR i := 1 TO 12 DO
                      IF i MOD 2 = 1 THEN
                        ColumnHead[i] := ColumnHead[i] + Text013;
                  CompressColumns(ColumnHead);
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 6710;    ;DataItem;                    ;
               DataItemTable=Table15;
               DataItemTableView=SORTING(No.);
               PrintOnlyIfDetail=Yes;
               OnPreDataItem=BEGIN
                               IF ISEMPTY THEN
                                 ERROR(MissingGLAccountErr);
                             END;

               OnAfterGetRecord=BEGIN
                                  CLEAR(DescriptionLine2);
                                  CLEAR(DescriptionLine1);
                                  CLEAR(WorkAmount);
                                  IF ("Account Type" = "Account Type"::Posting) OR
                                     (Totaling <> '')
                                  THEN BEGIN
                                    SETRANGE("Date Filter",FromDate,ToDate);
                                    IF UseAddRptCurr THEN BEGIN
                                      CALCFIELDS("Additional-Currency Net Change","Add.-Currency Balance at Date");
                                      WorkAmount[1] := "Additional-Currency Net Change";
                                      WorkAmount[7] := "Add.-Currency Balance at Date";
                                    END ELSE BEGIN
                                      CALCFIELDS("Net Change","Balance at Date");
                                      WorkAmount[1] := "Net Change";
                                      WorkAmount[7] := "Balance at Date";
                                    END;
                                    IF Show = Show::Budget THEN BEGIN
                                      CALCFIELDS("Budgeted Amount","Budget at Date");
                                      WorkAmount[3] := "Budgeted Amount";
                                      WorkAmount[9] := "Budget at Date";
                                    END ELSE BEGIN
                                      SETRANGE("Date Filter",PriorFromDate,PriorToDate);
                                      IF UseAddRptCurr THEN BEGIN
                                        CALCFIELDS("Additional-Currency Net Change","Add.-Currency Balance at Date");
                                        WorkAmount[3] := "Additional-Currency Net Change";
                                        WorkAmount[9] := "Add.-Currency Balance at Date";
                                      END ELSE BEGIN
                                        CALCFIELDS("Net Change","Balance at Date");
                                        WorkAmount[3] := "Net Change";
                                        WorkAmount[9] := "Balance at Date";
                                      END;
                                    END;
                                    IF ColumnFlags[5] OR ColumnFlags[6] THEN
                                      WorkAmount[5] := WorkAmount[1] - WorkAmount[3];
                                    IF ColumnFlags[6] AND (WorkAmount[3] <> 0.0) THEN
                                      WorkAmount[6] := WorkAmount[5] / WorkAmount[3] * 100.0;
                                    IF ColumnFlags[11] OR ColumnFlags[12] THEN
                                      WorkAmount[11] := WorkAmount[7] - WorkAmount[9];
                                    IF ColumnFlags[12] AND (WorkAmount[9] <> 0.0) THEN
                                      WorkAmount[12] := WorkAmount[11] / WorkAmount[9] * 100.0;
                                  END;
                                  DescriptionLine2 := PADSTR('',Indentation) + Name;
                                  ForNAVTrialBalanceParagrHandl.SplitPrintLine(DescriptionLine2,DescriptionLine1,MaxDescWidth,PointSize);
                                  IF NumbersToPrint THEN BEGIN
                                    FOR i := 1 TO 12 DO BEGIN
                                      IF RoundTo = RoundTo::Dollars THEN
                                        WorkAmount[i] := ROUND(WorkAmount[i],1)
                                      ELSE
                                        IF RoundTo = RoundTo::Thousands THEN BEGIN
                                          IF i MOD 2 = 0 THEN
                                            WorkAmount[i] := ROUND(WorkAmount[i],1)
                                          ELSE
                                            WorkAmount[i] := ROUND(WorkAmount[i] / 1000,1);
                                        END ELSE
                                          WorkAmount[i] := ROUND(WorkAmount[i],0.01);
                                    END;
                                    { now format the strings }
                                    FOR i := 1 TO 12 DO BEGIN
                                      PrintAmount[i] := FORMAT(WorkAmount[i]);
                                      IF RoundTo = RoundTo::Pennies THEN BEGIN
                                        j := STRPOS(PrintAmount[i],'.');
                                        IF j = 0 THEN
                                          PrintAmount[i] := PrintAmount[i] + '.00'
                                        ELSE
                                          IF j = STRLEN(PrintAmount[i]) - 1 THEN
                                            PrintAmount[i] := PrintAmount[i] + '0';
                                      END;
                                      IF i MOD 2 = 0 THEN
                                        PrintAmount[i] := PrintAmount[i] + '%';
                                    END;
                                    CompressColumns(PrintAmount);
                                  END;
                                END;

               ReqFilterFields=No.,Account Type,Date Filter,Global Dimension 1 Filter,Global Dimension 2 Filter,Budget Filter }

    { 1008;1   ;Column  ;PeriodText          ;
               IncludeCaption=No;
               SourceExpr=PeriodText }

    { 1020003;1;Column  ;UseAddRptCurr       ;
               IncludeCaption=No;
               SourceExpr=UseAddRptCurr }

    { 1020004;1;Column  ;PageGroupNo         ;
               IncludeCaption=No;
               SourceExpr=PageGroupNo }

    { 1   ;1   ;Column  ;AddCurrSubTitle     ;
               IncludeCaption=No;
               SourceExpr=SubTitle }

    { 1000000000;1;Column;LineType           ;
               IncludeCaption=No;
               SourceExpr=LineType }

    { 12  ;1   ;Column  ;ColumnHead1         ;
               IncludeCaption=No;
               SourceExpr=ColumnHead[1] }

    { 13  ;1   ;Column  ;ColumnHead2         ;
               IncludeCaption=No;
               SourceExpr=ColumnHead[2] }

    { 43  ;1   ;Column  ;ColumnHead3         ;
               IncludeCaption=No;
               SourceExpr=ColumnHead[3] }

    { 88  ;1   ;Column  ;ColumnHead4         ;
               IncludeCaption=No;
               SourceExpr=ColumnHead[4] }

    { 196 ;1   ;Column  ;ColumnHead5         ;
               IncludeCaption=No;
               SourceExpr=ColumnHead[5] }

    { 197 ;1   ;Column  ;ColumnHead6         ;
               IncludeCaption=No;
               SourceExpr=ColumnHead[6] }

    { 204 ;1   ;Column  ;ColumnHead7         ;
               IncludeCaption=No;
               SourceExpr=ColumnHead[7] }

    { 205 ;1   ;Column  ;ColumnHead8         ;
               IncludeCaption=No;
               SourceExpr=ColumnHead[8] }

    { 8412;1   ;DataItem;BlankLineCounter    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               SETRANGE(Number,1,"G/L Account"."No. of Blank Lines");
                             END;
                              }

    { 5444;1   ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1));
               OnPostDataItem=BEGIN
                                IF "G/L Account"."New Page" THEN
                                  PageGroupNo := PageGroupNo + 1;
                              END;
                               }

    { 1000000001;2;Column;NumbersToPrint     ;
               IncludeCaption=No;
               SourceExpr=NumbersToPrint }

    { 14  ;2   ;Column  ;DescriptionLine1    ;
               IncludeCaption=No;
               SourceExpr=DescriptionLine1 }

    { 15  ;2   ;Column  ;DescriptionLine2    ;
               IncludeCaption=No;
               SourceExpr=DescriptionLine2 }

    { 8   ;2   ;Column  ;PrintAmt1           ;
               IncludeCaption=No;
               SourceExpr=PrintAmount[1] }

    { 9   ;2   ;Column  ;PrintAmt2           ;
               IncludeCaption=No;
               SourceExpr=PrintAmount[2] }

    { 28  ;2   ;Column  ;PrintAmt3           ;
               IncludeCaption=No;
               SourceExpr=PrintAmount[3] }

    { 55  ;2   ;Column  ;PrintAmt4           ;
               IncludeCaption=No;
               SourceExpr=PrintAmount[4] }

    { 105 ;2   ;Column  ;PrintAmt5           ;
               IncludeCaption=No;
               SourceExpr=PrintAmount[5] }

    { 106 ;2   ;Column  ;PrintAmt6           ;
               IncludeCaption=No;
               SourceExpr=PrintAmount[6] }

    { 114 ;2   ;Column  ;PrintAmt7           ;
               IncludeCaption=No;
               SourceExpr=PrintAmount[7] }

    { 115 ;2   ;Column  ;PrintAmt8           ;
               IncludeCaption=No;
               SourceExpr=PrintAmount[8] }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1020001;0;Container ;
                  ContainerType=ContentArea }

      { 1020000;1;Group     ;
                  CaptionML=ENU=Options }

      { 4   ;2   ;Field     ;
                  Name=ShowComaprison;
                  CaptionML=ENU=Show Comparison;
                  ToolTipML=ENU=Specifies if figures either from the prior year or for the defined budget are included.;
                  OptionCaptionML=ENU=Last Year,Budget;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Show }

      { 19  ;2   ;Group     ;
                  CaptionML=ENU=Select Report Columns }

      { 8   ;3   ;Field     ;
                  Name=ActualChange;
                  CaptionML=ENU=Actual Changes;
                  ToolTipML=ENU=Specifies that a column is added that shows the actual net change.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ColumnFlags[1];
                  OnValidate=BEGIN
                               TestNumColumns;
                             END;
                              }

      { 9   ;3   ;Field     ;
                  Name=ComparisonChanges;
                  CaptionML=ENU=Comparison Changes;
                  ToolTipML=ENU=Specifies if you want to include the net changes from the selected period.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ColumnFlags[3];
                  OnValidate=BEGIN
                               TestNumColumns;
                             END;
                              }

      { 10  ;3   ;Field     ;
                  CaptionML=ENU=Variance in Changes;
                  ToolTipML=ENU=Specifies if you want to include a column that shows the change variance. The variance is calculated by subtracting the budget or prior year amounts over the period defined from the actual amounts.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ColumnFlags[5];
                  OnValidate=BEGIN
                               TestNumColumns;
                             END;
                              }

      { 14  ;3   ;Field     ;
                  CaptionML=ENU=% Variance in Changes;
                  ToolTipML=ENU=Specifies that a column is inserted that shows the percentage of variance in balances. The variance is calculated by dividing the variance by the actual amounts.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ColumnFlags[6];
                  OnValidate=BEGIN
                               TestNumColumns;
                             END;
                              }

      { 16  ;3   ;Field     ;
                  Name=ActualBalances;
                  CaptionML=ENU=Actual Balances;
                  ToolTipML=ENU=Specifies that a column is added that shows the actual balance.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ColumnFlags[7];
                  OnValidate=BEGIN
                               TestNumColumns;
                             END;
                              }

      { 17  ;3   ;Field     ;
                  Name=ComparisonBalances;
                  CaptionML=ENU=Comparison Balances;
                  ToolTipML=ENU=Specifies if you want to include the balance from the selected period.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ColumnFlags[9];
                  OnValidate=BEGIN
                               TestNumColumns;
                             END;
                              }

      { 18  ;3   ;Field     ;
                  CaptionML=ENU=Variance in Balances;
                  ToolTipML=ENU=Specifies if you want to include a column that shows the balance variance. The variance is calculated by subtracting the budget or prior year amounts over the period defined from the actual amounts.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ColumnFlags[11];
                  OnValidate=BEGIN
                               TestNumColumns;
                             END;
                              }

      { 22  ;3   ;Field     ;
                  CaptionML=ENU=% Variance in Balances;
                  ToolTipML=ENU=Specifies that a column is inserted that shows the percentage of variance in balances. The variance is calculated by dividing the variance by the actual amounts.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ColumnFlags[12];
                  OnValidate=BEGIN
                               TestNumColumns;
                             END;
                              }

      { 24  ;2   ;Field     ;
                  CaptionML=ENU=Round to;
                  ToolTipML=ENU=Specifies if you want the results in the report to be rounded to the nearest penny (hundredth of a unit), dollar (unit), or thousand dollars (units). The results are in US dollars, unless you use an additional reporting currency.;
                  OptionCaptionML=ENU=Pennies,Dollars,Thousands;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=RoundTo;
                  OnValidate=BEGIN
                               IF RoundTo = RoundTo::Thousands THEN
                                 ThousandsRoundToOnValidate;
                               IF RoundTo = RoundTo::Dollars THEN
                                 DollarsRoundToOnValidate;
                               IF RoundTo = RoundTo::Pennies THEN
                                 PenniesRoundToOnValidate;
                             END;
                              }

      { 1   ;2   ;Field     ;
                  CaptionML=ENU=Skip Accounts with all zero Amounts;
                  ToolTipML=ENU=Specifies if you want the report to be generated with all of the accounts, including those with zero amounts. Otherwise, those accounts will be excluded.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=SkipZeros;
                  MultiLine=Yes }

      { 2   ;2   ;Field     ;
                  Name=UseAdditionalReportingCurrency;
                  CaptionML=ENU=Use Additional Reporting Currency;
                  ToolTipML=ENU=Specifies if you want all amounts to be printed by using the additional reporting currency. If you do not select the check box, then all amounts will be printed in US dollars.;
                  ApplicationArea=#Suite;
                  SourceExpr=UseAddRptCurr;
                  MultiLine=Yes }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      GLSetup@1001 : Record 98;
      Currency@1002 : Record 4;
      ForNAVTrialBalanceParagrHandl@1003 : Codeunit 70206;
      PeriodText@1004 : Text[120];
      SubTitle@1006 : Text[132];
      SkipZeros@1007 : Boolean;
      UseAddRptCurr@1008 : Boolean;
      Show@1009 : 'Last Year,Budget';
      RoundTo@1010 : 'Pennies,Dollars,Thousands';
      LineType@1011 : '9-Point,9-Point Rounded,8-Point,8-Point Rounded,7-Point,7-Point Rounded';
      ColumnFlags@1012 : ARRAY [12] OF Boolean;
      ColumnHead@1013 : ARRAY [12] OF Text[50];
      PrintAmount@1014 : ARRAY [12] OF Text[30];
      WorkAmount@1015 : ARRAY [12] OF Decimal;
      FromDate@1016 : Date;
      ToDate@1017 : Date;
      PriorFromDate@1018 : Date;
      PriorToDate@1019 : Date;
      DescriptionLine2@1020 : Text[80];
      DescriptionLine1@1021 : Text[80];
      MaxDescWidth@1023 : Integer;
      PointSize@1024 : Integer;
      j@1025 : Integer;
      i@1026 : Integer;
      Text000@1027 : TextConst 'ENU=You must select at least one Report Column.';
      Text001@1028 : TextConst 'ENU=If you want more than 6 Report Columns you must round to Dollars or Thousands.';
      Text002@1029 : TextConst 'ENU=You may select a maximum of 8 Report Columns.';
      Text003@1030 : TextConst 'ENU=Wrong columns layout. Contact you system administrator or contact support service for further assistance.';
      Text004@1031 : TextConst 'ENU=Amounts are in %1';
      Text005@1032 : TextConst 'ENU="Budgeted, "';
      Text006@1033 : TextConst 'ENU="Last Year, "';
      Text007@1034 : TextConst 'ENU=Change Variance';
      Text008@1035 : TextConst 'ENU=Change % Variance';
      Text009@1036 : TextConst 'ENU=Balance Variance';
      Text010@1037 : TextConst 'ENU=Balance % Variance';
      Text011@1038 : TextConst 'ENU=Net Change';
      Text012@1039 : TextConst 'ENU=Balance';
      Text013@1040 : TextConst 'ENU=" (Thousands)"';
      Text101@1480019 : TextConst 'ENU=Data';
      Text102@1480018 : TextConst 'ENU=Trial Balance';
      Text103@1480017 : TextConst 'ENU=Company Name';
      Text104@1480016 : TextConst 'ENU=Report No.';
      Text105@1480015 : TextConst 'ENU=Report Name';
      Text106@1480014 : TextConst 'ENU=User ID';
      Text107@1480013 : TextConst 'ENU=Date / Time';
      Text108@1480012 : TextConst 'ENU=G/L Account Filters';
      Text109@1480011 : TextConst 'ENU=Sub-Title';
      Text110@1480010 : TextConst 'ENU=Amounts are in';
      Text111@1480009 : TextConst 'ENU=our Functional Currency';
      PageGroupNo@1020001 : Integer;
      MissingGLAccountErr@1020000 : TextConst 'ENU=No G/L account exists within the specified filter.';
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE LoadWatermark@1000000004();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("List Report Watermark");
        IF NOT "List Report Watermark".HASVALUE THEN
          EXIT;
        "List Report Watermark".CREATEOUTSTREAM(OutStream);
      END;
      ReportForNav.Watermark.Image.Load(OutStream);
    END;

    PROCEDURE NumColumns@7() NumCol@1000 : Integer;
    VAR
      i@1001 : Integer;
    BEGIN
      NumCol := 0;
      FOR i := 1 TO ARRAYLEN(ColumnFlags) DO
        IF ColumnFlags[i] THEN
          NumCol := NumCol + 1;
      EXIT(NumCol);
    END;

    PROCEDURE TestNumColumns@14();
    BEGIN
      IF NumColumns > 8 THEN
        ERROR(Text002);
      IF (NumColumns > 6) AND (RoundTo = RoundTo::Pennies) THEN
        ERROR(Text001);
    END;

    PROCEDURE NumbersToPrint@12() : Boolean;
    VAR
      i@1000 : Integer;
    BEGIN
      IF ("G/L Account"."Account Type" <> "G/L Account"."Account Type"::Posting) AND
         ("G/L Account".Totaling = '')
      THEN
        EXIT(FALSE);
      IF ("G/L Account"."Account Type" = "G/L Account"."Account Type"::Posting) AND SkipZeros THEN BEGIN
        FOR i := 1 TO ARRAYLEN(ColumnFlags) DO
          IF (WorkAmount[i] <> 0.0) AND ColumnFlags[i] THEN
            EXIT(TRUE);
        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE CompressColumns@8(VAR StringArray@1000 : ARRAY [12] OF Text[30]);
    VAR
      i@1001 : Integer;
      j@1002 : Integer;
    BEGIN
      j := 0;
      FOR i := 1 TO ARRAYLEN(ColumnFlags) DO
        IF ColumnFlags[i] THEN BEGIN
          j := j + 1;
          StringArray[j] := StringArray[i];
        END;
      FOR i := j + 1 TO ARRAYLEN(ColumnFlags) DO
        StringArray[i] := '';
    END;

    LOCAL PROCEDURE PenniesRoundToOnValidate@19010648();
    BEGIN
      TestNumColumns;
    END;

    LOCAL PROCEDURE DollarsRoundToOnValidate@19009557();
    BEGIN
      TestNumColumns;
    END;

    LOCAL PROCEDURE ThousandsRoundToOnValidate@19005369();
    BEGIN
      TestNumColumns;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      This report is based on 10022 Trial Balance.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description></Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70210 ForNAV Cust. Payments Applied
{
  OBJECT-PROPERTIES
  {
    Date=19-01-18;
    Time=18:47:23;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=ENU=Customer Payments Applied;
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   LoadWatermark;
                 END;

    OnPreReport=BEGIN
                  SalespersonFilterString := CustLedgerEntry.GETFILTER("Salesperson Code");
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 8503;    ;DataItem;CustLedgerEntry     ;
               DataItemTable=Table21;
               DataItemTableView=SORTING(Customer No.,Document Type,Posting Date)
                                 WHERE(Document Type=FILTER(Payment|Credit Memo));
               OnPreDataItem=BEGIN
                               SETRANGE("Salesperson Code");
                             END;

               OnAfterGetRecord=BEGIN
                                  CALCFIELDS("Amount (LCY)");
                                  GetAppliedCustEntries(CustLedgerEntry,TRUE);
                                END;

               ReqFilterFields=Posting Date,Global Dimension 1 Code,Global Dimension 2 Code,Salesperson Code,Customer No.;
               CalcFields=Remaining Amt. (LCY),Amount (LCY) }

    { 1000000000;1;DataItem;TempAppliedCustLedgEntry;
               DataItemTable=Table21;
               DataItemTableView=SORTING(Entry No.);
               OnPreDataItem=BEGIN
                               SETFILTER("Salesperson Code", SalespersonFilterString);
                             END;

               OnAfterGetRecord=BEGIN
                                  CALCFIELDS("Remaining Amt. (LCY)", "Amount (LCY)");
                                END;

               CalcFields=Original Amt. (LCY),Amount (LCY);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moßnosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
    { 1000000002;PaymentLbl    ;CaptionML=ENU=Payment }
    { 1000000003;AppliedToLbl  ;CaptionML=ENU=Applied-to Document }
    { 1000000004;DiscountDateLbl;
                                CaptionML=ENU=Discount Date }
    { 1000000006;DiscountTakenLbl;
                                CaptionML=ENU=Discount Taken }
    { 1000000007;AmtAppliedLbl ;CaptionML=ENU=Amount Applied }
    { 1000000008;AmtNotAppliedLbl;
                                CaptionML=ENU=Amount Not Yet Applied }
    { 1000000009;CustomerNameLbl;
                                CaptionML=ENU=Customer Name }
  }
  CODE
  {
    VAR
      SalespersonFilterString@1480002 : Text;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE LoadWatermark@1000000004();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("List Report Watermark");
        IF NOT "List Report Watermark".HASVALUE THEN
          EXIT;
        "List Report Watermark".CREATEOUTSTREAM(OutStream);
      END;
      ReportForNav.Watermark.Image.Load(OutStream);
    END;

    PROCEDURE GetAppliedCustEntries@1020000(CustLedgEntry@1020001 : Record 21;UseLCY@1480000 : Boolean);
    VAR
      DtldCustLedgEntry@1020003 : Record 379;
      PmtDtldCustLedgEntry@1020004 : Record 379;
      PmtCustLedgEntry@1020015 : Record 21;
      ClosingCustLedgEntry@1020002 : Record 21;
      AmountToApply@1020005 : Decimal;
      AppliedDtldCustLedgEntry@1000000001 : Record 379;
    BEGIN
      TempAppliedCustLedgEntry.RESET;
      TempAppliedCustLedgEntry.DELETEALL;
      DtldCustLedgEntry.SETCURRENTKEY("Cust. Ledger Entry No.");
      DtldCustLedgEntry.SETRANGE("Cust. Ledger Entry No.",CustLedgEntry."Entry No.");
      DtldCustLedgEntry.SETRANGE(Unapplied,FALSE);
      IF DtldCustLedgEntry.FIND('-') THEN
        REPEAT
          IF DtldCustLedgEntry."Cust. Ledger Entry No." = DtldCustLedgEntry."Applied Cust. Ledger Entry No." THEN BEGIN
            AppliedDtldCustLedgEntry.INIT;
            AppliedDtldCustLedgEntry.SETCURRENTKEY("Applied Cust. Ledger Entry No.","Entry Type");
            AppliedDtldCustLedgEntry.SETRANGE("Applied Cust. Ledger Entry No.",DtldCustLedgEntry."Applied Cust. Ledger Entry No.");
            AppliedDtldCustLedgEntry.SETRANGE("Entry Type",AppliedDtldCustLedgEntry."Entry Type"::Application);
            AppliedDtldCustLedgEntry.SETRANGE(Unapplied,FALSE);
            IF AppliedDtldCustLedgEntry.FIND('-') THEN
              REPEAT
                IF AppliedDtldCustLedgEntry."Cust. Ledger Entry No." <> AppliedDtldCustLedgEntry."Applied Cust. Ledger Entry No."
                THEN BEGIN
                  IF ClosingCustLedgEntry.GET(AppliedDtldCustLedgEntry."Cust. Ledger Entry No.") THEN BEGIN
                    TempAppliedCustLedgEntry := ClosingCustLedgEntry;
                    IF UseLCY THEN
                      TempAppliedCustLedgEntry."Amount to Apply" := -AppliedDtldCustLedgEntry."Amount (LCY)"
                    ELSE
                      TempAppliedCustLedgEntry."Amount to Apply" := -AppliedDtldCustLedgEntry.Amount;
                    IF TempAppliedCustLedgEntry.INSERT THEN ;
                  END;
                END;
              UNTIL AppliedDtldCustLedgEntry.NEXT = 0;
          END ELSE BEGIN
            IF ClosingCustLedgEntry.GET(DtldCustLedgEntry."Applied Cust. Ledger Entry No.") THEN BEGIN
              TempAppliedCustLedgEntry := ClosingCustLedgEntry;
              IF UseLCY THEN
                TempAppliedCustLedgEntry."Amount to Apply" := DtldCustLedgEntry."Amount (LCY)"
              ELSE
                TempAppliedCustLedgEntry."Amount to Apply" := DtldCustLedgEntry.Amount;
              IF TempAppliedCustLedgEntry.INSERT THEN ;
            END;
          END;
        UNTIL DtldCustLedgEntry.NEXT = 0;
      IF CustLedgEntry."Closed by Entry No." <> 0 THEN BEGIN
        IF ClosingCustLedgEntry.GET(CustLedgEntry."Closed by Entry No.") THEN BEGIN
          TempAppliedCustLedgEntry := ClosingCustLedgEntry;
          IF UseLCY THEN
            TempAppliedCustLedgEntry."Amount to Apply" := -CustLedgEntry."Closed by Amount (LCY)"
          ELSE
            TempAppliedCustLedgEntry."Amount to Apply" := -CustLedgEntry."Closed by Amount";
          IF TempAppliedCustLedgEntry.INSERT THEN ;
        END;
      END;
      ClosingCustLedgEntry.RESET;
      ClosingCustLedgEntry.SETCURRENTKEY("Closed by Entry No.");
      ClosingCustLedgEntry.SETRANGE("Closed by Entry No.",CustLedgEntry."Entry No.");
      IF ClosingCustLedgEntry.FIND('-') THEN
        REPEAT
          TempAppliedCustLedgEntry := ClosingCustLedgEntry;
          IF UseLCY THEN
            TempAppliedCustLedgEntry."Amount to Apply" := ClosingCustLedgEntry."Closed by Amount (LCY)"
          ELSE
            TempAppliedCustLedgEntry."Amount to Apply" := ClosingCustLedgEntry."Closed by Amount";
          IF TempAppliedCustLedgEntry.INSERT THEN ;
        UNTIL ClosingCustLedgEntry.NEXT = 0;
      IF TempAppliedCustLedgEntry.ISEMPTY THEN BEGIN
        TempAppliedCustLedgEntry.INIT;
        TempAppliedCustLedgEntry."Entry No." := 0;
        TempAppliedCustLedgEntry."Salesperson Code" := CustLedgEntry."Salesperson Code";
        TempAppliedCustLedgEntry.INSERT;
      //  ApplicationExist := FALSE;
      END;
      // ELSE
      //  ApplicationExist := TRUE;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'CustLedgerEntry': WITH CustLedgerEntry DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Amount (LCY)");
                ReportForNav.AddTotal(DataItemId,1,"Remaining Amt. (LCY)");
              END;
           'Restore': BEGIN
                 "Amount (LCY)" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Remaining Amt. (LCY)" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70215 ForNAV Salesperson-Commission
{
  OBJECT-PROPERTIES
  {
    Date=22-01-18;
    Time=19:47:57;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=[CSY=Provize prodejce;
               DAN=Salgsprovision;
               DEU=VerkÑufer - Provision;
               ENU=Salesperson Commission;
               FIN=MyyjÑn provisio;
               FRA=Commission vendeurs;
               ISL=Sîlumenn - Sîlulaun;
               ITA=Commissioni agente;
               NLD=Verkoper - Provisie;
               NOR=Selgerprovisjon;
               RUS=‡åçä§§äå°°ñÜ çÜ°ÜÑëÜ˜Ö ãå ã˜åÑÖëÖç;
               SVE=SÑljarprovision;
               DES=VerkÑufer - Provision;
               ENG=Salesperson Commission;
               ESM=Vendedor: comisi¢n;
               FRB=Commission vendeurs;
               ITS=Commissioni agente;
               NLB=Verkoper - Provisie;
               DEA=VerkÑufer - Provision;
               ENA=Salesperson Commission;
               ESN=Vendedor: comisi¢n;
               FRC=Commission du reprÇsentant;
               ENC=Salesperson Commission;
               FRS=Commission vendeurs;
               ENZ=Salesperson Commission];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   LoadWatermark;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 3065;    ;DataItem;                    ;
               DataItemTable=Table13;
               DataItemTableView=SORTING(Code);
               PrintOnlyIfDetail=Yes;
               OnPreDataItem=BEGIN
                               ReportForNav.GetDataItem('Salesperson_Purchaser').NewPagePerRecord := PrintOnlyOnePerPage;
                             END;

               ReqFilterFields=Code }

    { 25  ;1   ;Column  ;SalesCommissionAmt  ;
               IncludeCaption=No;
               SourceExpr=SalesCommissionAmt;
               AutoFormatType=1 }

    { 26  ;1   ;Column  ;ProfitCommissionAmt ;
               IncludeCaption=No;
               SourceExpr=ProfitCommissionAmt;
               AutoFormatType=1 }

    { 1   ;1   ;Column  ;PrintOnlyOnePerPage ;
               IncludeCaption=No;
               SourceExpr=PrintOnlyOnePerPage }

    { 8503;1   ;DataItem;                    ;
               DataItemTable=Table21;
               DataItemTableView=SORTING(Salesperson Code,Posting Date)
                                 WHERE(Document Type=FILTER(Invoice|Credit Memo));
               OnAfterGetRecord=VAR
                                  CostCalcMgt@1000 : Codeunit 5836;
                                BEGIN
                                  SalesCommissionAmt := ROUND("Sales (LCY)" * "Salesperson/Purchaser"."Commission %" / 100);
                                  ProfitCommissionAmt := ROUND("Profit (LCY)" * "Salesperson/Purchaser"."Commission %" / 100);
                                END;

               ReqFilterFields=Posting Date;
               DataItemLink=Salesperson Code=FIELD(Code) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  CaptionML=[DAN=Skift side pr. sëlger;
                             DEU=Neue Seite pro VerkÑufer;
                             ENU=New Page per Person;
                             NLD=Nieuwe pagina per persoon];
                  ToolTipML=[DAN=Angiver, om oplysninger om hver enkelt person udskrives pÜ en ny side, hvis du har valgt to eller flere personer, der skal medtages i rapporten.;
                             DEU=Gibt an, ob die Informationen der einzelnen Personen jeweils auf einer neuen Seite gedruckt werden, wenn Sie fÅr den Bericht zwei oder mehr Personen ausgewÑhlt haben.;
                             ENU=Specifies if each person's information is printed on a new page if you have chosen two or more persons to be included in the report.;
                             NLD=Hiermee wordt opgegeven of de gegevens van de persoon op een nieuwe pagina moeten worden afgedrukt als u hebt opgegeven dat u twee of meer personen in het rapport wilt opnemen.];
                  ApplicationArea=#Suite;
                  SourceExpr=PrintOnlyOnePerPage }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ProfitCommissionAmt@1004 : Decimal;
      SalesCommissionAmt@1005 : Decimal;
      PrintOnlyOnePerPage@1006 : Boolean;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE LoadWatermark@1000000004();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("List Report Watermark");
        IF NOT "List Report Watermark".HASVALUE THEN
          EXIT;
        "List Report Watermark".CREATEOUTSTREAM(OutStream);
      END;
      ReportForNav.Watermark.Image.Load(OutStream);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Salesperson_Purchaser': WITH "Salesperson/Purchaser" DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Cust. Ledger Entry"."Sales (LCY)");
                ReportForNav.AddTotal(DataItemId,1,"Cust. Ledger Entry"."Profit (LCY)");
                ReportForNav.AddTotal(DataItemId,2,ProfitCommissionAmt);
                ReportForNav.AddTotal(DataItemId,3,SalesCommissionAmt);
              END;
           'Restore': BEGIN
                 "Cust. Ledger Entry"."Sales (LCY)" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Cust. Ledger Entry"."Profit (LCY)" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 ProfitCommissionAmt := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 SalesCommissionAmt := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;  'CustLedgerEntry': WITH "Cust. Ledger Entry" DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Sales (LCY)");
                ReportForNav.AddTotal(DataItemId,1,"Profit (LCY)");
                ReportForNav.AddTotal(DataItemId,2,"Sales (LCY)");
                ReportForNav.AddTotal(DataItemId,3,"Profit (LCY)");
                ReportForNav.AddTotal(DataItemId,4,ProfitCommissionAmt);
                ReportForNav.AddTotal(DataItemId,5,SalesCommissionAmt);
              END;
           'Restore': BEGIN
                 "Sales (LCY)" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Profit (LCY)" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "Sales (LCY)" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "Profit (LCY)" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 ProfitCommissionAmt := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 SalesCommissionAmt := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70220 ForNAV Aged Accounts Receivbl.
{
  OBJECT-PROPERTIES
  {
    Date=22-01-18;
    Time=14:58:25;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=[CSY=SplatnÇ pohled†vky;
               DAN=Aldersfordelte tilgodehavender;
               DEU=Debitor - SaldenrÅckblick;
               ENU=Aged Accounts Receivables;
               FIN=Myyntisaatavien tilanne;
               FRA=ComptabilitÇ client ÉgÇe;
               ISL=Aldursgreindar krîfur;
               ITA=Scadenziario clienti;
               NLD=Vervallen vorderingen;
               NOR=Aldersford. saldoliste - kunde;
               RUS=éÜ†äïå˜§àÖò áÖÑåâëÜ°°å§ïÅ ãå §˜åàÖç ÑÖÉ°å§ïä;
               SVE=Kundfordringar - Ülder;
               DES=Debitor - SaldenrÅckblick;
               ENG=Aged Accounts Receivable;
               ESM=AntigÅedad cobros;
               FRB=ComptabilitÇ client ÉgÇe;
               ITS=Scadenziario clienti;
               NLB=Vervallen vorderingen;
               DEA=Debitor - SaldenrÅckblick;
               ENA=Aged Accounts Receivable;
               ESN=AntigÅedad cobros;
               FRC=Comptes clients classÇs chronologiquement;
               ENC=Aged Accounts Receivable;
               FRS=ComptabilitÇ client ÉgÇe;
               ENZ=Aged Accounts Receivable];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   LoadWatermark;
                 END;

    OnPreReport=VAR
                  CaptionManagement@1000 : Codeunit 42;
                BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000001;;DataItem;Args              ;
               DataItemTable=Table70219;
               DataItemTableView=SORTING(Print Amounts in LCY);
               OnPreDataItem=BEGIN
                               Args.INSERT;
                               Args.CalcDates;
                             END;

               Temporary=Yes }

    { 6836;1   ;DataItem;Account             ;
               DataItemTable=Table18;
               OnAfterGetRecord=BEGIN
                                  AgingCalculation.GetAgingWithCurrency(Account, AgingBuffer, CurrencyTotalsBuffer, Args, TempCurrency);
                                  IF AgingBuffer.ISEMPTY THEN
                                    CurrReport.SKIP;
                                END;

               ReqFilterFields=No. }

    { 70220;2  ;DataItem;AgingBuffer         ;
               DataItemTable=Table70220;
               DataItemTableView=SORTING(Currency Code);
               Temporary=Yes }

    { 1000000000;1;DataItem;CurrencyTotalsBuffer;
               DataItemTable=Table70220;
               DataItemTableView=SORTING(Currency Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   InitRequestPage;
                 END;

    }
    CONTROLS
    {
      { 4   ;0   ;Container ;
                  ContainerType=ContentArea }

      { 2   ;1   ;Group     ;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=AgedAsOf;
                  CaptionML=[DAN=Slutdato;
                             DEU=Enddatum;
                             ENU=Ending Date;
                             NLD=Einddatum];
                  ToolTipML=ENU=Specifies the date that you want the aging calculated for.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Ending Date" }

      { 3   ;2   ;Field     ;
                  Name=Agingby;
                  CaptionML=[DAN=Aldersfordelt efter;
                             DEU=RÅckblick nach;
                             ENU=Aging By;
                             NLD=Vervallen per];
                  ToolTipML=ENU=Specifies if the aging will be calculated from the due date, the posting date, or the document date.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Aging By" }

      { 7   ;2   ;Field     ;
                  Name=PeriodLength;
                  CaptionML=[DAN=Periodelëngde;
                             DEU=PeriodenlÑnge;
                             ENU=Period Length;
                             NLD=Periodelengte];
                  ToolTipML=ENU=Specifies the length of each period, for example, enter "1M" for one month.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Period Length" }

      { 9   ;2   ;Field     ;
                  Name=AmountsinLCY;
                  CaptionML=[DAN=Alle bel¯b i DKK;
                             DEU=Alle Betr‰ge in EUR;
                             ENU=All Amounts in LCY.;
                             NLD=Alle bedragen in Euro.];
                  ToolTipML=ENU=Specifies if you want the report in customer's currencies. Report totals calculated in LCY.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Print Amounts in LCY" }

      { 11  ;2   ;Field     ;
                  Name=PrintDetails;
                  CaptionML=[DAN=Udskriv detaljer;
                             DEU=Print Details;
                             ENU=Print Details;
                             NLD=Details afdrukken];
                  ToolTipML=ENU=Specifies if you want the report to show the detailed entries that add up the total balance for each customer.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Print Details" }

      { 15  ;2   ;Field     ;
                  Name=HeadingType;
                  CaptionML=[DAN=Overskriftstype;
                             DEU=öberschriftsart;
                             ENU=Heading Type;
                             NLD=Type kop];
                  ToolTipML=ENU=Specifies if the column heading for the report periods will indicate a date interval or the number of days overdue.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Heading Type";
                  Visible=FALSE }

      { 13  ;2   ;Field     ;
                  Name=perCustomer;
                  CaptionML=[DAN=Skift side pr. debitor;
                             DEU=Neue Seite pro Debitor;
                             ENU=New Page Per Customer;
                             NLD=Nieuwe pagina per klant];
                  ToolTipML=ENU=Specifies if each customer's information is printed on a new page if you have chosen two or more customers to be included in the report.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."New Page Per Customer" }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
    { 747 ;AgedOverdueAmounts  ;CaptionML=ENU=Aged Overdue Amounts }
    { 742 ;AmnsInLCY           ;CaptionML=ENU=All Amounts in LCY. }
  }
  CODE
  {
    VAR
      TempCurrency@1000000001 : TEMPORARY Record 4;
      AgingCalculation@1000000007 : Codeunit 70219;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE OnPostSectionAccountsReceivblBuffer_ColumnsHeading@5010(VAR AccountsReceivblBuffer@1000000000 : Record 70220);
    BEGIN
      WITH AccountsReceivblBuffer DO BEGIN
      END;// Autogenerated by ForNav;
    END;

    LOCAL PROCEDURE LoadWatermark@1000000004();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("List Report Watermark");
        IF NOT "List Report Watermark".HASVALUE THEN
          EXIT;
        "List Report Watermark".CREATEOUTSTREAM(OutStream);
      END;
      ReportForNav.Watermark.Image.Load(OutStream);
    END;

    LOCAL PROCEDURE InitRequestPage@1000000001();
    VAR
      Blank@1000000000 : DateFormula;
    BEGIN
      WITH Args DO BEGIN
        IF "Ending Date" = 0D THEN
          "Ending Date" := WORKDATE;
        "Column Count" := 5;
        IF "Period Length" = Blank THEN
          EVALUATE("Period Length", '<1M>');
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'AgingBuffer': WITH AgingBuffer DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,Balance);
                ReportForNav.AddTotal(DataItemId,2,"Amount 1");
                ReportForNav.AddTotal(DataItemId,3,"Amount 2");
                ReportForNav.AddTotal(DataItemId,4,"Amount 3");
                ReportForNav.AddTotal(DataItemId,5,"Amount 4");
                ReportForNav.AddTotal(DataItemId,6,"Amount 5");
                ReportForNav.AddTotal(DataItemId,7,"Amount 1 (LCY)");
                ReportForNav.AddTotal(DataItemId,8,"Amount 2 (LCY)");
                ReportForNav.AddTotal(DataItemId,9,"Amount 3 (LCY)");
                ReportForNav.AddTotal(DataItemId,10,"Amount 4 (LCY)");
                ReportForNav.AddTotal(DataItemId,11,"Amount 5 (LCY)");
                ReportForNav.AddTotal(DataItemId,12,"Balance (LCY)");
                ReportForNav.AddTotal(DataItemId,13,"Amount 1 (LCY)");
                ReportForNav.AddTotal(DataItemId,14,"Amount 2 (LCY)");
                ReportForNav.AddTotal(DataItemId,15,"Amount 3 (LCY)");
                ReportForNav.AddTotal(DataItemId,16,"Amount (LCY)");
                ReportForNav.AddTotal(DataItemId,17,"Amount 5 (LCY)");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 Balance := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "Amount 1" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "Amount 2" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "Amount 3" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "Amount 4" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "Amount 5" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
                 "Amount 1 (LCY)" := ReportForNav.RestoreTotal(DataItemId,7,GroupTotalFieldNo);
                 "Amount 2 (LCY)" := ReportForNav.RestoreTotal(DataItemId,8,GroupTotalFieldNo);
                 "Amount 3 (LCY)" := ReportForNav.RestoreTotal(DataItemId,9,GroupTotalFieldNo);
                 "Amount 4 (LCY)" := ReportForNav.RestoreTotal(DataItemId,10,GroupTotalFieldNo);
                 "Amount 5 (LCY)" := ReportForNav.RestoreTotal(DataItemId,11,GroupTotalFieldNo);
                 "Balance (LCY)" := ReportForNav.RestoreTotal(DataItemId,12,GroupTotalFieldNo);
                 "Amount 1 (LCY)" := ReportForNav.RestoreTotal(DataItemId,13,GroupTotalFieldNo);
                 "Amount 2 (LCY)" := ReportForNav.RestoreTotal(DataItemId,14,GroupTotalFieldNo);
                 "Amount 3 (LCY)" := ReportForNav.RestoreTotal(DataItemId,15,GroupTotalFieldNo);
                 "Amount (LCY)" := ReportForNav.RestoreTotal(DataItemId,16,GroupTotalFieldNo);
                 "Amount 5 (LCY)" := ReportForNav.RestoreTotal(DataItemId,17,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description></Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70221 ForNAV Aged Accounts Payables
{
  OBJECT-PROPERTIES
  {
    Date=22-01-18;
    Time=14:58:01;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=[CSY=SplatnÇ pohled†vky;
               DAN=Aldersfordelte tilgodehavender;
               DEU=Debitor - SaldenrÅckblick;
               ENU=Aged Accounts Payables;
               FIN=Myyntisaatavien tilanne;
               FRA=ComptabilitÇ client ÉgÇe;
               ISL=Aldursgreindar krîfur;
               ITA=Scadenziario clienti;
               NLD=Vervallen vorderingen;
               NOR=Aldersford. saldoliste - kunde;
               RUS=éÜ†äïå˜§àÖò áÖÑåâëÜ°°å§ïÅ ãå §˜åàÖç ÑÖÉ°å§ïä;
               SVE=Kundfordringar - Ülder;
               DES=Debitor - SaldenrÅckblick;
               ENG=Aged Accounts Receivable;
               ESM=AntigÅedad cobros;
               FRB=ComptabilitÇ client ÉgÇe;
               ITS=Scadenziario clienti;
               NLB=Vervallen vorderingen;
               DEA=Debitor - SaldenrÅckblick;
               ENA=Aged Accounts Receivable;
               ESN=AntigÅedad cobros;
               FRC=Comptes clients classÇs chronologiquement;
               ENC=Aged Accounts Receivable;
               FRS=ComptabilitÇ client ÉgÇe;
               ENZ=Aged Accounts Receivable];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   LoadWatermark;
                 END;

    OnPreReport=VAR
                  CaptionManagement@1000 : Codeunit 42;
                BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000001;;DataItem;Args              ;
               DataItemTable=Table70219;
               DataItemTableView=SORTING(Print Amounts in LCY);
               OnPreDataItem=BEGIN
                               Args.INSERT;
                               Args.CalcDates;
                             END;

               Temporary=Yes }

    { 6836;1   ;DataItem;Account             ;
               DataItemTable=Table23;
               OnAfterGetRecord=BEGIN
                                  AgingCalculation.GetAgingWithCurrency(Account, AgingBuffer, CurrencyTotalsBuffer, Args, TempCurrency);
                                  IF AgingBuffer.ISEMPTY THEN
                                    CurrReport.SKIP;
                                END;

               ReqFilterFields=No. }

    { 70220;2  ;DataItem;AgingBuffer         ;
               DataItemTable=Table70220;
               DataItemTableView=SORTING(Currency Code);
               Temporary=Yes }

    { 1000000000;1;DataItem;CurrencyTotalsBuffer;
               DataItemTable=Table70220;
               DataItemTableView=SORTING(Currency Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   InitRequestPage;
                 END;

    }
    CONTROLS
    {
      { 1000000009;0;Container;
                  ContainerType=ContentArea }

      { 1000000008;1;Group  ;
                  CaptionML=ENU=Options }

      { 1000000007;2;Field  ;
                  Name=AgedAsOf;
                  CaptionML=[DAN=Slutdato;
                             DEU=Enddatum;
                             ENU=Ending Date;
                             NLD=Einddatum];
                  ToolTipML=ENU=Specifies the date that you want the aging calculated for.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Ending Date" }

      { 1000000006;2;Field  ;
                  Name=Agingby;
                  CaptionML=[DAN=Aldersfordelt efter;
                             DEU=RÅckblick nach;
                             ENU=Aging By;
                             NLD=Vervallen per];
                  ToolTipML=ENU=Specifies if the aging will be calculated from the due date, the posting date, or the document date.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Aging By" }

      { 1000000005;2;Field  ;
                  Name=PeriodLength;
                  CaptionML=[DAN=Periodelëngde;
                             DEU=PeriodenlÑnge;
                             ENU=Period Length;
                             NLD=Periodelengte];
                  ToolTipML=ENU=Specifies the length of each period, for example, enter "1M" for one month.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Period Length" }

      { 1000000004;2;Field  ;
                  Name=AmountsinLCY;
                  CaptionML=[DAN=Alle bel¯b i DKK;
                             DEU=Alle Betr‰ge in EUR;
                             ENU=All Amounts in LCY.;
                             NLD=Alle bedragen in Euro.];
                  ToolTipML=ENU=Specifies if you want the report in customer's currencies. Report totals calculated in LCY.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Print Amounts in LCY" }

      { 1000000003;2;Field  ;
                  Name=PrintDetails;
                  CaptionML=[DAN=Udskriv detaljer;
                             DEU=Print Details;
                             ENU=Print Details;
                             NLD=Details afdrukken];
                  ToolTipML=ENU=Specifies if you want the report to show the detailed entries that add up the total balance for each customer.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Print Details" }

      { 1000000002;2;Field  ;
                  Name=HeadingType;
                  CaptionML=[DAN=Overskriftstype;
                             DEU=öberschriftsart;
                             ENU=Heading Type;
                             NLD=Type kop];
                  ToolTipML=ENU=Specifies if the column heading for the report periods will indicate a date interval or the number of days overdue.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Heading Type";
                  Visible=FALSE }

      { 1000000001;2;Field  ;
                  Name=perCustomer;
                  CaptionML=[DAN=Skift side pr. debitor;
                             DEU=Neue Seite pro Debitor;
                             ENU=New Page Per Customer;
                             NLD=Nieuwe pagina per klant];
                  ToolTipML=ENU=Specifies if each customer's information is printed on a new page if you have chosen two or more customers to be included in the report.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."New Page Per Customer" }

      { 1000000000;2;Field  ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
    { 747 ;AgedOverdueAmounts  ;CaptionML=ENU=Aged Overdue Amounts }
    { 742 ;AmnsInLCY           ;CaptionML=ENU=All Amounts in LCY. }
  }
  CODE
  {
    VAR
      TempCurrency@1000000001 : TEMPORARY Record 4;
      AgingCalculation@1000000007 : Codeunit 70219;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE OnPostSectionAccountsReceivblBuffer_ColumnsHeading@5010(VAR AccountsReceivblBuffer@1000000000 : Record 70220);
    BEGIN
      WITH AccountsReceivblBuffer DO BEGIN
      END;// Autogenerated by ForNav;
    END;

    LOCAL PROCEDURE LoadWatermark@1000000004();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("List Report Watermark");
        IF NOT "List Report Watermark".HASVALUE THEN
          EXIT;
        "List Report Watermark".CREATEOUTSTREAM(OutStream);
      END;
      ReportForNav.Watermark.Image.Load(OutStream);
    END;

    LOCAL PROCEDURE InitRequestPage@1000000001();
    VAR
      Blank@1000000000 : DateFormula;
    BEGIN
      WITH Args DO BEGIN
        IF "Ending Date" = 0D THEN
          "Ending Date" := WORKDATE;
        "Column Count" := 5;
        IF "Period Length" = Blank THEN
          EVALUATE("Period Length", '<1M>');
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'AgingBuffer': WITH AgingBuffer DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,Balance);
                ReportForNav.AddTotal(DataItemId,2,"Amount 1");
                ReportForNav.AddTotal(DataItemId,3,"Amount 2");
                ReportForNav.AddTotal(DataItemId,4,"Amount 3");
                ReportForNav.AddTotal(DataItemId,5,"Amount 4");
                ReportForNav.AddTotal(DataItemId,6,"Amount 5");
                ReportForNav.AddTotal(DataItemId,7,"Amount 1 (LCY)");
                ReportForNav.AddTotal(DataItemId,8,"Amount 2 (LCY)");
                ReportForNav.AddTotal(DataItemId,9,"Amount 3 (LCY)");
                ReportForNav.AddTotal(DataItemId,10,"Amount 4 (LCY)");
                ReportForNav.AddTotal(DataItemId,11,"Amount 5 (LCY)");
                ReportForNav.AddTotal(DataItemId,12,"Balance (LCY)");
                ReportForNav.AddTotal(DataItemId,13,"Amount 1 (LCY)");
                ReportForNav.AddTotal(DataItemId,14,"Amount 2 (LCY)");
                ReportForNav.AddTotal(DataItemId,15,"Amount 3 (LCY)");
                ReportForNav.AddTotal(DataItemId,16,"Amount (LCY)");
                ReportForNav.AddTotal(DataItemId,17,"Amount 5 (LCY)");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 Balance := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "Amount 1" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "Amount 2" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "Amount 3" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "Amount 4" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "Amount 5" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
                 "Amount 1 (LCY)" := ReportForNav.RestoreTotal(DataItemId,7,GroupTotalFieldNo);
                 "Amount 2 (LCY)" := ReportForNav.RestoreTotal(DataItemId,8,GroupTotalFieldNo);
                 "Amount 3 (LCY)" := ReportForNav.RestoreTotal(DataItemId,9,GroupTotalFieldNo);
                 "Amount 4 (LCY)" := ReportForNav.RestoreTotal(DataItemId,10,GroupTotalFieldNo);
                 "Amount 5 (LCY)" := ReportForNav.RestoreTotal(DataItemId,11,GroupTotalFieldNo);
                 "Balance (LCY)" := ReportForNav.RestoreTotal(DataItemId,12,GroupTotalFieldNo);
                 "Amount 1 (LCY)" := ReportForNav.RestoreTotal(DataItemId,13,GroupTotalFieldNo);
                 "Amount 2 (LCY)" := ReportForNav.RestoreTotal(DataItemId,14,GroupTotalFieldNo);
                 "Amount 3 (LCY)" := ReportForNav.RestoreTotal(DataItemId,15,GroupTotalFieldNo);
                 "Amount (LCY)" := ReportForNav.RestoreTotal(DataItemId,16,GroupTotalFieldNo);
                 "Amount 5 (LCY)" := ReportForNav.RestoreTotal(DataItemId,17,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description></Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70248 ForNAV Cust./Item Statistics
{
  OBJECT-PROPERTIES
  {
    Date=19-01-18;
    Time=18:47:24;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=[CSY=Statistika z†kazn°k/zboŒ°;
               DAN=Kunde/Varestatistik;
               DEU=Debitor/Artikelstatistik;
               ENU=Customer/Item Statistics;
               FIN=Asiakas/Nimikkeen tilastot;
               FRA=Statistiques client/article;
               ISL=Vi˜skiptama˜ur/Birg˜auppl¸singar;
               ITA=Statistiche cliente/articolo;
               NLD=Klant/Artikelstatistiek;
               NOR=Kunde/Varestatistikk;
               SVE=Kunde/Artikelstatistik;
               ESN=Estad°sticas cliente/producto];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   LoadWatermark;
                 END;

    OnPreReport=BEGIN
                  CompanyInformation.GET;
                  FilterString := Customer.GETFILTERS;
                  FilterString2 := "Value Entry".GETFILTERS;
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 6836;    ;DataItem;                    ;
               DataItemTable=Table18;
               PrintOnlyIfDetail=Yes;
               OnPreDataItem=BEGIN
                               ReportForNav.GetDataItem('Customer').NewPagePerRecord := OnlyOnePerPage;
                             END;

               ReqFilterFields=No.,Search Name,Customer Posting Group }

    { 1   ;1   ;Column  ;Profit              ;
               IncludeCaption=No;
               SourceExpr=Profit }

    { 1000000000;1;Column;OnlyOnePerPage     ;
               IncludeCaption=No;
               SourceExpr=OnlyOnePerPage }

    { 1000000001;1;Column;ShowCustContactInfo;
               IncludeCaption=No;
               SourceExpr=ShowCustContactInfo }

    { 8894;1   ;DataItem;                    ;
               DataItemTable=Table5802;
               DataItemTableView=SORTING(Source Type,Source No.,Item Ledger Entry Type,Item No.,Posting Date)
                                 WHERE(Source Type=CONST(Customer),
                                       Item Ledger Entry Type=CONST(Sale),
                                       Expected Cost=CONST(No));
               OnPreDataItem=BEGIN
                               CLEAR(ValueEntryTotalForItem);
                               ProfitTotalForItem := 0;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF ValueEntryTotalForItem."Item No." <> "Item No." THEN BEGIN
                                    CalculateProfit;
                                    CLEAR(ValueEntryTotalForItem);
                                    ProfitTotalForItem := 0;
                                    IF NOT Item.GET("Item No.") THEN BEGIN
                                      Item.Description := Text000;
                                      Item."Base Unit of Measure" := '';
                                    END;
                                  END;
                                  Profit := "Sales Amount (Actual)" + "Cost Amount (Actual)";
                                  "Discount Amount" := -"Discount Amount";
                                  ValueEntryTotalForItem."Item No." := "Item No.";
                                  ValueEntryTotalForItem."Invoiced Quantity" += "Invoiced Quantity";
                                  ValueEntryTotalForItem."Sales Amount (Actual)" += "Sales Amount (Actual)";
                                  ValueEntryTotalForItem."Discount Amount" += "Discount Amount";
                                  ProfitTotalForItem += Profit;
                                END;

               ReqFilterFields=Item No.,Inventory Posting Group,Posting Date;
               DataItemLink=Source No.=FIELD(No.),
                            Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Code=FIELD(Global Dimension 2 Filter) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 1000000000;2;Field  ;
                  Name=DisplayCustContacts;
                  CaptionML=ENU=Show Customer Contact Information;
                  ToolTipML=ENU=Specifies, if you want to have contact infomation near the customer name.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ShowCustContactInfo }

      { 2   ;2   ;Field     ;
                  CaptionML=ENU=New Page per Account;
                  ToolTipML=ENU=Specifies if you want to print each account on a separate page. Each account will begin at the top of the following page. Otherwise, each account will follow the previous account on the current page.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=OnlyOnePerPage }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Item@1000000003 : Record 27;
      CompanyInformation@1000000002 : Record 79;
      ValueEntryTotalForItem@1000000001 : Record 5802;
      FilterString@1000 : Text;
      FilterString2@1001 : Text;
      Profit@1003 : Decimal;
      "Profit%"@1004 : Decimal;
      ProfitTotalForItem@1000000004 : Decimal;
      OnlyOnePerPage@1005 : Boolean;
      PrintToExcel@1000000000 : Boolean;
      Text000@1480002 : TextConst 'ENU=Invalid Item';
      Text001@1480013 : TextConst 'ENU=Data';
      Text002@1480012 : TextConst 'ENU=Customer/Item Statistics';
      Text003@1480011 : TextConst 'ENU=Company Name';
      Text004@1480010 : TextConst 'ENU=Report No.';
      Text005@1480009 : TextConst 'ENU=Report Name';
      Text006@1480008 : TextConst 'ENU=User ID';
      Text007@1480007 : TextConst 'ENU=Date / Time';
      Text008@1480006 : TextConst 'ENU=Customer Filters';
      Text009@1480005 : TextConst 'ENU=Value Entry Filters';
      Text010@1480004 : TextConst 'ENU=Contribution Margin';
      Text011@1480003 : TextConst 'ENU=Contribution Ratio';
      ShowCustContactInfo@1000000005 : Boolean;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    PROCEDURE CalculateProfit@1();
    BEGIN
      IF ValueEntryTotalForItem."Sales Amount (Actual)" <> 0 THEN
        "Profit%" := ROUND(100 * ProfitTotalForItem / ValueEntryTotalForItem."Sales Amount (Actual)",0.1)
      ELSE
        "Profit%" := 0;
    END;

    LOCAL PROCEDURE LoadWatermark@1000000000();
    VAR
      ForNAVSetup@1000000001 : Record 70000;
      OutStream@1000000000 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("List Report Watermark");
        IF NOT "List Report Watermark".HASVALUE THEN
          EXIT;
        "List Report Watermark".CREATEOUTSTREAM(OutStream);
      END;
      ReportForNav.Watermark.Image.Load(OutStream);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Customer': WITH Customer DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Value Entry"."Sales Amount (Actual)");
                ReportForNav.AddTotal(DataItemId,1,Profit);
                ReportForNav.AddTotal(DataItemId,2,"Value Entry"."Discount Amount");
              END;
           'Restore': BEGIN
                 "Value Entry"."Sales Amount (Actual)" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 Profit := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "Value Entry"."Discount Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
              END;
        END;  'ValueEntry': WITH "Value Entry" DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Invoiced Quantity");
                ReportForNav.AddTotal(DataItemId,1,"Sales Amount (Actual)");
                ReportForNav.AddTotal(DataItemId,2,"Discount Amount");
                ReportForNav.AddTotal(DataItemId,3,"Invoiced Quantity");
                ReportForNav.AddTotal(DataItemId,4,"Sales Amount (Actual)");
                ReportForNav.AddTotal(DataItemId,5,Profit);
                ReportForNav.AddTotal(DataItemId,6,"Discount Amount");
              END;
           'Restore': BEGIN
                 "Invoiced Quantity" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Sales Amount (Actual)" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "Discount Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "Invoiced Quantity" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "Sales Amount (Actual)" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 Profit := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "Discount Amount" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70250 ForNAV Statement
{
  OBJECT-PROPERTIES
  {
    Date=22-01-18;
    Time=17:25:36;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=ENU=Statement;
    OnInitReport=BEGIN
                   GLSetup.GET;
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                  COMMIT;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000001;;DataItem;Args              ;
               DataItemTable=Table70250;
               DataItemTableView=SORTING(Start Date) }

    { 2   ;    ;DataItem;                    ;
               DataItemTable=Table18;
               PrintOnlyIfDetail=Yes;
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  ProcessCustomer;
                                  UpdateAging;
                                END;

               ReqFilterFields=No.;
               CalcFields=Balance }

    { 6523;1   ;DataItem;CurrencyLoop        ;
               DataItemTable=Table4;
               DataItemTableView=SORTING(Code);
               PrintOnlyIfDetail=Yes;
               OnAfterGetRecord=BEGIN
                                  Customer.SETRANGE("Date Filter",0D, Args."Start Date" - 1);
                                  Customer.SETRANGE("Currency Filter",CurrencyLoop.Code);
                                  Customer.CALCFIELDS("Net Change");
                                END;

               OnPostDataItem=BEGIN
                                Customer.SETRANGE("Currency Filter");
                              END;

               Temporary=Yes }

    { 3   ;2   ;DataItem;                    ;
               DataItemTable=Table21;
               DataItemTableView=SORTING(Customer No.,Posting Date,Currency Code);
               OnPreDataItem=BEGIN
                               SETRANGE("Customer No.", Customer."No.");
                               SETRANGE("Posting Date", Args."Start Date", Args."Ending Date");
                               SETRANGE("Currency Code",CurrencyLoop.Code);
                               SETRANGE("Date Filter", Args."Start Date", Args."Ending Date");
                             END;

               CalcFields=Remaining Amount,Original Amount }

    { 9065;2   ;DataItem;OverdueEntry        ;
               DataItemTable=Table21;
               DataItemTableView=SORTING(Customer No.,Open,Positive,Due Date);
               OnPreDataItem=BEGIN
                               SETRANGE("Customer No.", Customer."No.");
                               IF NOT Args."Include Aging Band" THEN
                                 SETRANGE("Due Date", 0D, Args."Ending Date"- 1);
                               SETRANGE("Currency Code", CurrencyLoop.Code);
                               IF (NOT Args."Print Entries Due") AND (NOT Args."Include Aging Band") THEN
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Args."Include Aging Band" THEN BEGIN
                                    IF ("Posting Date" > Args."Ending Date") AND ("Due Date" >= Args."Ending Date") THEN
                                      CurrReport.SKIP;
                                    IF Args."Date Choice" = Args."Date Choice"::"Due Date" THEN
                                      IF "Due Date" >= Args."Ending Date" THEN
                                        CurrReport.SKIP;
                                  END;

                                  CALCFIELDS("Remaining Amount");
                                  IF "Remaining Amount" = 0 THEN
                                    CurrReport.SKIP;

                                  IF "Due Date" >= Args."Ending Date" THEN
                                    CurrReport.SKIP;
                                END;

               CalcFields=Original Amount,Remaining Amount;
               DataItemLinkReference=Customer;
               DataItemLink=Customer No.=FIELD(No.) }

    { 1000000000;1;DataItem;AgingBuffer      ;
               DataItemTable=Table70220;
               DataItemTableView=SORTING(Entry No.);
               DataItemLink=Account No.=FIELD(No.);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   InitRequestPageDataInternal
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moßnosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             PLK=Opcje;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1000000001;2;Field  ;
                  Name=DocumentDate;
                  CaptionML=[DAN=Bilagsdato;
                             DEU=Belegdatum;
                             ENU=Document Date;
                             NLD=Documentdatum];
                  SourceExpr=Args."Document Date" }

      { 1000000000;2;Field  ;
                  Name=StartDate;
                  CaptionML=[DAN=Startdato;
                             DEU=Startdatum;
                             ENU=Start Date;
                             NLD=Begindatum];
                  SourceExpr=Args."Start Date" }

      { 17  ;2   ;Field     ;
                  Name=EndDate;
                  CaptionML=[DAN=Slutdato;
                             DEU=Enddatum;
                             ENU=Ending Date;
                             NLD=Einddatum];
                  ToolTipML=ENU=Specifies the date to which the report or batch job processes information.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Ending Date" }

      { 16  ;2   ;Field     ;
                  Name=ShowOverdueEntries;
                  CaptionML=[DAN=Vis forfaldne poster;
                             DEU=FÑllige Posten drucken;
                             ENU=Show Overdue Entries;
                             NLD=Vervallen posten weergeven];
                  ToolTipML=ENU=Specifies if you want overdue entries to be shown separately for each currency.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Print Entries Due" }

      { 15  ;2   ;Group     ;
                  Name=Include;
                  CaptionML=ENU=Include;
                  GroupType=Group }

      { 14  ;3   ;Field     ;
                  Name=IncludeAllCustomerswithLE;
                  CaptionML=[DAN=Medtag alle debitorer, der har poster;
                             DEU=Alle Debitoren mit Buchungen einbeziehen;
                             ENU=Include All Customers with Ledger Entries;
                             NLD=Alle klanten met posten];
                  ToolTipML=ENU=Specifies if you want entries displayed for customers that have ledger entries at the end of the selected period.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Print All Having Balance";
                  MultiLine=Yes;
                  OnValidate=BEGIN
                               IF NOT Args."Print All Having Entries" THEN
                                 Args."Print All Having Balance" := TRUE;
                             END;
                              }

      { 13  ;3   ;Field     ;
                  Name=IncludeAllCustomerswithBalance;
                  CaptionML=[DAN=Medtag ogsÜ debitorer, der kun har saldo;
                             DEU=Alle Debitoren mit Saldo einbeziehen;
                             ENU=Include All Customers with a Balance;
                             NLD=Alle klanten met saldo];
                  ToolTipML=ENU=Specifies if you want entries displayed for customers that have a balance at the end of the selected period.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Print All Having Entries";
                  MultiLine=Yes;
                  OnValidate=BEGIN
                               IF NOT Args."Print All Having Balance" THEN
                                 Args."Print All Having Entries" := TRUE;
                             END;
                              }

      { 10  ;2   ;Group     ;
                  CaptionML=ENU=Aging Band;
                  GroupType=Group }

      { 9   ;3   ;Field     ;
                  Name=IncludeAgingBand;
                  CaptionML=[DAN=Medtag aldersford.intv.;
                             DEU=Mit SaldenrÅckblick;
                             ENU=Include Aging Band;
                             NLD=Vervaldatuminterval opnemen];
                  ToolTipML=ENU=Specifies if you want an aging band to be included in the document. If you place a check mark here, you must also fill in the Aging Band Period Length and Aging Band by fields.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Include Aging Band" }

      { 8   ;3   ;Field     ;
                  Name=AgingBandPeriodLengt;
                  CaptionML=[DAN=Periodelëngde;
                             DEU=PeriodenlÑnge;
                             ENU=Period Length;
                             NLD=Periodelengte];
                  ToolTipML=ENU=Specifies the length of each of the four periods in the aging band, for example, enter "1M" for one month. The most recent period will end on the last day of the period in the Date Filter field.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Period Length" }

      { 7   ;3   ;Field     ;
                  Name=AgingBandby;
                  CaptionML=[DAN=Aldersford.intv. efter;
                             DEU=SaldenrÅckblick nach;
                             ENU=Aging Band by;
                             NLD=Vervaldatuminterval per];
                  ToolTipML=ENU=Specifies if the aging band will be calculated from the due date or from the posting date.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Date Choice" }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      GLSetup@1002 : Record 98;
      Language@1013 : Record 8;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Use ForNAV Languages" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE ProcessCustomer@1();
    VAR
      Currency@1000 : Record 4;
    BEGIN
      CurrencyLoop.RESET;
      CurrencyLoop.DELETEALL;
      WITH Customer DO BEGIN
        CurrReport.LANGUAGE := Language.GetLanguageID("Language Code");
        IF NOT CurrReport.PREVIEW THEN BEGIN
          LOCKTABLE;
          FIND;
          "Last Statement No." := "Last Statement No." + 1;
          MODIFY;
          COMMIT;
        END ELSE
          "Last Statement No." := "Last Statement No." + 1;
        SETRANGE("Date Filter",0D, Args."Ending Date");
        CALCFIELDS("Net Change");
        IF ("Net Change" <> 0) OR Args."Print All Having Balance" THEN BEGIN
          CurrencyLoop.Code := '';
          CurrencyLoop.INSERT;
          COPYFILTER("Currency Filter", Currency.Code);
          IF Currency.FINDSET THEN
            REPEAT
              CurrencyLoop := Currency;
              CurrencyLoop.INSERT;
            UNTIL Currency.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE GetDate@3(PostingDate@1000 : Date;DueDate@1001 : Date) : Date;
    BEGIN
      IF Args."Date Choice" = Args."Date Choice"::"Posting Date" THEN
        EXIT(PostingDate);
      EXIT(DueDate);
    END;

    LOCAL PROCEDURE InitRequestPageDataInternal@1091();
    BEGIN
      WITH Args DO BEGIN
        IF (NOT "Print All Having Entries") AND (NOT "Print All Having Balance") THEN
          "Print All Having Balance" := TRUE;
        IF FORMAT("Period Length") = '' THEN
          EVALUATE("Period Length",'<1M+CM>');
        IF "Document Date" = 0D THEN
          "Document Date" := TODAY;
      END;
    END;

    LOCAL PROCEDURE UpdateAging@1000000001();
    VAR
      AgingArgs@1000000001 : Record 70219;
      CustomerAging@1000000000 : Codeunit 70220;
    BEGIN
      IF NOT Args."Include Aging Band" THEN
        EXIT;
      CASE Args."Date Choice" OF
        Args."Date Choice"::"Due Date":
          AgingArgs."Aging By" := AgingArgs."Aging By"::"Due Date";
        Args."Date Choice"::"Posting Date":
          AgingArgs."Aging By" := AgingArgs."Aging By"::"Posting Date";
      END;
      AgingArgs."Ending Date" := Args."Ending Date";
      AgingArgs."Period Length" := Args."Period Length";
      AgingArgs."Column Count" := 5;
      AgingArgs.CalcDates;
      CustomerAging.GetAging(Customer, AgingBuffer, AgingArgs);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000004();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
      "Document Watermark".CREATEOUTSTREAM(OutStream);
      END;
      ReportForNav.Watermark.Image.Load(OutStream);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'OverdueEntry': WITH OverdueEntry DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Remaining Amount");
                ReportForNav.AddTotal(DataItemId,1,"Remaining Amount");
              END;
           'Restore': BEGIN
                 "Remaining Amount" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Remaining Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'AgingBuffer': WITH AgingBuffer DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Amount 1");
                ReportForNav.AddTotal(DataItemId,1,"Amount 2");
                ReportForNav.AddTotal(DataItemId,2,"Amount 3");
                ReportForNav.AddTotal(DataItemId,3,"Amount 4");
                ReportForNav.AddTotal(DataItemId,4,"Amount 5");
              END;
           'Restore': BEGIN
                 "Amount 1" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount 2" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "Amount 3" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "Amount 4" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "Amount 5" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70518 ForNAV Tax Purchase Templ.
{
  OBJECT-PROPERTIES
  {
    Date=22-01-18;
    Time=08:45:54;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=ENU=ForNAV Tax Purchase Template;
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   ReportForNavOpenDesigner := TRUE;
                 END;

    OnPreReport=VAR
                  ForNAVSetup@1000000000 : Record 70000;
                BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table122;
               DataItemTableView=SORTING(No.);
               MaxIteration=1;
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetSalesTaxDetails;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table123;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1   ;1   ;DataItem;SalesTaxBuffer      ;
               DataItemTable=Table70998;
               DataItemTableView=SORTING(Primary Key);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=[CSY=Pocet kopi°;
                             DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             DES=Anzahl Kopien;
                             ENG=No. of Copies;
                             ESM=Nß copias;
                             FRB=Nombre de copies;
                             ITS=Nr. di copie;
                             NLB=Aantal exemplaren;
                             DEA=Anzahl Kopien;
                             ENA=No. of Copies;
                             ESN=Nß copias;
                             FRC=Nombre de copies;
                             ENC=No. of Copies;
                             FRS=Nombre de copies;
                             ENZ=No. of Copies];
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetSalesTaxDetails@1();
    VAR
      ForNAVGetSalesTaxDetails@1000 : Codeunit 70004;
    BEGIN
      SalesTaxBuffer.DELETEALL;
      ForNAVGetSalesTaxDetails.GetSalesTax(Header, SalesTaxBuffer);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70519 ForNAV Sales Templ. Sales Tax
{
  OBJECT-PROPERTIES
  {
    Date=22-01-18;
    Time=08:45:12;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=ENU=ForNAV Sales Template Sales Tax;
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   ReportForNavOpenDesigner := TRUE;
                 END;

    OnPreReport=VAR
                  ForNAVSetup@1000000000 : Record 70000;
                BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               DataItemTableView=SORTING(No.);
               MaxIteration=1;
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetSalesTaxDetails;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1   ;1   ;DataItem;SalesTaxBuffer      ;
               DataItemTable=Table70998;
               DataItemTableView=SORTING(Primary Key);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=[CSY=Pocet kopi°;
                             DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             DES=Anzahl Kopien;
                             ENG=No. of Copies;
                             ESM=Nß copias;
                             FRB=Nombre de copies;
                             ITS=Nr. di copie;
                             NLB=Aantal exemplaren;
                             DEA=Anzahl Kopien;
                             ENA=No. of Copies;
                             ESN=Nß copias;
                             FRC=Nombre de copies;
                             ENC=No. of Copies;
                             FRS=Nombre de copies;
                             ENZ=No. of Copies];
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetSalesTaxDetails@1();
    VAR
      ForNAVGetSalesTaxDetails@1000 : Codeunit 70004;
    BEGIN
      SalesTaxBuffer.DELETEALL;
      ForNAVGetSalesTaxDetails.GetSalesTax(Header, SalesTaxBuffer);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70526 ForNAV Template - Landscape
{
  OBJECT-PROPERTIES
  {
    Date=21-01-18;
    Time=09:01:06;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=ENU=ForNAV Template - Landscape;
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   ReportForNavOpenDesigner := TRUE;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000000;;DataItem;                  ;
               DataItemTable=Table2000000026;
               MaxIteration=1 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moßnosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>yykAAO1a/XLiyBH/P1X3DhNd5bDrWND3x665LYzNLhV/lcHeVK5SrkFqsHaFhpMGr7kkVXmaPFie5HpGAgSWKdneu0s2YGOYmZ6Z7l93z3S3dfD2fhKRO0jSkMUtRWuoCoHYZ0EYj1vKjI9eucrbH775w8FfeEIvYcoSnp7QOZvxPiQhjcKfISGrr9fLhcyG3rDEamtdCjmjE2gp+UpdlpzRO4V0WMwTFg3mUxw7grvj+2kCadoobNq46hWaep08QnYntqkvdiUtsuCkTjqziM8SwL4YZjglqpOL2TAK/T/DfMA+gaAOHJ+64OqqMzLBVJH/ozCdRnSe8S0Ybl+TAUywjwN5RU5oHKQ+nYJC1oRaim00VPzRTN1WyPnwI/j8jLUUR7VERzeEKPgAQ0TwLvThKolayi3n09fNZgDpJ86mr+jt5C7k6mtHNd3m0Tymk9BPkQlNU5vnR5TTZodNpjSe79U6l+dnV/0/6eoZBJBEyBl+P7yu7Svkgo7hPYTjW95SdE3IJXo+hAG/xQ7PwY5TmozDOMWmimDhr/zUBe1SyJbCk9lS1Ks4xOUGEPPb9HzUPg2jKJwAhwRRm4a4kGUqpB19pvP0BEa8HXycpbzDArim0QzSxWJd1H5LaQsbqhNnyhGn+CKBbI++n4RTHM6F7MUjlkwoR2gb74Dv7b/57tv7I/Gn/SZTTh/4bLp1rEMjXwKf7tVO2JjV9t8oaOKEHBwKOeVXbPQ4TLTcXnsxh7GQa81SM00LHQhaMRkFz1sDOoyQRH4ghvIlNL42fh3C55Yi4PypG0YI3HugwvNOT0TvKb1HykQKi+6jkF6AH+ripeSMbvBd4P0SRmh/pUyLjSDJWM5EPKVpzsC6/vrhOKbCb9BoR36ArqHbJhge6I5uGyYa09B0RzD0R5Zhu1ZgBB4aVxLG/Dw+xoNlLgxtoer+Lft8PuPTmdDoLEkyHTckOSSoHo7Sp1l7wMgfW6R2fO9DVMOp6DkIRBmzmWF3kWG9gIoEIhc9XetdB8gsBWgA9/yQ3S/QuUoh6QXLzj4edt1MGXVbOAjzpZq6EaMoGvqNpnkND1+GtzDwPowZkKtenbhTXif+LRUCt9Qi2O9Z8nM7QsRbivAYhYgdW8p//vXvjIGsQ1JMQCx6GgZBBBmtMC1cUZp2xnUB4nz+Bg6IRJ/PI0DAWRLyeYaIpRAkz7ge0SgF2d7YOR9obiLblNCW4a1nq9tV8D6+B38mEB3gibIJO57LdSuD1ynDfjX2JZAfsIDOnw98Nr0S7s6LcdfLcDey1d1S3C9CXzh3AfqHJ+1NTvQAa8118HJTVQ1vXHX90JCKclBRmtSGbVvuIxheCuddU0Des9SAOKTlmjIo+Stjk94ED5Uy4IvnvJxWCXjvyUAbZUCb2WqaWsXCVyZy06FTAWqVY0V9xKZTIVTrkEWBIEigwyKWtJTDiPqfqpn5konnGvpigUqIa1qprRdYf54DmGV6sfI99Sfq5UIaWcGWbWntqmYZj7qCbuLZn5u8W372l2nokCV4lWFIdMg4Z5NHVLbpGBmD27xqq8bk9GrqMqqraynK8zRorV/gzZIb/OEdU7xftPILvcsYL4t4sv4i4BeoEujFmSa+QOTyaDC0iqw8b+gNKcX4Bfxh4NiOrlJDtVTf8VXfsnRKYTgE0AqxjmaqpUFRLs+TwyDNquIdWch1I+3pXcJm0xS9ZH7DWTsIRC5mL/1Ftxw8/I3sKnat6odZwRkGbPqIJ3Qgllo7xZwuPAnjJaiZb/xYki5c3LIYzhiRuqmRt6SERsqVH2Tpcsb3pEZe4/v7sinLZV+TeBZhBrNKOkqoj29OaRhVZyGn38pBTpPvv3X792wCwgSfAMJyylYellSVULhuDy5hHKY8S27OWHV2Hk5d8FXO2EP6Shz2Dttn1ZmS1FvxkRSVdu5/6HUHIkl+go5Wc7YysSLLOPlbY8XJSOafe6NZLE8UsndHo33y9wQjqSQm2Hjzz/3GRxbGezXyDyJKCqXXzsIvH947O5fcueTOJX9Vl6wWytmlodwLozatatSmb0ZteXaqOc+oU8kgV1YzS+tVhqtrum9BAFQ1raEfwEgLbB80W6Mj33eG4JmeLYuhv2G9asX0y+pWWnlCvxGw5U1tGZfZXhaSbU1mPFsSue5Xmcx4v1kys60OplcqE+RN/f+pOKD/SsWBbdUxvbw48LA8turRSvzGUf+3K2G68UVLYXql4nreNL76Aq/+8sr6tgKXXqm0njfNr/2/GPrLy+mVa1HGZlSzsP/yO3p7LaosqvkdalKO4QN1KL71EXUdqtuBRk0v8G0vcMAEVTWoEbjDyjWppVxPDnV07wmGba1KUPauBLXLd3f57tea7+5KUDuX3Lnkf5VLVorMDPV3LUGtQuiD5toTX4VliiMHl+AjaxsPhmWSYM4iH+fzHn96YsVvMfs3zHymfJSLPMjZFrMOmqvdD5pbnsL84Rc=</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70527 ForNAV Template
{
  OBJECT-PROPERTIES
  {
    Date=21-01-18;
    Time=09:00:10;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   ReportForNavOpenDesigner := TRUE;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000000;;DataItem;                  ;
               DataItemTable=Table2000000026;
               MaxIteration=1 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moßnosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70528 ForNAV Purchase Template
{
  OBJECT-PROPERTIES
  {
    Date=22-01-18;
    Time=08:44:20;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=ENU=ForNAV Purchase Template;
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   ReportForNavOpenDesigner := TRUE;
                 END;

    OnPreReport=VAR
                  ForNAVSetup@1000000000 : Record 70000;
                BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table122;
               DataItemTableView=SORTING(No.);
               MaxIteration=1;
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table123;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=[CSY=Pocet kopi°;
                             DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             DES=Anzahl Kopien;
                             ENG=No. of Copies;
                             ESM=Nß copias;
                             FRB=Nombre de copies;
                             ITS=Nr. di copie;
                             NLB=Aantal exemplaren;
                             DEA=Anzahl Kopien;
                             ENA=No. of Copies;
                             ESN=Nß copias;
                             FRC=Nombre de copies;
                             ENC=No. of Copies;
                             FRS=Nombre de copies;
                             ENZ=No. of Copies];
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70529 ForNAV Sales Template
{
  OBJECT-PROPERTIES
  {
    Date=22-01-18;
    Time=08:43:26;
    Modified=Yes;
    Version List=SHIP,FORNAV3.0.0.1426/1426;
  }
  PROPERTIES
  {
    CaptionML=ENU=ForNAV Sales Template;
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   ReportForNavOpenDesigner := ReportForNavAllowDesign;
                 END;

    OnPreReport=VAR
                  ForNAVSetup@1000000000 : Record 70000;
                BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               DataItemTableView=SORTING(No.);
               MaxIteration=1;
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=[CSY=Pocet kopi°;
                             DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             DES=Anzahl Kopien;
                             ENG=No. of Copies;
                             ESM=Nß copias;
                             FRB=Nombre de copies;
                             ITS=Nr. di copie;
                             NLB=Aantal exemplaren;
                             DEA=Anzahl Kopien;
                             ENA=No. of Copies;
                             ESN=Nß copias;
                             FRC=Nombre de copies;
                             ENC=No. of Copies;
                             FRS=Nombre de copies;
                             ENZ=No. of Copies];
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.0.0.1426, Version=3.0.0.1426, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Codeunit 70000 ForNAV Check Document Discount
{
  OBJECT-PROPERTIES
  {
    Date=01-05-17;
    Time=12:00:00;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE HasDiscount@1000000001(Rec@1000000000 : Variant) : Boolean;
    VAR
      RecRefLib@1000000002 : Codeunit 70090;
      TestValidDociFace@1000000003 : Codeunit 70080;
      RecRef@1000000001 : RecordRef;
    BEGIN
      RecRefLib.ConvertToRecRef(Rec, RecRef);
      TestValidDociFace.ThrowErrorIfNotValid(RecRef);
      EXIT(CheckLinesTableForDiscount(RecRef, FindDiscountFieldNoInLines(RecRef)));
    END;

    LOCAL PROCEDURE FindDiscountFieldNoInLines@1000000009(RecRef@1000000001 : RecordRef) : Integer;
    VAR
      Field@1000000000 : Record 2000000041;
      NoDiscountFieldErr@1000000002 : TextConst 'ENU=The connected line table does not contain a valid field for Line Discount.';
    BEGIN
      Field.SETRANGE(TableNo, RecRef.NUMBER + 1);
      Field.SETRANGE(FieldName, 'Line Discount %');
      IF NOT Field.FINDFIRST THEN
        ERROR(NoDiscountFieldErr);

      EXIT(Field."No.");
    END;

    LOCAL PROCEDURE CheckLinesTableForDiscount@1000000011(VAR RecRef@1000000000 : RecordRef;FieldNo@1000000001 : Integer) : Boolean;
    VAR
      RecRefLib@1000000004 : Codeunit 70090;
      LineRec@1000000003 : RecordRef;
      FldRef@1000000002 : FieldRef;
    BEGIN
      LineRec.OPEN(RecRef.NUMBER + 1);

      RecRefLib.FindAndFilterieldNo(RecRef, LineRec, FldRef, 'No.');
      RecRefLib.FindAndFilterieldNo(RecRef, LineRec, FldRef, 'Document Type');

      FldRef := LineRec.FIELD(FieldNo);
      FldRef.SETFILTER('<>0');
      EXIT(NOT LineRec.ISEMPTY);
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70001 ForNAV Get Vat Amount Lines
{
  OBJECT-PROPERTIES
  {
    Date=12-12-17;
    Time=12:25:38;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE GetVatAmountLines@1000000000(Rec@1000000000 : Variant;VAR VATAmountLine@1000000001 : TEMPORARY Record 290);
    VAR
      DocLineBuffer@1000000006 : TEMPORARY Record 70999;
      RecRefLib@1000000002 : Codeunit 70090;
      TestValidDociFace@1000000004 : Codeunit 70080;
      RecRef@1000000003 : RecordRef;
      LineRec@1000000005 : RecordRef;
    BEGIN
      ThrowErrorIfNotTemp(VATAmountLine);
      RecRefLib.ConvertToRecRef(Rec, RecRef);
      TestValidDociFace.ThrowErrorIfNotValid(RecRef);
      FindLinesRecRef(DocLineBuffer, RecRef, LineRec);
      CreateVATAmountLine(DocLineBuffer, VATAmountLine);
    END;

    LOCAL PROCEDURE ThrowErrorIfNotTemp@1000000001(VAR VATAmountLine@1000000000 : Record 290);
    VAR
      CheckTemporary@1000000002 : Codeunit 70008;
    BEGIN
      CheckTemporary.IsTemporary(VATAmountLine, TRUE);
    END;

    LOCAL PROCEDURE FindLinesRecRef@1000000003(VAR DocLineBuffer@1000000004 : Record 70999;VAR RecRef@1000000000 : RecordRef;VAR LineRec@1000000001 : RecordRef);
    VAR
      RecRefLib@1000000002 : Codeunit 70090;
      FldRef@1000000003 : FieldRef;
    BEGIN
      LineRec.OPEN(RecRef.NUMBER + 1);

      RecRefLib.FindAndFilterieldNo(RecRef, LineRec, FldRef, 'No.');
      RecRefLib.FindAndFilterieldNo(RecRef, LineRec, FldRef, 'Document Type');
      IF LineRec.FINDSET THEN REPEAT
        DocLineBuffer.CreateForRecRef(LineRec);
      UNTIL LineRec.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateVATAmountLine@1000000002(VAR DocLineBuffer@1000000001 : Record 70999;VAR VATAmountLine@1000000000 : Record 290);
    BEGIN
      WITH DocLineBuffer DO
        IF FINDSET THEN REPEAT
          VATAmountLine.INIT;
          VATAmountLine."VAT Identifier" := "VAT Identifier";
          VATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
          VATAmountLine."Tax Group Code" := "Tax Group Code";
          VATAmountLine."VAT %" := "VAT %";
          VATAmountLine."VAT Base" := Amount;
          VATAmountLine."Amount Including VAT" := "Amount Including VAT";
          VATAmountLine."Line Amount" := "Line Amount";
          IF "Allow Invoice Disc." THEN
            VATAmountLine."Inv. Disc. Base Amount" := "Line Amount";
          VATAmountLine."Invoice Discount Amount" := "Inv. Discount Amount";
          VATAmountLine."VAT Clause Code" := "VAT Clause Code";
          IF ("VAT %" <> 0) OR ("VAT Clause Code" <> '') OR (Amount <> "Amount Including VAT") THEN
            VATAmountLine.InsertLine;
        UNTIL NEXT = 0;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70002 ForNAV Get Vat Clause
{
  OBJECT-PROPERTIES
  {
    Date=01-05-17;
    Time=12:00:00;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TryGetVATClause@1000000000 : Integer;

    PROCEDURE GetVATClauses@1000000000(VAR VATAmountLine@1000000001 : TEMPORARY Record 290;VAR VATClause@1000000000 : Record 560;LanguageCode@1000000002 : Code[10]);
    BEGIN
      WITH VATAmountLine DO
        IF FINDSET THEN REPEAT
          TryGetVATClauseText(VATClause, "VAT Clause Code", LanguageCode);
        UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE TryGetVATClauseText@1000000002(VAR VATClausePar@1000000000 : Record 560;VATClauseCode@1000000002 : Code[10];LanguageCode@1000000003 : Code[10]);
    VAR
      VATClause@1000000001 : Record 560;
    BEGIN
      IF NOT VATClause.GET(VATClauseCode) THEN
        EXIT;

      VATClause.TranslateDescription(LanguageCode);

      VATClausePar := VATClause;
      IF VATClausePar.INSERT THEN;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70003 ForNAV Update No. Printed
{
  OBJECT-PROPERTIES
  {
    Date=14-09-17;
    Time=12:08:51;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
    Permissions=TableData 36=rm,
                TableData 38=rm,
                TableData 110=rm,
                TableData 112=rm,
                TableData 114=rm,
                TableData 120=rm,
                TableData 122=rm,
                TableData 124=rm;
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE UpdateNoPrinted@1000000001(Rec@1000000000 : Variant;Preview@1000 : Boolean);
    VAR
      RecRefLib@1000000003 : Codeunit 70090;
      TestValidDociFace@1000000002 : Codeunit 70080;
      RecRef@1000000001 : RecordRef;
    BEGIN
      IF Preview THEN
        EXIT;

      RecRefLib.ConvertToRecRef(Rec, RecRef);
      TestValidDociFace.ThrowErrorIfNotValid(RecRef);
      FindAndUpdateField(RecRef);
    END;

    LOCAL PROCEDURE FindAndUpdateField@1000000003(VAR RecRef@1000000000 : RecordRef);
    VAR
      Field@1000000001 : Record 2000000041;
      FldRef@1000000003 : FieldRef;
      NoPrinted@1000000004 : Integer;
    BEGIN
      Field.SETRANGE(TableNo, RecRef.NUMBER);
      Field.SETRANGE(FieldName, 'No. Printed');
      IF NOT Field.FINDFIRST THEN
        EXIT;

      FldRef := RecRef.FIELD(Field."No.");
      NoPrinted := FldRef.VALUE;
      NoPrinted +=1;
      FldRef.VALUE := NoPrinted;
      RecRef.MODIFY;
      COMMIT;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70004 ForNAV Get Sales Tax Details
{
  OBJECT-PROPERTIES
  {
    Date=12-12-17;
    Time=12:25:24;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE GetSalesTax@1000000000(Rec@1000000000 : Variant;VAR SalesTaxBuffer@1000000001 : TEMPORARY Record 70998);
    VAR
      DocLineBuffer@1000000006 : TEMPORARY Record 70999;
      RecRefLib@1000000002 : Codeunit 70090;
      TestValidDociFace@1000000004 : Codeunit 70080;
      RecRef@1000000003 : RecordRef;
      LineRec@1000000005 : RecordRef;
    BEGIN
      ThrowErrorIfNotTemp(SalesTaxBuffer);
      RecRefLib.ConvertToRecRef(Rec, RecRef);
      TestValidDociFace.ThrowErrorIfNotValid(RecRef);
      FindLinesRecRef(DocLineBuffer, RecRef, LineRec);
      CreateSalesTaxDetails(DocLineBuffer, SalesTaxBuffer);
    END;

    LOCAL PROCEDURE ThrowErrorIfNotTemp@1000000001(VAR SalesTaxBuffer@1000000000 : Record 70998);
    VAR
      CheckTemporary@1000000001 : Codeunit 70008;
    BEGIN
      CheckTemporary.IsTemporary(SalesTaxBuffer, TRUE);
    END;

    LOCAL PROCEDURE FindLinesRecRef@1000000003(VAR DocLineBuffer@1000000004 : Record 70999;VAR RecRef@1000000000 : RecordRef;VAR LineRec@1000000001 : RecordRef);
    VAR
      RecRefLib@1000000002 : Codeunit 70090;
      FldRef@1000000003 : FieldRef;
    BEGIN
      LineRec.OPEN(RecRef.NUMBER + 1);

      RecRefLib.FindAndFilterieldNo(RecRef, LineRec, FldRef, 'No.');
      RecRefLib.FindAndFilterieldNo(RecRef, LineRec, FldRef, 'Document Type');
      IF LineRec.FINDSET THEN REPEAT
        DocLineBuffer.CreateForRecRef(LineRec);
      UNTIL LineRec.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateSalesTaxDetails@1000000002(VAR DocLineBuffer@1000000001 : Record 70999;VAR SalesTaxBuffer@1000000000 : Record 70998);
    BEGIN
      SalesTaxBuffer.INIT;
      SalesTaxBuffer.INSERT;

      WITH DocLineBuffer DO
        IF FINDSET THEN REPEAT
          IF "VAT %" = 0 THEN
            SalesTaxBuffer."Exempt Amount" := SalesTaxBuffer."Exempt Amount" + Amount
          ELSE
            SalesTaxBuffer."Taxable Amount" := SalesTaxBuffer."Taxable Amount" + Amount;
          SalesTaxBuffer.MODIFY;
        UNTIL NEXT = 0;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70005 ForNAV Detect Localization
{
  OBJECT-PROPERTIES
  {
    Date=20-07-17;
    Time=19:43:26;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE CheckLocalizationBasedOnTables@1(VAR ForNAVSetup@1000 : Record 70000);
    VAR
      AllObjWithCaption@1001 : Record 2000000058;
    BEGIN
      WITH AllObjWithCaption DO BEGIN
        SETRANGE("Object Type", "Object Type"::Table);
        SETRANGE("Object ID", 10000);
        IF NOT ISEMPTY THEN BEGIN
          ForNAVSetup.Localization := ForNAVSetup.Localization::"North America";
          EXIT;
        END;
        SETRANGE("Object Type", "Object Type"::Table);
        SETRANGE("Object ID", 11000, 49999);
        IF NOT ISEMPTY THEN BEGIN
          ForNAVSetup.Localization := ForNAVSetup.Localization::Other;
          EXIT;
        END;

        ForNAVSetup.Localization := ForNAVSetup.Localization::"World Wide";

      END;
    END;

    PROCEDURE ValidateCurrentLocalization@2(ForNAVSetup@1000 : Record 70000) : Boolean;
    VAR
      ForNAVSetupSetLocalization@1001 : Record 70000;
    BEGIN
      CheckLocalizationBasedOnTables(ForNAVSetupSetLocalization);
      EXIT(ForNAVSetupSetLocalization.Localization = ForNAVSetup.Localization);
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 70006 ForNAV Read Watermarks
{
  OBJECT-PROPERTIES
  {
    Date=12-09-17;
    Time=11:59:17;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE ReadFromFile@1(VAR ForNAVSetup@1004 : Record 70000;Which@1003 : Integer) : Boolean;
    VAR
      TempBlob@1002 : TEMPORARY Record 99008535;
      FileMgt@1001 : Codeunit 419;
      FileName@1000 : Text;
    BEGIN
      FileName := FileMgt.BLOBImport(TempBlob,'');

      WITH ForNAVSetup DO
        IF FileName <> '' THEN BEGIN
          CASE Which OF
            FIELDNO(Logo):
              BEGIN
                Logo := TempBlob.Blob;
                "Logo File Name" := GetFileNameFromFile(FileName);
              END;
            FIELDNO("Document Watermark"):
              BEGIN
               "Document Watermark" := TempBlob.Blob;
                "Document Watermark File Name" := GetFileNameFromFile(FileName);
              END;
            FIELDNO("List Report Watermark"):
              BEGIN
                "List Report Watermark" := TempBlob.Blob;
                "List Report Watermark File N." := GetFileNameFromFile(FileName);
              END;
          END;
          EXIT(TRUE);
        END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetFileNameFromFile@3(Value@1000 : Text) : Text;
    VAR
      LastPos@1001 : Integer;
      i@1002 : Integer;
    BEGIN
      WHILE i < STRLEN(Value) DO BEGIN
        i := i + 1;
        IF Value[i] = '\' THEN
          LastPos := i;
      END;

      EXIT(COPYSTR(Value, LastPos + 1));
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 70007 ForNAV Get No. of Copies
{
  OBJECT-PROPERTIES
  {
    Date=20-12-17;
    Time=12:47:50;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE GetNoOfCopies@1000000001(Rec@1000000000 : Variant) : Integer;
    VAR
      RecRefLib@1000000003 : Codeunit 70090;
      TestValidDociFace@1000000002 : Codeunit 70080;
      RecRef@1000000001 : RecordRef;
    BEGIN
      RecRefLib.ConvertToRecRef(Rec, RecRef);
      IF NOT TestValidDociFace.CheckValid(RecRef) THEN
        EXIT(0);

      EXIT(FindNoOfCopiesFromBillToCustomerNo(RecRef));
    END;

    LOCAL PROCEDURE FindNoOfCopiesFromBillToCustomerNo@1000000003(VAR RecRef@1000000000 : RecordRef) : Integer;
    VAR
      Customer@1000000002 : Record 18;
      Field@1000000001 : Record 2000000041;
      FldRef@1000000003 : FieldRef;
    BEGIN
      Field.SETRANGE(TableNo, RecRef.NUMBER);
      Field.SETRANGE(FieldName, 'Bill-to Customer No.');
      IF NOT Field.FINDFIRST THEN
        EXIT(0);

      FldRef := RecRef.FIELD(Field."No.");
      Customer.GET(FldRef.VALUE);
      EXIT(Customer."Invoice Copies");
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70008 ForNAV Check Temporary
{
  OBJECT-PROPERTIES
  {
    Date=12-12-17;
    Time=14:30:31;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE IsTemporary@1000000001(Rec@1000000001 : Variant;ThrowError@1000000000 : Boolean) : Boolean;
    VAR
      RecRef@1000000002 : RecordRef;
      RecordRefLibrary@1000000003 : Codeunit 70090;
      RecordShouldBeTempErr@1000000004 : TextConst 'ENU=The Record Variable (%1) must be temporary when callng this API.';
    BEGIN
      RecordRefLibrary.ConvertToRecRef(Rec, RecRef);
      IF RecRef.ISTEMPORARY THEN
        EXIT(FALSE);

      IF ThrowError THEN
        ERROR(RecordShouldBeTempErr, RecRef.NAME);

      EXIT(TRUE);
    END;

    BEGIN
    {
      We use this codeunit because ReportsForNAV is backwards compatible with NAV 2015. This version does not support ISTEMPORARY on record variables
    }
    END.
  }
}

OBJECT Codeunit 70009 ForNAV First Time Setup
{
  OBJECT-PROPERTIES
  {
    Date=12-09-17;
    Time=13:17:24;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            IF CheckIfSetupExists THEN
              EXIT;

            AskForDefault;
            RunWizardIfSetupDoesNotExist;
          END;

  }
  CODE
  {

    LOCAL PROCEDURE CheckIfSetupExists@2() : Boolean;
    VAR
      ForNAVSetup@1000 : Record 70000;
    BEGIN
      EXIT(ForNAVSetup.GET);
    END;

    LOCAL PROCEDURE AskForDefault@3();
    VAR
      SetDefaultsQst@1000 : TextConst 'ENU=Do you want to setup ForNAV with default values?';
      ForNAVSetup@1001 : Record 70000;
    BEGIN
      IF NOT CONFIRM(SetDefaultsQst, TRUE) THEN
        EXIT;

      ForNAVSetup.InitSetup;
      ForNAVSetup.CreateWebService;
      ForNAVSetup.ReplaceReportSelection(TRUE);
      COMMIT;
    END;

    LOCAL PROCEDURE RunWizardIfSetupDoesNotExist@4();
    VAR
      ForNAVSetup@1000 : Record 70000;
    BEGIN
      IF ForNAVSetup.GET THEN
        EXIT;

      PAGE.RUNMODAL(PAGE::"ForNAV Setup Wizard");

      IF ForNAVSetup.GET THEN
        COMMIT;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70019 ForNAV Notifications
{
  OBJECT-PROPERTIES
  {
    Date=01-05-17;
    Time=12:00:00;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [EventSubscriber(Codeunit,1,OnAfterFindPrinter,"",Skip,Skip)]
    LOCAL PROCEDURE OnFindPrinter@2(ReportID@1000 : Integer;VAR PrinterName@1001 : Text[250]);
    BEGIN
      ShowSetupNotification;
    END;

    LOCAL PROCEDURE ShowSetupNotification@1();
    VAR
      MyNotifications@1006 : Record 1518;
      ForNAVSetup@1001 : Record 70000;
      NotificationIDs@1004 : Codeunit 70022;
      MyNotification@1000 : Notification;
      ForNAVNotSetup@1002 : TextConst 'ENU=ForNAV is installed but not setup. Do you want to do this now?';
      Yes@1003 : TextConst 'ENU=Yes';
      NoAndDontAskAgain@1005 : TextConst 'ENU=No, and please don''t remind me again.';
    BEGIN
      IF ForNAVSetup.GET THEN
        EXIT;

      IF NOT MyNotifications.IsEnabled(NotificationIDs.SetupForNAV) THEN
        EXIT;

      MyNotification.ID := NotificationIDs.SetupForNAV;
      MyNotification.MESSAGE := ForNAVNotSetup;
      MyNotification.ADDACTION(Yes, CODEUNIT::"ForNAV Notification Actions", 'SetupForNAV');
      MyNotification.ADDACTION(NoAndDontAskAgain, CODEUNIT::"ForNAV Notification Actions", 'DisableSetup');
      MyNotification.SEND;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70020 ForNAV Notification Actions
{
  OBJECT-PROPERTIES
  {
    Date=01-05-17;
    Time=12:00:00;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE SetupForNAV@2(VAR MyNotification@1000 : Notification);
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
    END;

    PROCEDURE DisableSetup@1(VAR MyNotification@1000 : Notification);
    VAR
      MyNotifications@1001 : Record 1518;
      NotificationID@1002 : GUID;
    BEGIN
      MyNotifications.LOCKTABLE;
      NotificationID := MyNotification.ID;
      IF MyNotifications.GET(USERID, NotificationID) THEN BEGIN
        MyNotifications.Enabled := FALSE;
        MyNotifications.MODIFY;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70021 ForNAV Initialize Notification
{
  OBJECT-PROPERTIES
  {
    Date=01-05-17;
    Time=12:00:00;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [EventSubscriber(Page,1518,OnInitializingNotificationWithDefaultState,"",Skip,Skip)]
    LOCAL PROCEDURE OnInitializingNotificationWithDefaultState@2();
    VAR
      MyNotifications@1000 : Record 1518;
      SetupForNAVTxt@1001 : TextConst 'ENU=Ask to setup ForNAV.';
      SetupForNAVDescriptionTxt@1002 : TextConst 'ENU=If you have ForNAV installed but don''t want to use it, switch off receiving the notification.';
      NotificationIDs@1003 : Codeunit 70022;
    BEGIN
      MyNotifications.InsertDefaultWithTableNum(NotificationIDs.SetupForNAV,
        SetupForNAVTxt,
        SetupForNAVDescriptionTxt,
        DATABASE::"ForNAV Setup");
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70022 ForNAV Notification IDs
{
  OBJECT-PROPERTIES
  {
    Date=01-05-17;
    Time=12:00:00;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE SetupForNAV@2() : Text;
    BEGIN
      EXIT('cf8edf36-45c2-44c9-8367-cac5748bd597');
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70029 ForNAV Replace Report Sel.
{
  OBJECT-PROPERTIES
  {
    Date=20-07-17;
    Time=20:16:47;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            ReplaceSalesOrderConfirmation;
            ReplaceSalesInvoice;
            ReplaceSalesCreditMemo;
            ReplaceSalesShipment;
            ReplaceSalesQuote;
            ReplacePurchaseOrder;
            ReplacePurchaseInvoice;
            ReplacePurchaseQuote;
            ReplacePurchaseCreditMemo;
            //ReplaceReminder;
          END;

  }
  CODE
  {

    LOCAL PROCEDURE ReplaceSalesOrderConfirmation@1000000001();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"S.Order");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"S.Order";
        Sequence := '1';
        "Report ID" := FindReportID('Order Confirmation', GetPrefix);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplaceSalesInvoice@1000000000();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"S.Invoice");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"S.Invoice";
        Sequence := '1';
        "Report ID" := FindReportID('Sales Invoice', GetPrefix);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplaceSalesCreditMemo@1000000002();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"S.Cr.Memo");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"S.Cr.Memo";
        Sequence := '1';
        "Report ID" := FindReportID('Credit Memo', GetPrefix);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplaceSalesShipment@1000000009();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"S.Shipment");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"S.Shipment";
        Sequence := '1';
        "Report ID" := FindReportID('Sales Shipment', '');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplaceSalesQuote@1000000008();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"S.Quote");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"S.Quote";
        Sequence := '1';
        "Report ID" := FindReportID('Sales Quote', GetPrefix);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplacePurchaseOrder@1000000005();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"P.Order");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"P.Order";
        Sequence := '1';
        "Report ID" := FindReportID('Purchase Order', GetPrefix);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplacePurchaseQuote@1000000010();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"P.Quote");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"P.Quote";
        Sequence := '1';
        "Report ID" := FindReportID('Purchase Quote', GetPrefix);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplacePurchaseInvoice@1000000003();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"P.Invoice");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"P.Invoice";
        Sequence := '1';
        "Report ID" := FindReportID('Purchase Invoice', GetPrefix);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplacePurchaseCreditMemo@1000000007();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"P.Cr.Memo");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"P.Cr.Memo";
        Sequence := '1';
        "Report ID" := FindReportID('Purchase Cr. Memo', GetPrefix);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplaceReminder@1000000006();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::Reminder);
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::Reminder;
        Sequence := '1';
        "Report ID" := FindReportID('Reminder', GetPrefix);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE FindReportID@1000000004(ReportName@1000000001 : Text;Prefix@1000 : Text) : Integer;
    VAR
      AllObjWithCaption@1000000000 : Record 2000000058;
    BEGIN
      WITH AllObjWithCaption DO BEGIN
        SETRANGE("Object Type", "Object Type"::Report);
        SETRANGE("Object Name", 'ForNAV ' + Prefix +ReportName);
        FINDFIRST;
        EXIT("Object ID");
      END;
    END;

    LOCAL PROCEDURE GetPrefix@1() : Text;
    VAR
      ForNAVSetup@1000 : Record 70000;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."VAT Amount Specification" = ForNAVSetup."VAT Amount Specification"::"N/A. (Sales Tax)" THEN
        EXIT('Tax ');

      EXIT('VAT ');
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70080 ForNAV Test Valid Doc iFace
{
  OBJECT-PROPERTIES
  {
    Date=12-12-17;
    Time=12:26:24;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE ThrowErrorIfNotValid@1000000000(VAR RecRef@1000000000 : RecordRef);
    VAR
      NotValidTableErr@1000000002 : TextConst 'ENU=This table (%1) is not supported for this function.';
    BEGIN
      IF NOT CheckValid(RecRef) THEN
        ERROR(NotValidTableErr, RecRef.CAPTION);
    END;

    PROCEDURE CheckValid@1000000001(VAR RecRef@1000000000 : RecordRef) : Boolean;
    BEGIN
      CASE RecRef.NUMBER OF
        DATABASE::"Sales Header":
          EXIT(TRUE);
        DATABASE::"Sales Shipment Header":
          EXIT(TRUE);
        DATABASE::"Sales Invoice Header":
          EXIT(TRUE);
        DATABASE::"Sales Cr.Memo Header":
          EXIT(TRUE);
        DATABASE::"Purchase Header":
          EXIT(TRUE);
        DATABASE::"Purch. Rcpt. Header":
          EXIT(TRUE);
        DATABASE::"Purch. Inv. Header":
          EXIT(TRUE);
        DATABASE::"Purch. Cr. Memo Hdr.":
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70090 ForNAV RecordRef Library
{
  OBJECT-PROPERTIES
  {
    Date=01-05-17;
    Time=12:00:00;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE ConvertToRecRef@1000000002(VAR Rec@1000000000 : Variant;RecRef@1000000001 : RecordRef);
    VAR
      WrongDataTypeErr@1000000002 : TextConst 'ENU=Runtime Error: Wrong Datatype. Please contact your ForNAV reseller.';
    BEGIN
      CASE TRUE OF
        Rec.ISRECORDREF:
          RecRef := Rec;
        Rec.ISRECORD:
          RecRef.GETTABLE(Rec);
        ELSE
          ERROR(WrongDataTypeErr);
      END;
    END;

    PROCEDURE FindAndFilterieldNo@1000000003(VAR RecRef@1000000000 : RecordRef;VAR LineRec@1000000004 : RecordRef;VAR FldRef@1000000001 : FieldRef;Value@1000000005 : Text);
    VAR
      Field@1000000003 : Record 2000000041;
      DocumentNoField@1000000002 : FieldRef;
    BEGIN
      Field.SETRANGE(TableNo, RecRef.NUMBER);
      Field.SETRANGE(FieldName, Value);
      IF NOT Field.FINDFIRST THEN
        EXIT;

      DocumentNoField := RecRef.FIELD(Field."No.");

      Field.RESET;
      Field.SETRANGE(TableNo, RecRef.NUMBER + 1);
      Field.SETRANGE("No.", Field."No.");
      IF NOT Field.FINDFIRST THEN
        EXIT;

      FldRef := LineRec.FIELD(Field."No.");
      FldRef.SETRANGE(DocumentNoField.VALUE);
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70206 ForNAV Trial Balance
{
  OBJECT-PROPERTIES
  {
    Date=05-09-17;
    Time=17:00:00;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SingleQuote@1000 : Char;
      Char127@1001 : Char;
      Text000@1020000 : TextConst 'ENU=The StringPrintLength function in CodeUnit 70206 only works for font sizes from 7 through 10.';

    PROCEDURE InitGlobals@1();
    BEGIN
      SingleQuote := 39;
      Char127 := 127;
    END;

    PROCEDURE StringPrintLength@2(PrintString@1001 : Text[250];PointSize@1002 : Integer) Length@1000 : Integer;
    VAR
      i@1003 : Integer;
      OneCharLen@1004 : Integer;
    BEGIN
      InitGlobals;
      Length := 0;
      FOR i := 1 TO STRLEN(PrintString) DO BEGIN
        CASE PointSize OF
          7:
            CASE PrintString[i] OF
              SingleQuote:
                OneCharLen := 46;
              'i','j','l':
                OneCharLen := 55;
              '|':
                OneCharLen := 61;
              '!':
                OneCharLen := 63;
              ' ',',','.','/','\',':',';','I','[',']','f','t':
                OneCharLen := 68;
              '`','r','{','}','(',')','-':
                OneCharLen := 83;
              '"':
                OneCharLen := 87;
              '*':
                OneCharLen := 95;
              '^':
                OneCharLen := 115;
              'y':
                OneCharLen := 116;
              'v','x':
                OneCharLen := 121;
              'J','c','k','s','z':
                OneCharLen := 123;
              '+','<','>','=','~':
                OneCharLen := 145;
              'F','T','Z':
                OneCharLen := 151;
              'Y':
                OneCharLen := 159;
              '&','A','B','E','K','P','S','V','X':
                OneCharLen := 164;
              'C','D','H','w':
                OneCharLen := 174;
              'N','R','U':
                OneCharLen := 178;
              Char127:
                OneCharLen := 185;
              'G':
                OneCharLen := 190;
              'Q':
                OneCharLen := 192;
              '%','M','O','m':
                OneCharLen := 200;
              'W':
                OneCharLen := 238;
              '@':
                OneCharLen := 250;
              ELSE
                OneCharLen := 138;
            END;
          8:
            CASE PrintString[i] OF
              SingleQuote:
                OneCharLen := 54;
              'i','j','l':
                OneCharLen := 64;
              '|','!':
                OneCharLen := 72;
              ' ',',','.','/','\',':',';','I','[',']','f','t':
                OneCharLen := 78;
              '`','r','{','}','(',')','-':
                OneCharLen := 94;
              '"':
                OneCharLen := 100;
              '*':
                OneCharLen := 110;
              '^':
                OneCharLen := 130;
              'y':
                OneCharLen := 138;
              'x':
                OneCharLen := 140;
              'J','c','k','s','v','z':
                OneCharLen := 144;
              '+','<','>','=','~':
                OneCharLen := 166;
              'F','T','Z':
                OneCharLen := 172;
              'Y':
                OneCharLen := 186;
              '&','A','B','E','K','P','S','V','X':
                OneCharLen := 190;
              'C','D','H','N','R','U','w':
                OneCharLen := 204;
              Char127:
                OneCharLen := 212;
              'G','O','Q':
                OneCharLen := 220;
              'M','m':
                OneCharLen := 236;
              '%':
                OneCharLen := 250;
              'W':
                OneCharLen := 270;
              '@':
                OneCharLen := 288;
              ELSE
                OneCharLen := 158;
            END;
          9:
            CASE PrintString[i] OF
              SingleQuote:
                OneCharLen := 62;
              'i','j','l':
                OneCharLen := 70;
              '|':
                OneCharLen := 78;
              '!':
                OneCharLen := 82;
              ' ',',','.','/','\',':',';','I','[',']','f','t':
                OneCharLen := 88;
              '`','r','{','}','(',')','-':
                OneCharLen := 106;
              '"':
                OneCharLen := 112;
              '*':
                OneCharLen := 124;
              '^':
                OneCharLen := 144;
              'y':
                OneCharLen := 156;
              'x':
                OneCharLen := 158;
              'J','c','k','s','v','z':
                OneCharLen := 160;
              '+','<','>','=','~':
                OneCharLen := 186;
              'F','T','Z':
                OneCharLen := 196;
              'X':
                OneCharLen := 210;
              'Y':
                OneCharLen := 212;
              '&','A','B','E','K','P','S','V':
                OneCharLen := 212;
              'w':
                OneCharLen := 224;
              'C','D','H','N','R','U':
                OneCharLen := 230;
              Char127:
                OneCharLen := 240;
              'G','O','Q':
                OneCharLen := 250;
              'M','m':
                OneCharLen := 266;
              '%':
                OneCharLen := 282;
              'W':
                OneCharLen := 302;
              '@':
                OneCharLen := 322;
              ELSE
                OneCharLen := 176;
            END;
          10:
            CASE PrintString[i] OF
              SingleQuote:
                OneCharLen := 68;
              'i','j','l':
                OneCharLen := 78;
              '|':
                OneCharLen := 88;
              '!',',','.',':',';':
                OneCharLen := 96;
              ' ','/','\','I','[',']','f','t':
                OneCharLen := 98;
              '`','r','{','}','(',')','-':
                OneCharLen := 116;
              '"':
                OneCharLen := 126;
              '*':
                OneCharLen := 138;
              '^':
                OneCharLen := 166;
              'y':
                OneCharLen := 174;
              'J','c','k','s','v','x','z':
                OneCharLen := 176;
              '+','<','>','=','~':
                OneCharLen := 206;
              'F','T','Z':
                OneCharLen := 214;
              '&','A','B','E','K','P','S','V','X','Y':
                OneCharLen := 236;
              'C','D','H','N','R','U','w':
                OneCharLen := 254;
              Char127:
                OneCharLen := 266;
              'G','O','Q':
                OneCharLen := 274;
              'M','m':
                OneCharLen := 292;
              '%':
                OneCharLen := 314;
              'W':
                OneCharLen := 332;
              '@':
                OneCharLen := 358;
              ELSE
                OneCharLen := 196;
            END;
          ELSE
            ERROR(Text000);
        END;
        Length := Length + OneCharLen;
      END;
      EXIT((Length + 80) DIV 100);
    END;

    PROCEDURE SplitPrintLine@3(VAR PrintString@1000 : Text[250];VAR PrintString2@1001 : Text[250];SpaceOnPrintLine@1002 : Integer;PointSize@1003 : Integer);
    VAR
      OneWord@1004 : Text[250];
      s@1005 : Integer;
      e@1006 : Integer;
    BEGIN
      PrintString2 := '';
      WHILE StringPrintLength(PrintString,PointSize) > SpaceOnPrintLine DO BEGIN
        IF PrintString2 = '' THEN BEGIN
          s := 1;
          WHILE (s < STRLEN(PrintString)) AND (PrintString[s] = ' ') DO BEGIN
            PrintString2 := PrintString2 + ' ';
            s := s + 1;
          END;
        END ELSE BEGIN
          s := 1;
          WHILE (s < STRLEN(PrintString)) AND (PrintString[s] = ' ') DO
            s := s + 1;
        END;
        IF PrintString[s] = ' ' THEN
          EXIT;
        OneWord := '';
        e := s;
        WHILE (e < STRLEN(PrintString)) AND (PrintString[e] <> ' ') DO BEGIN
          OneWord := OneWord + COPYSTR(PrintString,e,1);
          e := e + 1;
        END;
        IF PrintString[e] <> ' ' THEN
          EXIT;
        IF StringPrintLength(PrintString2 + OneWord,PointSize) > SpaceOnPrintLine THEN
          EXIT;
        PrintString2 := PrintString2 + OneWord + ' ';
        WHILE (e < STRLEN(PrintString)) AND (PrintString[e] = ' ') DO
          e := e + 1;
        PrintString := DELSTR(PrintString,s,e - s);
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

      This codeunit is based on 10025 Paragraph Handling.
    }
    END.
  }
}

OBJECT Codeunit 70219 ForNAV Aging Calculation
{
  OBJECT-PROPERTIES
  {
    Date=06-12-17;
    Time=10:17:26;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE GetAging@1000000001(Rec@1000000000 : Variant;VAR AgingBuffer@1000000001 : Record 70220;VAR Args@1000000003 : Record 70219);
    VAR
      CustomerAging@1000000002 : Codeunit 70220;
      VendorAging@1000000004 : Codeunit 70221;
    BEGIN
      CASE GetAccountType(Rec) OF
        AgingBuffer."Account Type"::Customer:
          CustomerAging.GetAging(Rec, AgingBuffer, Args);
        AgingBuffer."Account Type"::Vendor:
          VendorAging.GetAging(Rec, AgingBuffer, Args);
      END;
    END;

    PROCEDURE GetAgingWithCurrency@1000000005(Rec@1000000000 : Variant;VAR AgingBuffer@1000000001 : Record 70220;VAR CurrAgingBuffer@1000000002 : Record 70220;VAR Args@1000000003 : Record 70219;VAR TempCurrency@1000000004 : TEMPORARY Record 4);
    VAR
      CustomerAging@1000000005 : Codeunit 70220;
      VendorAging@1000000006 : Codeunit 70221;
    BEGIN
      CASE GetAccountType(Rec) OF
        AgingBuffer."Account Type"::Customer:
          CustomerAging.GetAgingWithCurrency(Rec, AgingBuffer, CurrAgingBuffer, Args, TempCurrency);
        AgingBuffer."Account Type"::Vendor:
          VendorAging.GetAgingWithCurrency(Rec, AgingBuffer, CurrAgingBuffer, Args, TempCurrency);
      END;
    END;

    LOCAL PROCEDURE GetAccountType@1000000000(Rec@1000000001 : Variant) : Integer;
    VAR
      AgingBuffer@1000000004 : Record 70220;
      RecordRefLibrary@1000000002 : Codeunit 70090;
      UnsupportedTableErr@1000000000 : TextConst 'ENU=Unsupported Table';
      RecRef@1000000003 : RecordRef;
    BEGIN
      RecordRefLibrary.ConvertToRecRef(Rec, RecRef);
      CASE RecRef.NUMBER OF
        DATABASE::Customer:
          EXIT(AgingBuffer."Account Type"::Customer);
        DATABASE::Vendor:
          EXIT(AgingBuffer."Account Type"::Vendor);
        ELSE
          ERROR(UnsupportedTableErr);;
      END;
    END;

    PROCEDURE UpdateCurrencyTotals@7(VAR AgingBuffer@1000000002 : Record 70220;VAR CurrAgingBuffer@1000000001 : Record 70220;VAR TempCurrency@1000000000 : TEMPORARY Record 4);
    VAR
      i@1000 : Integer;
    BEGIN
      CurrAgingBuffer.RESET;
      CurrAgingBuffer.SETRANGE("Currency Code", AgingBuffer."Currency Code");
      IF NOT TempCurrency.GET(AgingBuffer."Currency Code") THEN BEGIN
        TempCurrency.Code := AgingBuffer."Currency Code";
        TempCurrency.INSERT;
        CurrAgingBuffer."Entry No." :=  TempCurrency.COUNT;
        CurrAgingBuffer."Currency Code" := AgingBuffer."Currency Code";
        CurrAgingBuffer.Amount := AgingBuffer.Amount;
        CurrAgingBuffer.Balance := AgingBuffer.Balance;
        CurrAgingBuffer."Amount 1" := AgingBuffer."Amount 1";
        CurrAgingBuffer."Amount 2" := AgingBuffer."Amount 2";
        CurrAgingBuffer."Amount 3" := AgingBuffer."Amount 3";
        CurrAgingBuffer."Amount 4" := AgingBuffer."Amount 4";
        CurrAgingBuffer."Amount 5" := AgingBuffer."Amount 5";
        CurrAgingBuffer.INSERT;
      END ELSE BEGIN
        CurrAgingBuffer.SETRANGE("Currency Code", AgingBuffer."Currency Code");
        CurrAgingBuffer.FINDFIRST;
        CurrAgingBuffer.Amount += AgingBuffer.Amount;
        CurrAgingBuffer.Balance += AgingBuffer.Balance;
        CurrAgingBuffer."Amount 1" += AgingBuffer."Amount 1";
        CurrAgingBuffer."Amount 2" += AgingBuffer."Amount 2";
        CurrAgingBuffer."Amount 3" += AgingBuffer."Amount 3";
        CurrAgingBuffer."Amount 4" += AgingBuffer."Amount 4";
        CurrAgingBuffer."Amount 5" += AgingBuffer."Amount 5";
        CurrAgingBuffer.MODIFY;
        CurrAgingBuffer.RESET;
      END;
    END;

    PROCEDURE GetCurrencyCode@1000000009(Value@1000000000 : Code[10]) : Code[10];
    VAR
      GLSetup@1000000001 : Record 98;
    BEGIN
      IF Value <> '' THEN
        EXIT(Value);

      GLSetup.GET;
      EXIT(GLSetup."LCY Code");
    END;

    PROCEDURE MoveValuesToPeriod@1000000006(VAR AgingBuffer@1000000000 : Record 70220;PeriodIndex@1000000001 : Integer);
    VAR
      Fld@1000000004 : Record 2000000041;
      RecRef@1000000002 : RecordRef;
      FldRef@1000000003 : FieldRef;
    BEGIN
      RecRef.GETTABLE(AgingBuffer);
      Fld.SETRANGE(TableNo, RecRef.NUMBER);
      Fld.SETRANGE(FieldName, 'Amount ' + FORMAT(PeriodIndex));
      Fld.FINDFIRST;
      FldRef := RecRef.FIELD(Fld."No.");

      FldRef.VALUE := AgingBuffer.Balance;

      Fld.SETRANGE(FieldName, 'Amount ' + FORMAT(PeriodIndex) + ' (LCY)');
      Fld.FINDFIRST;
      FldRef := RecRef.FIELD(Fld."No.");

      FldRef.VALUE := AgingBuffer."Balance (LCY)";

      RecRef.SETTABLE(AgingBuffer);
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70220 ForNAV Customer Aging
{
  OBJECT-PROPERTIES
  {
    Date=22-01-18;
    Time=14:24:09;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempCustLedgEntry@1000000003 : TEMPORARY Record 21;

    PROCEDURE GetAging@1000000001(VAR Cust@1000000000 : Record 18;VAR AgingBuffer@1000000001 : Record 70220;VAR Args@1000000003 : Record 70219);
    VAR
      CurrAgingBuffer@1000000004 : TEMPORARY Record 70220;
      TempCurrency@1000000002 : TEMPORARY Record 4;
    BEGIN
      GetAgingWithCurrency(Cust, AgingBuffer, CurrAgingBuffer, Args, TempCurrency);
    END;

    PROCEDURE GetAgingWithCurrency@1000000005(VAR Cust@1000000000 : Record 18;VAR AgingBuffer@1000000001 : Record 70220;VAR CurrAgingBuffer@1000000002 : Record 70220;VAR Args@1000000003 : Record 70219;VAR TempCurrency@1000000004 : TEMPORARY Record 4);
    BEGIN
      ClearData(AgingBuffer);
      GetBasedOnDetailedEntry(Cust, Args);
      GetBasedOnOpenEntry(Cust, Args);
      CreateAgingBuffer(Cust, AgingBuffer, CurrAgingBuffer, Args, TempCurrency);
      AgingBuffer.SetCaptions(Args);
    END;

    LOCAL PROCEDURE GetBasedOnDetailedEntry@1000000002(VAR Cust@1000000002 : Record 18;VAR Args@1000000003 : Record 70219);
    VAR
      DetailedCustLedgEntry@1000000000 : Record 379;
      CustLedgEntry@1000000001 : Record 21;
    BEGIN
      WITH DetailedCustLedgEntry DO BEGIN
        SETCURRENTKEY("Customer No.", "Posting Date", "Entry Type", "Currency Code");
        SETRANGE("Customer No.", Cust."No.");
        SETRANGE("Entry Type", DetailedCustLedgEntry."Entry Type"::Application);
        SETRANGE("Posting Date", 0D, Args."Ending Date");
        SETFILTER("Posting Date", '%1..', Args."Ending Date" + 1);

        IF FINDSET THEN REPEAT
          IF CustLedgEntry.GET("Cust. Ledger Entry No.") THEN
            IF CustLedgEntry.Open THEN BEGIN
              CustLedgEntry.SETRANGE("Date Filter",0D, Args."Ending Date");
              CustLedgEntry.CALCFIELDS("Remaining Amount");
              IF CustLedgEntry."Remaining Amount" <> 0 THEN
                InsertTemp(CustLedgEntry);
          END;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetBasedOnOpenEntry@1000000003(VAR Cust@1000000000 : Record 18;VAR Args@1000000002 : Record 70219);
    VAR
      CustLedgEntry@1000000001 : Record 21;
    BEGIN
      WITH CustLedgEntry DO BEGIN
        SETCURRENTKEY("Customer No.", Open, Positive, "Due Date", "Currency Code");
        SETRANGE("Customer No.", Cust."No.");
        SETRANGE(Open, TRUE);

        IF Args."Aging By" = Args."Aging By"::"Posting Date" THEN BEGIN
          SETRANGE("Posting Date", 0D, Args."Ending Date");
          SETRANGE("Date Filter", 0D, Args."Ending Date");
        END;

        IF FINDSET THEN REPEAT
        IF Args."Aging By" = Args."Aging By"::"Posting Date" THEN BEGIN
           CALCFIELDS("Remaining Amt. (LCY)");
           IF "Remaining Amt. (LCY)" <> 0 THEN
             InsertTemp(CustLedgEntry);
         END ELSE
           InsertTemp(CustLedgEntry);
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateAgingBuffer@1000000015(VAR Cust@1000000002 : Record 18;VAR AgingBuffer@1000000001 : Record 70220;VAR CurrAgingBuffer@1000000000 : Record 70220;VAR Args@1000000003 : Record 70219;VAR TempCurrency@1000000006 : TEMPORARY Record 4);
    VAR
      DetailedCustLedgEntry@1000000004 : Record 379;
      AgingCalculation@1000000007 : Codeunit 70219;
      PeriodIndex@1000000005 : Integer;
    BEGIN
      WITH TempCustLedgEntry DO
        IF FINDSET THEN REPEAT
          AgingBuffer.INIT;
          AgingBuffer."Entry No." := "Entry No.";
          AgingBuffer."Account No." := "Customer No.";
          AgingBuffer.GetAccountName;
          AgingBuffer."Credit Limit (LCY)" := Cust."Credit Limit (LCY)";
          IF NOT Args."Print Amounts in LCY" THEN
            AgingBuffer."Currency Code" := AgingCalculation.GetCurrencyCode("Currency Code");
          AgingBuffer."Document No." := "Document No.";
          AgingBuffer."External Document No." := "External Document No.";
          AgingBuffer."Document Type" := "Document Type";
          AgingBuffer."Document Date" := "Document Date";
          AgingBuffer."Posting Date" := "Posting Date";
          AgingBuffer."Due Date" := "Due Date";

          DetailedCustLedgEntry.SETRANGE("Cust. Ledger Entry No.",TempCustLedgEntry."Entry No.");
          IF DetailedCustLedgEntry.FINDSET THEN REPEAT
            IF (DetailedCustLedgEntry."Entry Type" = DetailedCustLedgEntry."Entry Type"::"Initial Entry") AND
               (TempCustLedgEntry."Posting Date" > Args."Ending Date") AND (Args."Aging By" <> Args."Aging By"::"Posting Date")
            THEN BEGIN
              IF TempCustLedgEntry."Document Date" <= Args."Ending Date" THEN
                DetailedCustLedgEntry."Posting Date" :=  TempCustLedgEntry."Document Date"
              ELSE
                IF (TempCustLedgEntry."Due Date" <= Args."Ending Date") AND (Args."Aging By" = Args."Aging By"::"Due Date") THEN
                  DetailedCustLedgEntry."Posting Date" := TempCustLedgEntry."Due Date";
            END;
            IF (DetailedCustLedgEntry."Posting Date" <= Args."Ending Date") OR
               (TempCustLedgEntry.Open AND (Args."Aging By" = Args."Aging By"::"Due Date") AND (TempCustLedgEntry."Due Date" > Args."Ending Date") AND (TempCustLedgEntry."Posting Date" <= Args."Ending Date"))
            THEN BEGIN
              IF DetailedCustLedgEntry."Entry Type" IN
                 [DetailedCustLedgEntry."Entry Type"::"Initial Entry",
                  DetailedCustLedgEntry."Entry Type"::"Unrealized Loss",
                  DetailedCustLedgEntry."Entry Type"::"Unrealized Gain",
                  DetailedCustLedgEntry."Entry Type"::"Realized Loss",
                  DetailedCustLedgEntry."Entry Type"::"Realized Gain",
                  DetailedCustLedgEntry."Entry Type"::"Payment Discount",
                  DetailedCustLedgEntry."Entry Type"::"Payment Discount (VAT Excl.)",
                  DetailedCustLedgEntry."Entry Type"::"Payment Discount (VAT Adjustment)",
                  DetailedCustLedgEntry."Entry Type"::"Payment Tolerance",
                  DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance",
                  DetailedCustLedgEntry."Entry Type"::"Payment Tolerance (VAT Excl.)",
                  DetailedCustLedgEntry."Entry Type"::"Payment Tolerance (VAT Adjustment)",
                  DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance (VAT Excl.)",
                  DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)"]
              THEN BEGIN
                IF NOT Args."Print Amounts in LCY" THEN
                  AgingBuffer.Amount += DetailedCustLedgEntry.Amount
                ELSE
                  AgingBuffer.Amount += DetailedCustLedgEntry."Amount (LCY)";
                AgingBuffer."Amount (LCY)" += DetailedCustLedgEntry."Amount (LCY)";
              END;

              IF DetailedCustLedgEntry."Posting Date" <= Args."Ending Date" THEN BEGIN
                IF NOT Args."Print Amounts in LCY" THEN
                  AgingBuffer.Balance += DetailedCustLedgEntry.Amount
                ELSE
                  AgingBuffer.Balance += DetailedCustLedgEntry."Amount (LCY)";
                AgingBuffer."Balance (LCY)" += DetailedCustLedgEntry."Amount (LCY)";

              END;
            END;
          UNTIL DetailedCustLedgEntry.NEXT = 0;

          IF AgingBuffer.Balance <> 0 THEN BEGIN
            CASE Args."Aging By" OF
             Args."Aging By"::"Due Date":
               PeriodIndex := Args.GetPeriodIndex(AgingBuffer."Due Date");
             Args."Aging By"::"Posting Date":
               PeriodIndex := Args.GetPeriodIndex(AgingBuffer."Posting Date");
             Args."Aging By"::"Document Date":
               BEGIN
                 IF AgingBuffer."Document Date" > Args."Ending Date" THEN BEGIN
                   AgingBuffer.Balance := 0;
                   AgingBuffer."Balance (LCY)" := 0;
                   AgingBuffer."Document Date" := AgingBuffer."Posting Date";
                 END;
                 PeriodIndex := Args.GetPeriodIndex(AgingBuffer."Document Date");
               END;
            END;

            AgingCalculation.MoveValuesToPeriod(AgingBuffer, PeriodIndex);

            AgingBuffer.INSERT;
            IF NOT Args."Print Amounts in LCY" THEN
              AgingCalculation.UpdateCurrencyTotals(AgingBuffer, CurrAgingBuffer, TempCurrency);
         END;
        UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE InsertTemp@1000000004(VAR CustLedgEntry@1000000000 : Record 21);
    BEGIN
      WITH TempCustLedgEntry DO BEGIN
        IF GET(CustLedgEntry."Entry No.") THEN
          EXIT;

        TempCustLedgEntry := CustLedgEntry;

        INSERT;
      END;
    END;

    LOCAL PROCEDURE ClearData@1000000000(VAR AgingBuffer@1000000001 : Record 70220);
    BEGIN
      AgingBuffer.RESET;
      AgingBuffer.DELETEALL;
      TempCustLedgEntry.RESET;
      TempCustLedgEntry.DELETEALL;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70221 ForNAV Vendor Aging
{
  OBJECT-PROPERTIES
  {
    Date=22-01-18;
    Time=14:24:21;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempVendorLedgerEntry@1000000003 : TEMPORARY Record 25;

    PROCEDURE GetAging@1000000001(VAR Vend@1000000000 : Record 23;VAR AgingBuffer@1000000001 : Record 70220;VAR Args@1000000003 : Record 70219);
    VAR
      CurrAgingBuffer@1000000004 : TEMPORARY Record 70220;
      TempCurrency@1000000002 : TEMPORARY Record 4;
    BEGIN
      GetAgingWithCurrency(Vend, AgingBuffer, CurrAgingBuffer, Args, TempCurrency);
    END;

    PROCEDURE GetAgingWithCurrency@1000000005(VAR Vend@1000000000 : Record 23;VAR AgingBuffer@1000000001 : Record 70220;VAR CurrAgingBuffer@1000000002 : Record 70220;VAR Args@1000000003 : Record 70219;VAR TempCurrency@1000000004 : TEMPORARY Record 4);
    BEGIN
      ClearData(AgingBuffer);
      GetBasedOnDetailedEntry(Vend, Args);
      GetBasedOnOpenEntry(Vend, Args);
      CreateAgingBuffer(Vend, AgingBuffer, CurrAgingBuffer, Args, TempCurrency);
      AgingBuffer.SetCaptions(Args);
    END;

    LOCAL PROCEDURE GetBasedOnDetailedEntry@1000000002(VAR Vend@1000000002 : Record 23;VAR Args@1000000003 : Record 70219);
    VAR
      DetailedVendorLedgEntry@1000000000 : Record 380;
      VendorLedgerEntry@1000000001 : Record 25;
    BEGIN
      WITH DetailedVendorLedgEntry DO BEGIN
        SETCURRENTKEY("Vendor No.", "Posting Date", "Entry Type", "Currency Code");
        SETRANGE("Vendor No.", Vend."No.");
        SETRANGE("Entry Type", DetailedVendorLedgEntry."Entry Type"::Application);
        SETRANGE("Posting Date", 0D, Args."Ending Date");
        SETFILTER("Posting Date", '%1..', Args."Ending Date" + 1);

        IF FINDSET THEN REPEAT
          IF VendorLedgerEntry.GET("Vendor Ledger Entry No.") THEN
            IF VendorLedgerEntry.Open THEN BEGIN
              VendorLedgerEntry.SETRANGE("Date Filter",0D, Args."Ending Date");
              VendorLedgerEntry.CALCFIELDS("Remaining Amount");
              IF VendorLedgerEntry."Remaining Amount" <> 0 THEN
                InsertTemp(VendorLedgerEntry);
          END;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetBasedOnOpenEntry@1000000003(VAR Vend@1000000000 : Record 23;VAR Args@1000000002 : Record 70219);
    VAR
      VendorLedgerEntry@1000000001 : Record 25;
    BEGIN
      WITH VendorLedgerEntry DO BEGIN
        SETCURRENTKEY("Vendor No.", Open, Positive, "Due Date", "Currency Code");
        SETRANGE("Vendor No.", Vend."No.");
        SETRANGE(Open, TRUE);

        IF Args."Aging By" = Args."Aging By"::"Posting Date" THEN BEGIN
          SETRANGE("Posting Date", 0D, Args."Ending Date");
          SETRANGE("Date Filter", 0D, Args."Ending Date");
        END;

        IF FINDSET THEN REPEAT
        IF Args."Aging By" = Args."Aging By"::"Posting Date" THEN BEGIN
           CALCFIELDS("Remaining Amt. (LCY)");
           IF "Remaining Amt. (LCY)" <> 0 THEN
             InsertTemp(VendorLedgerEntry);
         END ELSE
           InsertTemp(VendorLedgerEntry);
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateAgingBuffer@1000000015(VAR Vend@1000000002 : Record 23;VAR AgingBuffer@1000000001 : Record 70220;VAR CurrAgingBuffer@1000000000 : Record 70220;VAR Args@1000000003 : Record 70219;VAR TempCurrency@1000000006 : TEMPORARY Record 4);
    VAR
      DetailedVendorLedgEntry@1000000004 : Record 380;
      AgingCalculation@1000000007 : Codeunit 70219;
      PeriodIndex@1000000005 : Integer;
    BEGIN
      WITH TempVendorLedgerEntry DO
        IF FINDSET THEN REPEAT
          AgingBuffer.INIT;
          AgingBuffer."Entry No." := "Entry No.";
          AgingBuffer."Account Type" := AgingBuffer."Account Type"::Vendor;
          AgingBuffer."Account No." := "Vendor No.";
          AgingBuffer.GetAccountName;
      //    AgingBuffer."Customer Credit Limit (LCY)" := Vend."Credit Limit (LCY)";
          IF NOT Args."Print Amounts in LCY" THEN
            AgingBuffer."Currency Code" := AgingCalculation.GetCurrencyCode("Currency Code");
          AgingBuffer."Document No." := "Document No.";
          AgingBuffer."External Document No." := "External Document No.";
          AgingBuffer."Document Type" := "Document Type";
          AgingBuffer."Document Date" := "Document Date";
          AgingBuffer."Posting Date" := "Posting Date";
          AgingBuffer."Due Date" := "Due Date";

          DetailedVendorLedgEntry.SETRANGE("Vendor Ledger Entry No.",TempVendorLedgerEntry."Entry No.");
          IF DetailedVendorLedgEntry.FINDSET THEN REPEAT
            IF (DetailedVendorLedgEntry."Entry Type" = DetailedVendorLedgEntry."Entry Type"::"Initial Entry") AND
               (TempVendorLedgerEntry."Posting Date" > Args."Ending Date") AND (Args."Aging By" <> Args."Aging By"::"Posting Date")
            THEN BEGIN
              IF TempVendorLedgerEntry."Document Date" <= Args."Ending Date" THEN
                DetailedVendorLedgEntry."Posting Date" :=  TempVendorLedgerEntry."Document Date"
              ELSE
                IF (TempVendorLedgerEntry."Due Date" <= Args."Ending Date") AND (Args."Aging By" = Args."Aging By"::"Due Date") THEN
                  DetailedVendorLedgEntry."Posting Date" := TempVendorLedgerEntry."Due Date";
            END;
            IF (DetailedVendorLedgEntry."Posting Date" <= Args."Ending Date") OR
               (TempVendorLedgerEntry.Open AND (Args."Aging By" = Args."Aging By"::"Due Date") AND (TempVendorLedgerEntry."Due Date" > Args."Ending Date") AND (TempVendorLedgerEntry."Posting Date" <= Args."Ending Date"))
            THEN BEGIN
              IF DetailedVendorLedgEntry."Entry Type" IN
                 [DetailedVendorLedgEntry."Entry Type"::"Initial Entry",
                  DetailedVendorLedgEntry."Entry Type"::"Unrealized Loss",
                  DetailedVendorLedgEntry."Entry Type"::"Unrealized Gain",
                  DetailedVendorLedgEntry."Entry Type"::"Realized Loss",
                  DetailedVendorLedgEntry."Entry Type"::"Realized Gain",
                  DetailedVendorLedgEntry."Entry Type"::"Payment Discount",
                  DetailedVendorLedgEntry."Entry Type"::"Payment Discount (VAT Excl.)",
                  DetailedVendorLedgEntry."Entry Type"::"Payment Discount (VAT Adjustment)",
                  DetailedVendorLedgEntry."Entry Type"::"Payment Tolerance",
                  DetailedVendorLedgEntry."Entry Type"::"Payment Discount Tolerance",
                  DetailedVendorLedgEntry."Entry Type"::"Payment Tolerance (VAT Excl.)",
                  DetailedVendorLedgEntry."Entry Type"::"Payment Tolerance (VAT Adjustment)",
                  DetailedVendorLedgEntry."Entry Type"::"Payment Discount Tolerance (VAT Excl.)",
                  DetailedVendorLedgEntry."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)"]
              THEN BEGIN
                IF NOT Args."Print Amounts in LCY" THEN
                  AgingBuffer.Amount += DetailedVendorLedgEntry.Amount
                ELSE
                  AgingBuffer.Amount += DetailedVendorLedgEntry."Amount (LCY)";
                AgingBuffer."Amount (LCY)" += DetailedVendorLedgEntry."Amount (LCY)";
              END;

              IF DetailedVendorLedgEntry."Posting Date" <= Args."Ending Date" THEN BEGIN
                IF NOT Args."Print Amounts in LCY" THEN
                  AgingBuffer.Balance += DetailedVendorLedgEntry.Amount
                ELSE
                  AgingBuffer.Balance += DetailedVendorLedgEntry."Amount (LCY)";
                AgingBuffer."Balance (LCY)" += DetailedVendorLedgEntry."Amount (LCY)";

              END;
            END;
          UNTIL DetailedVendorLedgEntry.NEXT = 0;

          IF AgingBuffer.Balance <> 0 THEN BEGIN
            CASE Args."Aging By" OF
             Args."Aging By"::"Due Date":
               PeriodIndex := Args.GetPeriodIndex(AgingBuffer."Due Date");
             Args."Aging By"::"Posting Date":
               PeriodIndex := Args.GetPeriodIndex(AgingBuffer."Posting Date");
             Args."Aging By"::"Document Date":
               BEGIN
                 IF AgingBuffer."Document Date" > Args."Ending Date" THEN BEGIN
                   AgingBuffer.Balance := 0;
                   AgingBuffer."Balance (LCY)" := 0;
                   AgingBuffer."Document Date" := AgingBuffer."Posting Date";
                 END;
                 PeriodIndex := Args.GetPeriodIndex(AgingBuffer."Document Date");
               END;
            END;

            AgingCalculation.MoveValuesToPeriod(AgingBuffer, PeriodIndex);

            AgingBuffer.INSERT;
            IF NOT Args."Print Amounts in LCY" THEN
              AgingCalculation.UpdateCurrencyTotals(AgingBuffer, CurrAgingBuffer, TempCurrency);
         END;
        UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE InsertTemp@1000000004(VAR VendorLedgerEntry@1000000000 : Record 25);
    BEGIN
      WITH TempVendorLedgerEntry DO BEGIN
        IF GET(VendorLedgerEntry."Entry No.") THEN
          EXIT;

        TempVendorLedgerEntry := VendorLedgerEntry;

        INSERT;
      END;
    END;

    LOCAL PROCEDURE ClearData@1000000000(VAR AgingBuffer@1000000001 : Record 70220);
    BEGIN
      AgingBuffer.RESET;
      AgingBuffer.DELETEALL;
      TempVendorLedgerEntry.RESET;
      TempVendorLedgerEntry.DELETEALL;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT MenuSuite 1060 ForNAV
{
  OBJECT-PROPERTIES
  {
    Date=29-11-17;
    Time=11:25:33;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
  }
  MENUNODES
  {
    {                ;[{7FD6154D-F047-4A31-B857-0DA1E0BA97D8}] ;NextNodeID=[{E55ED739-BBB9-4063-AF58-225E99C5FE72}] }
    { MenuItem       ;[{E55ED739-BBB9-4063-AF58-225E99C5FE72}] ;Name=Document Sending Profiles;
                                                                CaptionML=[ENU=Document Sending Profiles;
                                                                           NLD=Verzendprofielen van documenten];
                                                                ApplicationArea=#Basic,#Suite;
                                                                RunObjectType=Page;
                                                                RunObjectID=359;
                                                                Visible=Yes;
                                                                DepartmentCategory=Lists }
    { MenuItem       ;[{379BBC3B-5EBB-4617-8419-8D76352F8337}] ;Name=Electronic Document Formats;
                                                                CaptionML=[ENU=Electronic Document Formats;
                                                                           NLD=Elektronische documentindelingen];
                                                                ApplicationArea=#Suite;
                                                                RunObjectType=Page;
                                                                RunObjectID=363;
                                                                Visible=Yes;
                                                                DepartmentCategory=Tasks }
    { MenuItem       ;[{8A3934DD-BE0A-4851-B8E0-50A64106B98A}] ;Name=Data Exchange Types;
                                                                CaptionML=[ENU=Data Exchange Types;
                                                                           NLD=Typen gegevensuitwisseling];
                                                                ApplicationArea=#Basic,#Suite;
                                                                RunObjectType=Page;
                                                                RunObjectID=1213;
                                                                Visible=Yes;
                                                                DepartmentCategory=Administration }
    { MenuItem       ;[{0D3D0EB4-59D7-4D3E-95AC-49CD269C6C04}] ;Name=Data Migration Settings;
                                                                AccessByPermission=TableData 1806=R;
                                                                CaptionML=[ENU=Data Migration Settings;
                                                                           NLD=Instellingen van gegevensmigratie];
                                                                ApplicationArea=#Basic,#Suite;
                                                                RunObjectType=Page;
                                                                RunObjectID=1807;
                                                                Visible=Yes;
                                                                DepartmentCategory=Administration }
    { MenuItem       ;[{00646221-3EEF-4883-8640-FECFD9BEC705}] ;Name=Report Configuration;
                                                                AccessByPermission=TableData 2000000196=IMD;
                                                                CaptionML=[ENU=Report Settings;
                                                                           NLD=Rapportinstellingen];
                                                                ApplicationArea=#Basic,#Suite;
                                                                RunObjectType=Page;
                                                                RunObjectID=1560;
                                                                Visible=Yes;
                                                                DepartmentCategory=Administration }
    { MenuItem       ;[{A1E3A413-B0C4-4D20-8B1F-AFF7DFFDB43C}] ;Name=Setup and Help Resources;
                                                                CaptionML=[ENU=Setup and Help Resources;
                                                                           NLD=Instellings- en Help-resources];
                                                                ApplicationArea=#Basic,#Suite;
                                                                RunObjectType=Page;
                                                                RunObjectID=1822;
                                                                Visible=Yes;
                                                                DepartmentCategory=Administration }
    {                ;[{19A352FE-D90D-424E-B85F-CF3B8E98CF0E}] ;NextNodeID=[{0691571E-EDD6-473D-A139-81B1E9B887F2}] }
    { Menu           ;[{0691571E-EDD6-473D-A139-81B1E9B887F2}] ;Name=ForNAV;
                                                                CaptionML=ENU=ForNAV;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                ParentNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                Image=15;
                                                                IsShortcut=No;
                                                                Visible=Yes;
                                                                Enabled=Yes;
                                                                NextNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                FirstChild=[{E849D80C-A6A0-4A75-9313-4A9691856383}] }
    { MenuItem       ;[{CC9EF159-165D-4DCB-8A3B-05D408AB94F8}] ;Name=ForNAV Setup;
                                                                CaptionML=ENU=ForNAV Setup;
                                                                ApplicationArea=;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                RunObjectType=Page;
                                                                RunObjectID=70000;
                                                                ParentNodeID=[{E849D80C-A6A0-4A75-9313-4A9691856383}];
                                                                Visible=Yes;
                                                                NextNodeID=[{C331F6D8-9B94-4792-89D9-CEDBB101436C}];
                                                                DepartmentCategory=Administration }
    { MenuGroup      ;[{E849D80C-A6A0-4A75-9313-4A9691856383}] ;Name=Application Setup;
                                                                CaptionML=ENU=Application Setup;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                ParentNodeID=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                Visible=Yes;
                                                                NextNodeID=[{F70AFFC2-22D2-4BE9-978C-0CE7BF384C2F}];
                                                                FirstChild=[{CC9EF159-165D-4DCB-8A3B-05D408AB94F8}] }
    { MenuItem       ;[{E6D918CF-B1F7-4171-A3E9-3C6E9B592EB1}] ;Name=Transformation Rules;
                                                                CaptionML=ENU=Transformation Rules;
                                                                ApplicationArea=#Basic,#Suite;
                                                                RunObjectType=Page;
                                                                RunObjectID=1237;
                                                                Visible=Yes;
                                                                DepartmentCategory=Administration }
    { MenuItem       ;[{C331F6D8-9B94-4792-89D9-CEDBB101436C}] ;Name=ForNAV Legal Cond. Translation;
                                                                CaptionML=ENU=ForNAV Legal Cond. Translation;
                                                                ApplicationArea=;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                RunObjectType=Page;
                                                                RunObjectID=70001;
                                                                ParentNodeID=[{E849D80C-A6A0-4A75-9313-4A9691856383}];
                                                                Visible=Yes;
                                                                NextNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                DepartmentCategory=Administration }
    { MenuGroup      ;[{F70AFFC2-22D2-4BE9-978C-0CE7BF384C2F}] ;Name=Document Reports;
                                                                CaptionML=ENU=Document Reports;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                ParentNodeID=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                Visible=Yes;
                                                                NextNodeID=[{18FE127A-54F8-4D99-9251-F9F5B7D230B6}];
                                                                FirstChild=[{596FD082-176B-47D1-B4BA-5DABB301A6C3}] }
    { MenuItem       ;[{62E72610-35DE-4B65-A0A8-4A4464FD467C}] ;Name=Sales Order Confirmation;
                                                                CaptionML=ENU=Sales Order Confirmation;
                                                                ApplicationArea=;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                RunObjectType=Report;
                                                                RunObjectID=70000;
                                                                ParentNodeID=[{596FD082-176B-47D1-B4BA-5DABB301A6C3}];
                                                                Visible=Yes;
                                                                NextNodeID=[{D30D76B6-37A6-4333-B5F6-F6688007A102}];
                                                                DepartmentCategory=Reports and Analysis }
    { MenuGroup      ;[{596FD082-176B-47D1-B4BA-5DABB301A6C3}] ;Name=Sales;
                                                                CaptionML=ENU=Sales;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                ParentNodeID=[{F70AFFC2-22D2-4BE9-978C-0CE7BF384C2F}];
                                                                Visible=Yes;
                                                                NextNodeID=[{4ECA5D9B-6E0A-46E8-BB54-57C0FEC90523}];
                                                                FirstChild=[{62E72610-35DE-4B65-A0A8-4A4464FD467C}] }
    { MenuItem       ;[{D30D76B6-37A6-4333-B5F6-F6688007A102}] ;Name=Sales Invoice;
                                                                CaptionML=ENU=Sales Invoice;
                                                                ApplicationArea=;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                RunObjectType=Report;
                                                                RunObjectID=70001;
                                                                ParentNodeID=[{596FD082-176B-47D1-B4BA-5DABB301A6C3}];
                                                                Visible=Yes;
                                                                NextNodeID=[{D689D68B-B7E6-44FA-A12E-412B7F969A7A}];
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{D689D68B-B7E6-44FA-A12E-412B7F969A7A}] ;Name=Sales Credit Memo;
                                                                CaptionML=ENU=Sales Credit Memo;
                                                                ApplicationArea=;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                RunObjectType=Report;
                                                                RunObjectID=70002;
                                                                ParentNodeID=[{596FD082-176B-47D1-B4BA-5DABB301A6C3}];
                                                                Visible=Yes;
                                                                NextNodeID=[{1D3B52D4-9A4A-45D3-A4EA-4EBB5B792BBA}];
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{1D3B52D4-9A4A-45D3-A4EA-4EBB5B792BBA}] ;Name=Sales Shipment;
                                                                CaptionML=ENU=Sales Shipment;
                                                                ApplicationArea=;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                RunObjectType=Report;
                                                                RunObjectID=70003;
                                                                ParentNodeID=[{596FD082-176B-47D1-B4BA-5DABB301A6C3}];
                                                                Visible=Yes;
                                                                NextNodeID=[{BB66C103-03B0-4D34-BAA5-44DE7EB35EB2}];
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{BB66C103-03B0-4D34-BAA5-44DE7EB35EB2}] ;Name=Sales Quote;
                                                                CaptionML=ENU=Sales Quote;
                                                                ApplicationArea=;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                RunObjectType=Report;
                                                                RunObjectID=70004;
                                                                ParentNodeID=[{596FD082-176B-47D1-B4BA-5DABB301A6C3}];
                                                                Visible=Yes;
                                                                NextNodeID=[{420A2BFA-3FD3-4AD3-914D-DACF3DC2A358}];
                                                                DepartmentCategory=Reports and Analysis }
    { MenuGroup      ;[{4ECA5D9B-6E0A-46E8-BB54-57C0FEC90523}] ;Name=Purchase;
                                                                CaptionML=ENU=Purchase;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                ParentNodeID=[{F70AFFC2-22D2-4BE9-978C-0CE7BF384C2F}];
                                                                Visible=Yes;
                                                                NextNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                FirstChild=[{3C3B5DC6-21F5-4E37-8C08-8E5938133520}] }
    { MenuItem       ;[{3C3B5DC6-21F5-4E37-8C08-8E5938133520}] ;Name=Purchase Order;
                                                                CaptionML=ENU=Purchase Order;
                                                                ApplicationArea=;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                RunObjectType=Report;
                                                                RunObjectID=70100;
                                                                ParentNodeID=[{4ECA5D9B-6E0A-46E8-BB54-57C0FEC90523}];
                                                                Visible=Yes;
                                                                NextNodeID=[{59F08D28-DEAC-4A3B-96E2-A6D597DDE1F6}];
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{59F08D28-DEAC-4A3B-96E2-A6D597DDE1F6}] ;Name=Purchase Invoice;
                                                                CaptionML=ENU=Purchase Invoice;
                                                                ApplicationArea=;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                RunObjectType=Report;
                                                                RunObjectID=70101;
                                                                ParentNodeID=[{4ECA5D9B-6E0A-46E8-BB54-57C0FEC90523}];
                                                                Visible=Yes;
                                                                NextNodeID=[{4CC18C18-81F4-4235-ADCD-5168C7501B6E}];
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{4CC18C18-81F4-4235-ADCD-5168C7501B6E}] ;Name=Purchase Credit Memo;
                                                                CaptionML=ENU=Purchase Credit Memo;
                                                                ApplicationArea=;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                RunObjectType=Report;
                                                                RunObjectID=70102;
                                                                ParentNodeID=[{4ECA5D9B-6E0A-46E8-BB54-57C0FEC90523}];
                                                                Visible=Yes;
                                                                NextNodeID=[{F10C4BA6-49D1-41DC-834C-A7F72C44B7C5}];
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{F10C4BA6-49D1-41DC-834C-A7F72C44B7C5}] ;Name=Purchase Quote;
                                                                CaptionML=ENU=Purchase Quote;
                                                                ApplicationArea=;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                RunObjectType=Report;
                                                                RunObjectID=70104;
                                                                ParentNodeID=[{4ECA5D9B-6E0A-46E8-BB54-57C0FEC90523}];
                                                                Visible=Yes;
                                                                NextNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                DepartmentCategory=Reports and Analysis }
    { MenuGroup      ;[{18FE127A-54F8-4D99-9251-F9F5B7D230B6}] ;Name=Reports;
                                                                CaptionML=ENU=Reports;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                ParentNodeID=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                Visible=Yes;
                                                                NextNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                FirstChild=[{BA687EE2-5570-4962-B8FF-C27DE3ABC6F3}] }
    { MenuItem       ;[{BA687EE2-5570-4962-B8FF-C27DE3ABC6F3}] ;Name=ForNAV Trial Balance;
                                                                CaptionML=ENU=ForNAV Trial Balance;
                                                                ApplicationArea=;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                RunObjectType=Report;
                                                                RunObjectID=70206;
                                                                ParentNodeID=[{18FE127A-54F8-4D99-9251-F9F5B7D230B6}];
                                                                Visible=Yes;
                                                                NextNodeID=[{80F41632-02B7-4B65-9469-B637CEA37A37}];
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{80F41632-02B7-4B65-9469-B637CEA37A37}] ;Name=ForNAV Customer/Item Statistics;
                                                                CaptionML=ENU=ForNAV Customer/Item Statistics;
                                                                ApplicationArea=;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                RunObjectType=Report;
                                                                RunObjectID=70248;
                                                                ParentNodeID=[{18FE127A-54F8-4D99-9251-F9F5B7D230B6}];
                                                                Visible=Yes;
                                                                NextNodeID=[{8EBA2FA7-A319-4BFA-8379-B9A253503879}];
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{8EBA2FA7-A319-4BFA-8379-B9A253503879}] ;Name=ForNav Salesperson-Commission;
                                                                CaptionML=ENU=ForNav Salesperson-Commission;
                                                                ApplicationArea=;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                RunObjectType=Report;
                                                                RunObjectID=70215;
                                                                ParentNodeID=[{18FE127A-54F8-4D99-9251-F9F5B7D230B6}];
                                                                Visible=Yes;
                                                                NextNodeID=[{3E0EA722-316D-4835-B87E-31E12BE27FF9}];
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{3E0EA722-316D-4835-B87E-31E12BE27FF9}] ;Name=ForNAV Aged Accounts Receivable;
                                                                CaptionML=ENU=ForNAV Aged Accounts Receivable;
                                                                ApplicationArea=;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                RunObjectType=Report;
                                                                RunObjectID=70220;
                                                                ParentNodeID=[{18FE127A-54F8-4D99-9251-F9F5B7D230B6}];
                                                                Visible=Yes;
                                                                NextNodeID=[{F84E0725-FFC0-482E-A802-8C3F918E698E}];
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{F84E0725-FFC0-482E-A802-8C3F918E698E}] ;Name=ForNAV Aged Accounts Payable;
                                                                CaptionML=ENU=ForNAV Aged Accounts Payable;
                                                                ApplicationArea=;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                RunObjectType=Report;
                                                                RunObjectID=70221;
                                                                ParentNodeID=[{18FE127A-54F8-4D99-9251-F9F5B7D230B6}];
                                                                Visible=Yes;
                                                                NextNodeID=[{41CABE99-FB5D-4D56-853C-5D1F4736CD42}];
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{41CABE99-FB5D-4D56-853C-5D1F4736CD42}] ;Name=Debitor - top 10-liste;
                                                                CaptionML=[CSY=ForNAV Nejlep °ch 10 z†kazn°ku;
                                                                           DAN=ForNAV Debitor - top 10-liste;
                                                                           DEU=ForNAV Top 10 Liste (Debitoren);
                                                                           ENU=ForNAV Customer Top 10 List;
                                                                           FIN=ForNAV Asiakkaat - 10 pÑÑasiakasta;
                                                                           FRA=ForNAV Clients - Palmaräs;
                                                                           ISL=ForNAV Vi˜skiptama˜ur - 10 efstu;
                                                                           ITA=ForNAV Lista primi 10 clienti;
                                                                           NLD=ForNAV Klanten - Top 10;
                                                                           NOR=ForNAV Kunde - ti pÜ topp-liste;
                                                                           RUS=‡âäÜ°ï - ãÜ˜ÉÖò ÑÜ§òïàÖ;
                                                                           SVE=ForNAV Kunder, 10 i topp;
                                                                           DES=ForNAV Top 10 Liste (Debitoren);
                                                                           ENG=ForNAV Customer Top 10 List;
                                                                           FRB=ForNAV Clients - Palmaräs;
                                                                           ITS=ForNAV Lista primi 10 clienti;
                                                                           NLB=ForNAV Klanten - Top 10;
                                                                           DEA=ForNAV Top 10 Liste (Debitoren);
                                                                           ENA=ForNAV Customer Top 10 List;
                                                                           ESN=ForNAV Los 10 mejores clientes;
                                                                           FRS=ForNAV Clients - Palmaräs;
                                                                           ENZ=ForNAV Customer Top 10 List];
                                                                ApplicationArea=;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                RunObjectType=Report;
                                                                RunObjectID=70201;
                                                                ParentNodeID=[{18FE127A-54F8-4D99-9251-F9F5B7D230B6}];
                                                                Visible=Yes;
                                                                NextNodeID=[{45294869-9463-4CF8-B506-43F3CEDF442B}];
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{45294869-9463-4CF8-B506-43F3CEDF442B}] ;Name=Kreditor - top 10-liste;
                                                                CaptionML=[CSY=ForNAV Dodavatel - nejlep °ch 10;
                                                                           DAN=ForNAV Kreditor - top 10-liste;
                                                                           DEU=ForNAV HÑndler Top-10-Liste;
                                                                           ENU=ForNAV Vendor Top 10 List;
                                                                           FIN=ForNAV 10 pÑÑtoimittajaa;
                                                                           FRA=ForNAV Palmaräs fournisseurs;
                                                                           ISL=ForNAV 10 efstu l†nardrottnar;
                                                                           ITA=ForNAV Lista primi 10 fornitori;
                                                                           NLD=ForNAV Lijst top 10 leveranciers;
                                                                           NOR=ForNAV Leverand˚r - topp 10-liste;
                                                                           RUS=Áå§ïÖÉóäàä - ãÜ˜ÉÖò ÑÜ§òïàÖ;
                                                                           SVE=ForNAV 10 i topp leverantîrer;
                                                                           DES=ForNAV HÑndler Top-10-Liste;
                                                                           ENG=ForNAV Vendor Top 10 List;
                                                                           FRB=ForNAV Palmaräs fournisseurs;
                                                                           ITS=ForNAV Lista primi 10 fornitori;
                                                                           NLB=ForNAV Lijst top 10 leveranciers;
                                                                           DEA=ForNAV HÑndler Top-10-Liste;
                                                                           ENA=ForNAV Vendor Top 10 List;
                                                                           ESN=ForNAV Listado 10 mejores proveedores;
                                                                           FRS=ForNAV Palmaräs fournisseurs;
                                                                           ENZ=ForNAV Vendor Top 10 List];
                                                                ApplicationArea=;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                RunObjectType=Report;
                                                                RunObjectID=70202;
                                                                ParentNodeID=[{18FE127A-54F8-4D99-9251-F9F5B7D230B6}];
                                                                Visible=Yes;
                                                                NextNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{6FBB60D4-3684-4106-BEFF-237518F7236E}] ;Name=Data Migration Overview;
                                                                CaptionML=[ENU=Data Migration Overview;
                                                                           NLD=Overzicht van gegevensmigratie];
                                                                ApplicationArea=#Basic,#Suite;
                                                                RunObjectType=Page;
                                                                RunObjectID=1799;
                                                                Visible=Yes;
                                                                NextNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                DepartmentCategory=Administration }
    { MenuItem       ;[{420A2BFA-3FD3-4AD3-914D-DACF3DC2A358}] ;Name=Customer Statement;
                                                                CaptionML=ENU=Customer Statement;
                                                                ApplicationArea=;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                RunObjectType=Report;
                                                                RunObjectID=70250;
                                                                ParentNodeID=[{596FD082-176B-47D1-B4BA-5DABB301A6C3}];
                                                                Visible=Yes;
                                                                NextNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                DepartmentCategory=Reports and Analysis }
  }
}
OBJECT Page 70000 ForNAV Setup
{
  OBJECT-PROPERTIES
  {
    Date=20-12-17;
    Time=17:44:41;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table70000;
    PageType=Card;
    OnOpenPage=BEGIN
                 InitSetup;
               END;

    OnAfterGetRecord=BEGIN
                       WrongLocalization := NOT ValidateCurrentLocalization;
                     END;

    ActionList=ACTIONS
    {
      { 1       ;    ;ActionContainer;
                      Name=ActionItems;
                      ActionContainerType=ActionItems }
      { 11      ;1   ;ActionGroup;
                      Name=Watermark }
      { 10      ;2   ;Action    ;
                      Name=DownloadWatermark;
                      CaptionML=ENU=Download Watermarks;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Link;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 DownloadWatermarks;
                               END;
                                }
      { 8       ;1   ;ActionGroup;
                      Name=Delete Visuals }
      { 14      ;2   ;Action    ;
                      Name=DeleteDocWatermark;
                      CaptionML=ENU=Document Watermark;
                      Image=Delete;
                      OnAction=VAR
                                 AreYouSureQst@1000 : TextConst 'ENU=Are you sure you want to clear %1?';
                               BEGIN
                                 IF NOT CONFIRM(AreYouSureQst, FALSE, FIELDCAPTION("Document Watermark")) THEN
                                   EXIT;

                                 "Document Watermark File Name" := 'Click to import...';
                                 CLEAR("Document Watermark");
                                 MODIFY;
                               END;
                                }
      { 15      ;2   ;Action    ;
                      Name=DeleteListWatermark;
                      CaptionML=ENU=List Watermark;
                      Image=Delete;
                      OnAction=VAR
                                 AreYouSureQst@1000 : TextConst 'ENU=Are you sure you want to clear %1?';
                               BEGIN
                                 IF NOT CONFIRM(AreYouSureQst, FALSE, FIELDCAPTION("List Report Watermark")) THEN
                                   EXIT;

                                 "List Report Watermark File N." := 'Click to import...';
                                 CLEAR("List Report Watermark");
                                 MODIFY;
                               END;
                                }
      { 16      ;2   ;Action    ;
                      Name=DeleteLogo;
                      CaptionML=ENU=Logo;
                      Image=Delete;
                      OnAction=VAR
                                 AreYouSureQst@1000 : TextConst 'ENU=Are you sure you want to clear %1?';
                               BEGIN
                                 IF NOT CONFIRM(AreYouSureQst, FALSE, FIELDCAPTION(Logo)) THEN
                                   EXIT;

                                 "Logo File Name" := 'Click to import...';
                                 CLEAR(Logo);
                                 MODIFY;
                               END;
                                }
      { 12      ;1   ;ActionGroup;
                      Name=System }
      { 2       ;2   ;Action    ;
                      Name=ReplaceReports;
                      CaptionML=ENU=Replace Reportselection;
                      Image=SwitchCompanies;
                      OnAction=BEGIN
                                 ReplaceReportSelection(FALSE);
                               END;
                                }
      { 7       ;2   ;Action    ;
                      Name=CheckLocalization;
                      CaptionML=ENU=Check Localization;
                      Image=MapSetup;
                      OnAction=BEGIN
                                 CheckLocalizationBasedOnTables;
                                 MODIFY;
                               END;
                                }
      { 9       ;2   ;Action    ;
                      Name=CreateWebservice;
                      CaptionML=ENU=Create ForNAV Webservice;
                      Image=ServiceSetup;
                      OnAction=BEGIN
                                 CreateWebService;
                               END;
                                }
      { 13      ;1   ;ActionGroup;
                      Name=Template }
      { 1000000014;2 ;Action    ;
                      Name=DesignTemplatePortrait;
                      CaptionML=ENU=Design General Template (Portrait);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=UnitOfMeasure;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 DesignTemplatePortrait;
                               END;
                                }
      { 21      ;2   ;Action    ;
                      Name=DesignTemplateLandscape;
                      CaptionML=ENU=Design General Template (Landscape);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=VATPostingSetup;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 DesignTemplateLandscape;
                               END;
                                }
      { 4       ;2   ;Action    ;
                      Name=DesignSalesTemplate;
                      CaptionML=ENU=Design Sales Template;
                      ToolTipML=ENU=Use this option to change the sales template, for example when you want to move the address or change the font.;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Design;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 DesignSalesTemplate;
                               END;
                                }
      { 1000000009;2 ;Action    ;
                      Name=DesignPurchaseTemplate;
                      CaptionML=ENU=Design Purchase Template;
                      ToolTipML=ENU=Use this option to change the purchase template, for example when you want to move the address or change the font.;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=DesignCodeBehind;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 DesignPurchaseTemplate;
                               END;
                                }
      { 1000000011;  ;ActionContainer;
                      Name=RelatedInformation;
                      ActionContainerType=RelatedInformation }
      { 1000000013;1 ;Action    ;
                      Name=Translations;
                      CaptionML=ENU=Translations;
                      ToolTipML=ENU=View or edit translated legal conditions. Translated legal conditions are automatically inserted on documents according to the language code.;
                      RunObject=Page 70001;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Translations;
                      PromotedCategory=Report }
    }
  }
  CONTROLS
  {
    { 1000000000;0;Container;
                ContainerType=ContentArea }

    { 1000000001;1;Group  ;
                Name=General;
                GroupType=Group }

    { 6   ;2   ;Field     ;
                SourceExpr=Localization;
                Style=Unfavorable;
                StyleExpr=WrongLocalization }

    { 1000000010;2;Field  ;
                SourceExpr="Use ForNAV Languages" }

    { 1000000012;2;Field  ;
                SourceExpr="Use Preprinted Paper" }

    { 1000000002;1;Group  ;
                Name=VAT/Sales Tax;
                GroupType=Group }

    { 1000000003;2;Field  ;
                SourceExpr="VAT Amount Specification" }

    { 1000000004;1;Group  ;
                Name=Document Texts;
                GroupType=Group }

    { 5   ;2   ;Field     ;
                SourceExpr="Payment Note";
                MultiLine=Yes }

    { 1000000005;2;Field  ;
                SourceExpr="Legal Conditions";
                MultiLine=Yes }

    { 17  ;1   ;Group     ;
                Name=Visuals;
                GroupType=Group }

    { 18  ;2   ;Field     ;
                CaptionML=ENU=Logo;
                SourceExpr="Logo File Name";
                OnDrillDown=VAR
                              TempBlob@1001 : Record 99008535;
                              FileManagement@1000 : Codeunit 419;
                            BEGIN
                              CALCFIELDS(Logo);
                              IF "Logo File Name" <> 'Click to import...' THEN BEGIN
                                TempBlob.Blob := Logo;
                                HYPERLINK(FileManagement.BLOBExport(TempBlob, "Logo File Name", FALSE));
                              END ELSE
                                ImportWatermarkFromClientFile(FIELDNO(Logo));
                              MODIFY;
                            END;
                             }

    { 19  ;2   ;Field     ;
                CaptionML=ENU=Document Watermark;
                SourceExpr="Document Watermark File Name";
                Editable=FALSE;
                OnDrillDown=VAR
                              TempBlob@1001 : Record 99008535;
                              FileManagement@1000 : Codeunit 419;
                            BEGIN
                              CALCFIELDS("Document Watermark");
                              IF "Document Watermark File Name" <> 'Click to import...' THEN BEGIN
                                TempBlob.Blob := "Document Watermark";
                                HYPERLINK(FileManagement.BLOBExport(TempBlob, "Document Watermark File Name", FALSE));
                              END ELSE
                                ImportWatermarkFromClientFile(FIELDNO("Document Watermark"));
                              MODIFY;
                            END;
                             }

    { 20  ;2   ;Field     ;
                CaptionML=ENU=List Report Watermark;
                SourceExpr="List Report Watermark File N.";
                OnDrillDown=VAR
                              TempBlob@1001 : Record 99008535;
                              FileManagement@1000 : Codeunit 419;
                            BEGIN
                              CALCFIELDS("List Report Watermark");
                              IF "List Report Watermark File N." <> 'Click to import...' THEN BEGIN
                                TempBlob.Blob := "List Report Watermark";
                                HYPERLINK(FileManagement.BLOBExport(TempBlob, "List Report Watermark File N.", FALSE));
                              END ELSE
                                ImportWatermarkFromClientFile(FIELDNO("List Report Watermark"));
                              MODIFY;
                            END;
                             }

    { 1000000006;0;Container;
                ContainerType=FactBoxArea }

    { 1000000007;1;Part   ;
                PartType=System;
                SystemPartID=MyNotes }

    { 1000000008;1;Part   ;
                PartType=System;
                SystemPartID=RecordLinks }

  }
  CODE
  {
    VAR
      WrongLocalization@1000 : Boolean INDATASET;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Page 70001 ForNAV Legal Cond. Translation
{
  OBJECT-PROPERTIES
  {
    Date=14-07-17;
    Time=10:56:09;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
    SourceTable=Table70001;
    PageType=List;
  }
  CONTROLS
  {
    { 1000000000;0;Container;
                ContainerType=ContentArea }

    { 1000000001;1;Group  ;
                Name=Group;
                GroupType=Repeater }

    { 1000000002;2;Field  ;
                SourceExpr="Language Code" }

    { 1000000003;2;Field  ;
                SourceExpr="Legal Conditions" }

  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Page 70005 ForNAV Setup Wizard
{
  OBJECT-PROPERTIES
  {
    Date=12-09-17;
    Time=13:48:49;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
    SourceTable=Table70000;
    PageType=NavigatePage;
    SourceTableTemporary=Yes;
    OnInit=BEGIN
             LoadTopBanners;
           END;

    OnOpenPage=BEGIN
                 INIT;
                 IF ForNAVSetup.GET THEN BEGIN
                   TRANSFERFIELDS(ForNAVSetup);
                   WrongLocalization := NOT ValidateCurrentLocalization;
                 END ELSE BEGIN
                   CheckLocalizationBasedOnTables;
                   "Legal Conditions" := LegalConditionsTxt;
                   "Payment Note" := PaymentNoteTxt;
                   "VAT Amount Specification" := "VAT Amount Specification"::"Multiple Lines";
                   VALIDATE(Localization);
                 END;
                 INSERT;

                 Step := Step::Start;
                 EnableControls;
               END;

    ActionList=ACTIONS
    {
      { 19      ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 18      ;1   ;Action    ;
                      Name=ActionBack;
                      CaptionML=ENU=Back;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=BackActionEnabled;
                      InFooterBar=Yes;
                      Image=PreviousRecord;
                      OnAction=BEGIN
                                 NextStep(TRUE);
                               END;
                                }
      { 16      ;1   ;Action    ;
                      Name=ActionNext;
                      CaptionML=ENU=Next;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=NextActionEnabled;
                      InFooterBar=Yes;
                      Image=NextRecord;
                      OnAction=BEGIN
                                 NextStep(FALSE);
                               END;
                                }
      { 8       ;1   ;Action    ;
                      Name=ActionFinish;
                      CaptionML=ENU=Finish;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=FinishActionEnabled;
                      InFooterBar=Yes;
                      Image=Approve;
                      OnAction=BEGIN
                                 FinishAction;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 5   ;0   ;Container ;
                ContainerType=ContentArea }

    { 4   ;1   ;Group     ;
                Visible=TopBannerVisible AND NOT FinalStepVisible;
                Editable=FALSE;
                GroupType=Group }

    { 3   ;2   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MediaRepositoryStandard.Image;
                Editable=FALSE;
                ShowCaption=No }

    { 2   ;1   ;Group     ;
                Visible=TopBannerVisible AND FinalStepVisible;
                Editable=FALSE;
                GroupType=Group }

    { 1   ;2   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MediaRepositoryDone.Image;
                Editable=FALSE;
                ShowCaption=No }

    { 11  ;1   ;Group     ;
                Visible=FirstStepVisible;
                GroupType=Group }

    { 10  ;2   ;Group     ;
                CaptionML=ENU=Welcome to ForNAV Setup;
                Visible=FirstStepVisible;
                GroupType=Group }

    { 9   ;3   ;Group     ;
                GroupType=Group;
                InstructionalTextML=ENU="The ForNAV report package contains several documents that are optimized to work with our designer. " }

    { 7   ;2   ;Group     ;
                CaptionML=ENU=Let's go!;
                GroupType=Group }

    { 6   ;3   ;Group     ;
                GroupType=Group;
                InstructionalTextML=ENU=Choose Next so you can set up the ForNAV report package. }

    { 15  ;1   ;Group     ;
                Visible=FinalStepVisible;
                GroupType=Group }

    { 13  ;2   ;Group     ;
                CaptionML=ENU=That's it!;
                GroupType=Group }

    { 12  ;3   ;Group     ;
                GroupType=Group;
                InstructionalTextML=ENU=To enable the ForNAV report package choose Finish. }

    { 24  ;1   ;Group     ;
                Visible=Step1Visible;
                GroupType=Group;
                InstructionalTextML=ENU=Select your localization... }

    { 25  ;2   ;Field     ;
                SourceExpr=Localization;
                OnValidate=BEGIN
                             WrongLocalization := NOT ValidateCurrentLocalization;
                           END;
                            }

    { 27  ;2   ;Group     ;
                Visible=WrongLocalization;
                GroupType=Group;
                InstructionalTextML=ENU=WARNING! This is not the localization we detected! }

    { 21  ;1   ;Group     ;
                Visible=Step2Visible;
                GroupType=Group;
                InstructionalTextML=ENU=Select your VAT printing preferences and legal clause. }

    { 22  ;2   ;Field     ;
                SourceExpr="VAT Amount Specification" }

    { 14  ;2   ;Field     ;
                SourceExpr="Payment Note" }

    { 23  ;2   ;Field     ;
                SourceExpr="Legal Conditions" }

    { 17  ;1   ;Group     ;
                Visible=Step3Visible;
                GroupType=Group;
                InstructionalTextML=ENU=Do you want to replace the current report selections with the ForNAV reports? }

    { 20  ;2   ;Field     ;
                Name=ReplaceReports;
                CaptionML=ENU=Replace Reports;
                SourceExpr=ReplaceReports }

    { 30  ;1   ;Group     ;
                Visible=Step3Visible;
                GroupType=Group;
                InstructionalTextML=ENU=Do you want to create the fields webservice? }

    { 29  ;2   ;Field     ;
                SourceExpr=CreateTheWebService }

    { 1000000001;1;Group  ;
                Visible=Step2Visible;
                GroupType=Group;
                InstructionalTextML=ENU=A watermark can make your reports look nicer. Do you want to import one? }

    { 1000000000;2;Field  ;
                Name=ImportWatermark;
                SourceExpr=WatermarkTxt;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              ImportWatermarkFromClientFile(FIELDNO("Document Watermark"));
                            END;

                ShowCaption=No }

    { 28  ;2   ;Field     ;
                Name=ImportWatermarkList;
                SourceExpr=WatermarkListTxt;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              ImportWatermarkFromClientFile(FIELDNO("List Report Watermark"));
                            END;

                ShowCaption=No }

    { 26  ;2   ;Field     ;
                Name=ImportCompanyLogo;
                SourceExpr=CompanyLogoTxt;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              ImportWatermarkFromClientFile(FIELDNO(Logo));
                            END;

                ShowCaption=No }

  }
  CODE
  {
    VAR
      MediaRepositoryStandard@1001 : Record 9400;
      MediaRepositoryDone@1000 : Record 9400;
      ForNAVSetup@1005 : Record 70000;
      TopBannerVisible@1003 : Boolean;
      FinalStepVisible@1002 : Boolean;
      FirstStepVisible@1004 : Boolean;
      FinishActionEnabled@1007 : Boolean;
      BackActionEnabled@1008 : Boolean;
      NextActionEnabled@1009 : Boolean;
      Step1Visible@1011 : Boolean;
      Step2Visible@1010 : Boolean;
      Step3Visible@1013 : Boolean;
      ReplaceReports@1012 : Boolean;
      CreateTheWebService@1019 : Boolean;
      WrongLocalization@1014 : Boolean INDATASET;
      Step@1006 : 'Start,Step1,Step2,Step3,Finish';
      WatermarkTxt@1000000000 : TextConst 'ENU=Click to import a watermark for document reports';
      WatermarkListTxt@1018 : TextConst 'ENU=Click to import a watermark for list reports';
      CompanyLogoTxt@1017 : TextConst 'ENU=Click to import a company logo';
      PaymentNoteTxt@1015 : TextConst 'ENU=- You can print a payment note here -';
      LegalConditionsTxt@1016 : TextConst 'ENU=- You can print your legal conditions here -';

    LOCAL PROCEDURE LoadTopBanners@40();
    BEGIN
      IF MediaRepositoryStandard.GET('AssistedSetup-NoText-400px.png',FORMAT(CURRENTCLIENTTYPE)) AND
         MediaRepositoryDone.GET('AssistedSetupDone-NoText-400px.png',FORMAT(CURRENTCLIENTTYPE))
      THEN
        TopBannerVisible := MediaRepositoryDone.Image.HASVALUE;
    END;

    LOCAL PROCEDURE EnableControls@2();
    BEGIN
      ResetControls;

      CASE Step OF
        Step::Start:
          ShowStartStep;
        Step::Step1:
          ShowStep1;
        Step::Step2:
          ShowStep2;
        Step::Step3:
          ShowStep3;
        Step::Finish:
          ShowFinishStep;
      END;
    END;

    LOCAL PROCEDURE ShowStartStep@24();
    BEGIN
      FirstStepVisible := TRUE;
      FinishActionEnabled := FALSE;
      BackActionEnabled := FALSE;
    END;

    LOCAL PROCEDURE ShowStep1@33();
    BEGIN
      Step1Visible := TRUE;
    END;

    LOCAL PROCEDURE ShowStep2@34();
    BEGIN
      Step2Visible := TRUE;
    END;

    LOCAL PROCEDURE ShowStep3@4();
    BEGIN
      Step3Visible := TRUE;
    END;

    LOCAL PROCEDURE ShowFinishStep@35();
    BEGIN
      FinalStepVisible := TRUE;
      NextActionEnabled := FALSE;
    END;

    LOCAL PROCEDURE ResetControls@1();
    BEGIN
      FinishActionEnabled := 1=1;
      BackActionEnabled := TRUE;
      NextActionEnabled := TRUE;

      FirstStepVisible := FALSE;
      Step1Visible := FALSE;
      Step2Visible := FALSE;
      Step3Visible := FALSE;
      FinalStepVisible := FALSE;
    END;

    LOCAL PROCEDURE NextStep@41(Backwards@1000 : Boolean);
    BEGIN
      IF Backwards THEN
        Step := Step - 1
      ELSE
        Step := Step + 1;

      EnableControls;
    END;

    LOCAL PROCEDURE FinishAction@12();
    BEGIN
      StoreForNAVSetup;
      CurrPage.CLOSE;
    END;

    LOCAL PROCEDURE StoreForNAVSetup@3();
    BEGIN
      IF NOT ForNAVSetup.GET THEN BEGIN
        ForNAVSetup.INIT;
        ForNAVSetup.INSERT;
      END;

      ForNAVSetup.TRANSFERFIELDS(Rec,FALSE);
      IF NOT ForNAVSetup.Logo.HASVALUE THEN
        ForNAVSetup.GetCompanyLogo;

      ForNAVSetup.MODIFY;
      IF ReplaceReports THEN
        ForNAVSetup.ReplaceReportSelection(TRUE);
      IF CreateTheWebService THEN
        CreateWebService;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Page 70006 ForNAV Fields Webservice
{
  OBJECT-PROPERTIES
  {
    Date=15-01-18;
    Time=09:16:03;
    Modified=Yes;
    Version List=SHIP;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=ENU=FieldsEx;
    SourceTable=Table2000000041;
    PageType=List;
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                CaptionML=ENU=TableNo;
                SourceExpr=TableNo }

    { 4   ;2   ;Field     ;
                CaptionML=ENU=No.;
                SourceExpr="No." }

    { 6   ;2   ;Field     ;
                CaptionML=ENU=TableName;
                SourceExpr=TableName }

    { 8   ;2   ;Field     ;
                CaptionML=ENU=FieldName;
                SourceExpr=FieldName }

    { 10  ;2   ;Field     ;
                CaptionML=ENU=Type;
                SourceExpr=Type }

    { 12  ;2   ;Field     ;
                CaptionML=ENU=Class;
                SourceExpr=Class }

    { 3   ;2   ;Field     ;
                SourceExpr=RelationTableNo }

    { 5   ;2   ;Field     ;
                SourceExpr=RelationFieldNo }

    { 7   ;2   ;Field     ;
                SourceExpr=OptionString }

  }
  CODE
  {

    BEGIN
    END.
  }
}

